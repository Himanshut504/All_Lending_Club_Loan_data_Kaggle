{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bba5ec15",
   "metadata": {},
   "source": [
    "# Lending club prediction kaggle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c598fe1",
   "metadata": {},
   "source": [
    "## Our Goal\n",
    "Given historical data on loans given out with information on whether or not the borrower defaulted (charge-off), can we build a model thatcan predict wether or nor a borrower will pay back their loan? This way in the future when we get a new potential customer we can assess whether or not they are likely to pay back the loan. Keep in mind classification metrics when evaluating the performance of your model!\n",
    "\n",
    "The \"loan_status\" column contains our label.\n",
    "\n",
    "### Data Overview\n",
    "\n",
    "----\n",
    "-----\n",
    "There are many LendingClub data sets on Kaggle. Here is the information on this particular data set:\n",
    "\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>LoanStatNew</th>\n",
    "      <th>Description</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>loan_amnt</td>\n",
    "      <td>The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>term</td>\n",
    "      <td>The number of payments on the loan. Values are in months and can be either 36 or 60.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>int_rate</td>\n",
    "      <td>Interest Rate on the loan</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>installment</td>\n",
    "      <td>The monthly payment owed by the borrower if the loan originates.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>grade</td>\n",
    "      <td>LC assigned loan grade</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>5</th>\n",
    "      <td>sub_grade</td>\n",
    "      <td>LC assigned loan subgrade</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>6</th>\n",
    "      <td>emp_title</td>\n",
    "      <td>The job title supplied by the Borrower when applying for the loan.*</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>7</th>\n",
    "      <td>emp_length</td>\n",
    "      <td>Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>8</th>\n",
    "      <td>home_ownership</td>\n",
    "      <td>The home ownership status provided by the borrower during registration or obtained from the credit report. Our values are: RENT, OWN, MORTGAGE, OTHER</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>9</th>\n",
    "      <td>annual_inc</td>\n",
    "      <td>The self-reported annual income provided by the borrower during registration.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>10</th>\n",
    "      <td>verification_status</td>\n",
    "      <td>Indicates if income was verified by LC, not verified, or if the income source was verified</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>11</th>\n",
    "      <td>issue_d</td>\n",
    "      <td>The month which the loan was funded</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>12</th>\n",
    "      <td>loan_status</td>\n",
    "      <td>Current status of the loan</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>13</th>\n",
    "      <td>purpose</td>\n",
    "      <td>A category provided by the borrower for the loan request.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>14</th>\n",
    "      <td>title</td>\n",
    "      <td>The loan title provided by the borrower</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>15</th>\n",
    "      <td>zip_code</td>\n",
    "      <td>The first 3 numbers of the zip code provided by the borrower in the loan application.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>16</th>\n",
    "      <td>addr_state</td>\n",
    "      <td>The state provided by the borrower in the loan application</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>17</th>\n",
    "      <td>dti</td>\n",
    "      <td>A ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower’s self-reported monthly income.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>18</th>\n",
    "      <td>earliest_cr_line</td>\n",
    "      <td>The month the borrower's earliest reported credit line was opened</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>19</th>\n",
    "      <td>open_acc</td>\n",
    "      <td>The number of open credit lines in the borrower's credit file.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>20</th>\n",
    "      <td>pub_rec</td>\n",
    "      <td>Number of derogatory public records</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>21</th>\n",
    "      <td>revol_bal</td>\n",
    "      <td>Total credit revolving balance</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>22</th>\n",
    "      <td>revol_util</td>\n",
    "      <td>Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>23</th>\n",
    "      <td>total_acc</td>\n",
    "      <td>The total number of credit lines currently in the borrower's credit file</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>24</th>\n",
    "      <td>initial_list_status</td>\n",
    "      <td>The initial listing status of the loan. Possible values are – W, F</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>25</th>\n",
    "      <td>application_type</td>\n",
    "      <td>Indicates whether the loan is an individual application or a joint application with two co-borrowers</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>26</th>\n",
    "      <td>mort_acc</td>\n",
    "      <td>Number of mortgage accounts.</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>27</th>\n",
    "      <td>pub_rec_bankruptcies</td>\n",
    "      <td>Number of public record bankruptcies</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "\n",
    "---\n",
    "----\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8c7e480b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing data \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53eef901",
   "metadata": {},
   "outputs": [],
   "source": [
    "# data_info = pd.read_csv('../DATA/lending_club_info.csv', index_col ='LoanStatNew')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "11ddf8e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_info = pd.read_csv('lending_club_info.csv', index_col ='LoanStatNew')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "03b023df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n"
     ]
    }
   ],
   "source": [
    "print(data_info.loc['revol_util']['Description'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "073fdd46",
   "metadata": {},
   "outputs": [],
   "source": [
    "def feat_info(col_name):\n",
    "    print(data_info.loc[col_name]['Description'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0f1b5ed2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of mortgage accounts.\n"
     ]
    }
   ],
   "source": [
    "feat_info('mort_acc')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e96ec8d8",
   "metadata": {},
   "source": [
    "## Loading the data and other imports "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9b4afc3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('lending_club_loan_two.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1d4c0547",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 396030 entries, 0 to 396029\n",
      "Data columns (total 27 columns):\n",
      " #   Column                Non-Null Count   Dtype  \n",
      "---  ------                --------------   -----  \n",
      " 0   loan_amnt             396030 non-null  float64\n",
      " 1   term                  396030 non-null  object \n",
      " 2   int_rate              396030 non-null  float64\n",
      " 3   installment           396030 non-null  float64\n",
      " 4   grade                 396030 non-null  object \n",
      " 5   sub_grade             396030 non-null  object \n",
      " 6   emp_title             373103 non-null  object \n",
      " 7   emp_length            377729 non-null  object \n",
      " 8   home_ownership        396030 non-null  object \n",
      " 9   annual_inc            396030 non-null  float64\n",
      " 10  verification_status   396030 non-null  object \n",
      " 11  issue_d               396030 non-null  object \n",
      " 12  loan_status           396030 non-null  object \n",
      " 13  purpose               396030 non-null  object \n",
      " 14  title                 394275 non-null  object \n",
      " 15  dti                   396030 non-null  float64\n",
      " 16  earliest_cr_line      396030 non-null  object \n",
      " 17  open_acc              396030 non-null  float64\n",
      " 18  pub_rec               396030 non-null  float64\n",
      " 19  revol_bal             396030 non-null  float64\n",
      " 20  revol_util            395754 non-null  float64\n",
      " 21  total_acc             396030 non-null  float64\n",
      " 22  initial_list_status   396030 non-null  object \n",
      " 23  application_type      396030 non-null  object \n",
      " 24  mort_acc              358235 non-null  float64\n",
      " 25  pub_rec_bankruptcies  395495 non-null  float64\n",
      " 26  address               396030 non-null  object \n",
      "dtypes: float64(12), object(15)\n",
      "memory usage: 81.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f52d130",
   "metadata": {},
   "source": [
    "### EDA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34a43e1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>...</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>application_type</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>Marketing</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36369.0</td>\n",
       "      <td>41.8</td>\n",
       "      <td>25.0</td>\n",
       "      <td>w</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0174 Michelle Gateway\\r\\nMendozaberg, OK 22690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>Credit analyst</td>\n",
       "      <td>4 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20131.0</td>\n",
       "      <td>53.3</td>\n",
       "      <td>27.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>B</td>\n",
       "      <td>B3</td>\n",
       "      <td>Statistician</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11987.0</td>\n",
       "      <td>92.2</td>\n",
       "      <td>26.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>A</td>\n",
       "      <td>A2</td>\n",
       "      <td>Client Advocate</td>\n",
       "      <td>6 years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5472.0</td>\n",
       "      <td>21.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>823 Reid Ford\\r\\nDelacruzside, MA 00813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>C</td>\n",
       "      <td>C5</td>\n",
       "      <td>Destiny Management Inc.</td>\n",
       "      <td>9 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24584.0</td>\n",
       "      <td>69.8</td>\n",
       "      <td>43.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>679 Luna Roads\\r\\nGreggshire, VA 11650</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_amnt        term  int_rate  installment grade sub_grade  \\\n",
       "0    10000.0   36 months     11.44       329.48     B        B4   \n",
       "1     8000.0   36 months     11.99       265.68     B        B5   \n",
       "2    15600.0   36 months     10.49       506.97     B        B3   \n",
       "3     7200.0   36 months      6.49       220.65     A        A2   \n",
       "4    24375.0   60 months     17.27       609.33     C        C5   \n",
       "\n",
       "                 emp_title emp_length home_ownership  annual_inc  ...  \\\n",
       "0                Marketing  10+ years           RENT    117000.0  ...   \n",
       "1          Credit analyst     4 years       MORTGAGE     65000.0  ...   \n",
       "2             Statistician   < 1 year           RENT     43057.0  ...   \n",
       "3          Client Advocate    6 years           RENT     54000.0  ...   \n",
       "4  Destiny Management Inc.    9 years       MORTGAGE     55000.0  ...   \n",
       "\n",
       "  open_acc pub_rec revol_bal revol_util total_acc  initial_list_status  \\\n",
       "0     16.0     0.0   36369.0       41.8      25.0                    w   \n",
       "1     17.0     0.0   20131.0       53.3      27.0                    f   \n",
       "2     13.0     0.0   11987.0       92.2      26.0                    f   \n",
       "3      6.0     0.0    5472.0       21.5      13.0                    f   \n",
       "4     13.0     0.0   24584.0       69.8      43.0                    f   \n",
       "\n",
       "  application_type  mort_acc  pub_rec_bankruptcies  \\\n",
       "0       INDIVIDUAL       0.0                   0.0   \n",
       "1       INDIVIDUAL       3.0                   0.0   \n",
       "2       INDIVIDUAL       0.0                   0.0   \n",
       "3       INDIVIDUAL       0.0                   0.0   \n",
       "4       INDIVIDUAL       1.0                   0.0   \n",
       "\n",
       "                                             address  \n",
       "0     0174 Michelle Gateway\\r\\nMendozaberg, OK 22690  \n",
       "1  1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113  \n",
       "2  87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113  \n",
       "3            823 Reid Ford\\r\\nDelacruzside, MA 00813  \n",
       "4             679 Luna Roads\\r\\nGreggshire, VA 11650  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1b850012",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='loan_status', ylabel='count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Count plot on loan status\n",
    "sns.countplot(df['loan_status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a1338613",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='loan_amnt', ylabel='Count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check histogram of the loan_amount column\n",
    "plt.figure(figsize=(12,4))\n",
    "sns.histplot(df['loan_amnt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cb307825",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>loan_amnt</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.168921</td>\n",
       "      <td>0.953929</td>\n",
       "      <td>0.336887</td>\n",
       "      <td>0.016636</td>\n",
       "      <td>0.198556</td>\n",
       "      <td>-0.077779</td>\n",
       "      <td>0.328320</td>\n",
       "      <td>0.099911</td>\n",
       "      <td>0.223886</td>\n",
       "      <td>0.222315</td>\n",
       "      <td>-0.106539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>int_rate</th>\n",
       "      <td>0.168921</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.162758</td>\n",
       "      <td>-0.056771</td>\n",
       "      <td>0.079038</td>\n",
       "      <td>0.011649</td>\n",
       "      <td>0.060986</td>\n",
       "      <td>-0.011280</td>\n",
       "      <td>0.293659</td>\n",
       "      <td>-0.036404</td>\n",
       "      <td>-0.082583</td>\n",
       "      <td>0.057450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>installment</th>\n",
       "      <td>0.953929</td>\n",
       "      <td>0.162758</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.330381</td>\n",
       "      <td>0.015786</td>\n",
       "      <td>0.188973</td>\n",
       "      <td>-0.067892</td>\n",
       "      <td>0.316455</td>\n",
       "      <td>0.123915</td>\n",
       "      <td>0.202430</td>\n",
       "      <td>0.193694</td>\n",
       "      <td>-0.098628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>annual_inc</th>\n",
       "      <td>0.336887</td>\n",
       "      <td>-0.056771</td>\n",
       "      <td>0.330381</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.081685</td>\n",
       "      <td>0.136150</td>\n",
       "      <td>-0.013720</td>\n",
       "      <td>0.299773</td>\n",
       "      <td>0.027871</td>\n",
       "      <td>0.193023</td>\n",
       "      <td>0.236320</td>\n",
       "      <td>-0.050162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dti</th>\n",
       "      <td>0.016636</td>\n",
       "      <td>0.079038</td>\n",
       "      <td>0.015786</td>\n",
       "      <td>-0.081685</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.136181</td>\n",
       "      <td>-0.017639</td>\n",
       "      <td>0.063571</td>\n",
       "      <td>0.088375</td>\n",
       "      <td>0.102128</td>\n",
       "      <td>-0.025439</td>\n",
       "      <td>-0.014558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>open_acc</th>\n",
       "      <td>0.198556</td>\n",
       "      <td>0.011649</td>\n",
       "      <td>0.188973</td>\n",
       "      <td>0.136150</td>\n",
       "      <td>0.136181</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.018392</td>\n",
       "      <td>0.221192</td>\n",
       "      <td>-0.131420</td>\n",
       "      <td>0.680728</td>\n",
       "      <td>0.109205</td>\n",
       "      <td>-0.027732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec</th>\n",
       "      <td>-0.077779</td>\n",
       "      <td>0.060986</td>\n",
       "      <td>-0.067892</td>\n",
       "      <td>-0.013720</td>\n",
       "      <td>-0.017639</td>\n",
       "      <td>-0.018392</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.101664</td>\n",
       "      <td>-0.075910</td>\n",
       "      <td>0.019723</td>\n",
       "      <td>0.011552</td>\n",
       "      <td>0.699408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_bal</th>\n",
       "      <td>0.328320</td>\n",
       "      <td>-0.011280</td>\n",
       "      <td>0.316455</td>\n",
       "      <td>0.299773</td>\n",
       "      <td>0.063571</td>\n",
       "      <td>0.221192</td>\n",
       "      <td>-0.101664</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.226346</td>\n",
       "      <td>0.191616</td>\n",
       "      <td>0.194925</td>\n",
       "      <td>-0.124532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_util</th>\n",
       "      <td>0.099911</td>\n",
       "      <td>0.293659</td>\n",
       "      <td>0.123915</td>\n",
       "      <td>0.027871</td>\n",
       "      <td>0.088375</td>\n",
       "      <td>-0.131420</td>\n",
       "      <td>-0.075910</td>\n",
       "      <td>0.226346</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.104273</td>\n",
       "      <td>0.007514</td>\n",
       "      <td>-0.086751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_acc</th>\n",
       "      <td>0.223886</td>\n",
       "      <td>-0.036404</td>\n",
       "      <td>0.202430</td>\n",
       "      <td>0.193023</td>\n",
       "      <td>0.102128</td>\n",
       "      <td>0.680728</td>\n",
       "      <td>0.019723</td>\n",
       "      <td>0.191616</td>\n",
       "      <td>-0.104273</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.381072</td>\n",
       "      <td>0.042035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mort_acc</th>\n",
       "      <td>0.222315</td>\n",
       "      <td>-0.082583</td>\n",
       "      <td>0.193694</td>\n",
       "      <td>0.236320</td>\n",
       "      <td>-0.025439</td>\n",
       "      <td>0.109205</td>\n",
       "      <td>0.011552</td>\n",
       "      <td>0.194925</td>\n",
       "      <td>0.007514</td>\n",
       "      <td>0.381072</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.027239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <td>-0.106539</td>\n",
       "      <td>0.057450</td>\n",
       "      <td>-0.098628</td>\n",
       "      <td>-0.050162</td>\n",
       "      <td>-0.014558</td>\n",
       "      <td>-0.027732</td>\n",
       "      <td>0.699408</td>\n",
       "      <td>-0.124532</td>\n",
       "      <td>-0.086751</td>\n",
       "      <td>0.042035</td>\n",
       "      <td>0.027239</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      loan_amnt  int_rate  installment  annual_inc       dti  \\\n",
       "loan_amnt              1.000000  0.168921     0.953929    0.336887  0.016636   \n",
       "int_rate               0.168921  1.000000     0.162758   -0.056771  0.079038   \n",
       "installment            0.953929  0.162758     1.000000    0.330381  0.015786   \n",
       "annual_inc             0.336887 -0.056771     0.330381    1.000000 -0.081685   \n",
       "dti                    0.016636  0.079038     0.015786   -0.081685  1.000000   \n",
       "open_acc               0.198556  0.011649     0.188973    0.136150  0.136181   \n",
       "pub_rec               -0.077779  0.060986    -0.067892   -0.013720 -0.017639   \n",
       "revol_bal              0.328320 -0.011280     0.316455    0.299773  0.063571   \n",
       "revol_util             0.099911  0.293659     0.123915    0.027871  0.088375   \n",
       "total_acc              0.223886 -0.036404     0.202430    0.193023  0.102128   \n",
       "mort_acc               0.222315 -0.082583     0.193694    0.236320 -0.025439   \n",
       "pub_rec_bankruptcies  -0.106539  0.057450    -0.098628   -0.050162 -0.014558   \n",
       "\n",
       "                      open_acc   pub_rec  revol_bal  revol_util  total_acc  \\\n",
       "loan_amnt             0.198556 -0.077779   0.328320    0.099911   0.223886   \n",
       "int_rate              0.011649  0.060986  -0.011280    0.293659  -0.036404   \n",
       "installment           0.188973 -0.067892   0.316455    0.123915   0.202430   \n",
       "annual_inc            0.136150 -0.013720   0.299773    0.027871   0.193023   \n",
       "dti                   0.136181 -0.017639   0.063571    0.088375   0.102128   \n",
       "open_acc              1.000000 -0.018392   0.221192   -0.131420   0.680728   \n",
       "pub_rec              -0.018392  1.000000  -0.101664   -0.075910   0.019723   \n",
       "revol_bal             0.221192 -0.101664   1.000000    0.226346   0.191616   \n",
       "revol_util           -0.131420 -0.075910   0.226346    1.000000  -0.104273   \n",
       "total_acc             0.680728  0.019723   0.191616   -0.104273   1.000000   \n",
       "mort_acc              0.109205  0.011552   0.194925    0.007514   0.381072   \n",
       "pub_rec_bankruptcies -0.027732  0.699408  -0.124532   -0.086751   0.042035   \n",
       "\n",
       "                      mort_acc  pub_rec_bankruptcies  \n",
       "loan_amnt             0.222315             -0.106539  \n",
       "int_rate             -0.082583              0.057450  \n",
       "installment           0.193694             -0.098628  \n",
       "annual_inc            0.236320             -0.050162  \n",
       "dti                  -0.025439             -0.014558  \n",
       "open_acc              0.109205             -0.027732  \n",
       "pub_rec               0.011552              0.699408  \n",
       "revol_bal             0.194925             -0.124532  \n",
       "revol_util            0.007514             -0.086751  \n",
       "total_acc             0.381072              0.042035  \n",
       "mort_acc              1.000000              0.027239  \n",
       "pub_rec_bankruptcies  0.027239              1.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CHecking the correlation among columns\n",
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a38f73f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAugAAAI5CAYAAADzOM8aAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8/fFQqAAAACXBIWXMAAAsTAAALEwEAmpwYAAEAAElEQVR4nOzdd1wURx/H8c9wgIAovWPvWMBesfcYjaZZE/MkpndL7L3FaKLRFDVFY+wFNfbee1fEXrBRBRQFhbt9/jhEDmzEQ0p+77x4hbud3fvuOrM3Nze7KE3TEEIIIYQQQuQMFtkdQAghhBBCCPGQdNCFEEIIIYTIQaSDLoQQQgghRA4iHXQhhBBCCCFyEOmgCyGEEEIIkYNIB10IIYQQQogcRDroQgghhBBC/AtKqT+UUhFKqROPWa6UUj8qpc4ppY4ppao8y3algy6EEEIIIcS/MwNo+YTlrYBSKT/vA788y0algy6EEEIIIcS/oGnaNuDmE4q0A/7SjPYAjkopr6dtVzroQgghhBBCZA0f4Eqax1dTnnsiyyyLI3Ic28KdtOzOkFlr9nbL7giZ1r7+quyOkCld/3o1uyNk2pDKt7M7QqbtCLfK7giZ0tLXNbsjZNo3+3NfvXi/7N3sjpApB6NyVz3OjTqXeGrfLcfRqQoquzNA1vRzEq/M+wDj1JQHpmmaNs3cr5OedNCFEEIIIUSup5T5J4akdMafp0N+DSiU5rFvynNPJFNchBBCCCGEyBrLgbdS7uZSC4jTNO3G01aSEXQhhBBCCJHrqWwYd1ZKzQUaAq5KqavAEMAKQNO0X4FVQGvgHHAXeOdZtisddCGEEEIIIf4FTdM6PWW5BnyS2e1KB10IIYQQQuR6WTEHPbtIB10IIYQQQuR6eamDnnf2RAghhBBCiDxARtCFEEIIIUSup1SOuB27WcgIuhBCCCGEEDmIjKALIYQQQog8IO+MO+edPRFCCCGEECIPkBF0IYQQQgiR6+Wlu7hIB108l1+/+4BWTSoTGX2Las36ZHccAE7sDWH+lCAMeo16L9WkVZemJsvPHD3P/ClBXDt/gx6Du1G1YQAApw6fZcGUpanlwkIj6DH4LSoHVszyzE0CyzF64GvodBbMWrCLSdPWmyz39XZi8piuuDrbExN3lw97zeR6WCwAkad+5OSZ6wBcvR5Dlw+nZnneyGPBnJqzAM1gwLd+XYq3aWmy/MqmbYRu2oJSFuhs8lG+exfsfbxTlydE32Rn/2GUeOUlirVqnmU59+w8xcRvl6M3GHi5fQ3eerexyfL795MZMWAep0Ku4uBgx4hxXfHycSYu9g4Des4iJPgKrdtWo2f/9gDcuZPIx+/8nLp+RHgcLV6qwpd92mXZPjxwen8Iy35ZgmbQqNGyFo06mtbrbYs2s2/NHix0Ftg72PN6z044eThneS5N0/h29Cy2bzuCjW0+Rox+Hz+/YhnKnQy+yMD+U7mXeJ/A+gF8078bSil6fz2ZSxeNf/X69u27FChgx8Kg0SQlJTN08G+EnLyEXm/g5bb1eO/9tmbPH3ksmJDZC9AMGr4N6lKiTQuT5aGbtnF541aUhQWW+fJR/p0uFPDxIvb8JU7MmP3gIFDylTZ4Vgswe76nObT7FL9/vxSDwUDTtjV59e0mJsuDD5/njx+WcencDXqO6EqdJv4vPOP5AydZO20JmsFAQPPa1H2jmcnyPUGbOLJ2NxY6HXYO9rT5sjOO7s6Enb/K6p8XcO9uIhYWFtR9sznl61eRzI+gaRqjR/3Btm2HsLWxZvSYz/ArXzxDuYk/zGb5sq3E3brDwUOzU58/sD+YMWP+5Mzpy4yf8DUtWtbO8sxZQTroQqSYtXArv85cy28/fJzdUQAw6A3MmbSYr8Z/iJObI6M//AH/uhXwLuqZWsbZ3Yl3+nZm3fzNJuuWrVyKwb/3BuDOrTsM6DIav+plsjyzhYVi3NA36NB9CtfDYtm4uDdrNh3n9Lmw1DIj+rZn/tJ9zAvaS2Ct0gzq2ZaPev8FQEJiEg3ajs3ynA9oBgMhs+ZSrfcX2Dg7sXvYGNwrVzLpgHvVrk6hxvUBiDh8lFNzF1Gt1+epy0/PXYhrxfJZmlOvNzB+dBCTpr6Pu4cD73b+kcCG5SlWwiO1zD9B+yhQ0JaFK/qyfvURfp64ihHfdcXa2ooen7TgwrkwLqT5d8if34aZC75OffxOx4k0aJL1H+AMegNBUxbRY+xHOLg6Mvmz7/GrXQGPIg/rtXdJXz6f0hNrG2t2/7ODlb8tp+uA7lmebce2o1y+HMaKNRM4duw8I4fNYM78YRnKjRz+J0OGv0elSiX4+IPv2LH9GIH1/fnu+89Sy4z/djb2BewAWLd2H0n3k1mybCwJCfdo//I3tHqpNj4+bmbLrhkMBP81jxp9PsfG2YldQ8fiXrkSBXy8Ust41a5O4ZS6HH7IWJer9/qMAr7e1BnaFwudjsTYOHYOHIl75YpY6HRmy/c0er2Bad8tYejkD3Bxd6BP94nUCCxPoeIP64WbhxOfDerIstlbXliutAx6A6t/WUiXkZ9Q0NWR378aT+laFXAr/PAYexb35d2JvbGysebgyu1s+mMZHfq+g5WNNe2+7oqzjzu3o+P4/YvvKFGlLDb2dpI5nW3bDnH58g3WrJ3CsaNnGTZsGvMXZHxfaNSoOl26tKZly09NnvfycmP0mE/584/lWZpTPLu881HjOSil4rM7w/NQSr2ilPLLjtfeue8UN2NzzuG7eCoUdx9X3LxdsbSypHrjyhzdecKkjKuXM74lvJ94O6aDW49SoWZZ8tlYZ3VkqlYqysXLUVy+Ek1Skp4lKw/RqkklkzJlSnqxffdpALbvOUPrplnfKXycuAuXsPNwx87dDQtLS7xqVifi8DGTMpa2tqm/6+/dNznW4QePYOvqin2aTlBWOHkiFN9Crvj4umBlZUnTlgFs3xJsUmb75mBata0KQKNmFTmw7yyapmFrZ41/lWJY53v8GEbopUhibsYTUCXjaLG5XTl9GVdvV1y8jPXav0FlgncdNylTMqAU1in1tXC5osRFxmV5LoDNmw7ycrt6KKXw9y/J7dt3iIyMMSkTGRlDfHwC/v4lUUrxcrt6bN54wKSMpmmsXbuXVq2NI3dKwd2EeyQn67l37z5WVpbY57fFnGIvXCK/h1uaulyNiENHTcpYpavLD+jyWad2xg1JScbAL9jZk6F4+brg6WOs4/WaVWbfNtM67u7tTNFS3iiL7Ln93PUzl3H2dsPJyxWdlSXl61fhzB7TulvUvzRWKXXXp2xRbkXFAuDi446zjzsABVwcsHO0525c1r/f5MbMmzbup127BsZ2GFCa27fuEBkRk6Gcf0Bp3NydMjzv4+tOmTJFscjltylUWJj9J7tIBz1veAXIlg56ThMbGYuzm2PqY0c3B2L+RUdl/6bD1Gj8Yr5K9fJ04NqNhyfS62ExeHk4mJQ5ceoabVoEANCmuT8F7G1xcswPgE0+SzYu6cO6hT1p3dS0Y58VEmNisHF+eIK3cXIkMSbjG0Hohi1s6z2QMwuWULbLGwAkJyZycdVaSrzyUpbnjIy4hYenY+pjN3cHIsPj0pWJSy1jaakjv70NcbF3n2n7G9YcoUkL/xdy3924qDgc3B4ecwc3R25FP75e71+zh7LVy2V5LoCIiBg8PV1SH3t4OBMRblofIsJj8Egz3cbDw5mIdJ2HgwdP4+LiQJGUb7uaNa+BnW0+mjT4lOZNvuTtd1rj4Ghv1uyJMbGmddnZicSY2AzlLm/YwpZegzi9IAi/rm+mPh97/iLb+w1nx4CRlH+78wsdPQe4GRGHq4dj6mMXdweiX9AHs2d1OzqWgq6OqY8LuDpy+wl198i6PZSolvHt7Nrpy+iT9Dh5uWZFTBO5MXNE+E0807yOh6cL4eHRWf66IutIBz0NZfSdUuqEUuq4UurNlOftlVIblVKHUp5vl/J8UaVUiFJqulIqWCm1Tin12CEepVQPpdR+pdRRpdRipZRdyvMzlFK/KKX2KKUuKKUaKqX+SNn2jDTrxyulRqWsv0cp5aGUqgO0Bb5TSh1RSpXI0oP0HxAbHce1Czfwq1E2u6OkGjw2iDo1SrJl2TfUrVGS62Ex6PUGAPwbDqZJh3H0+HoGowe8StHCWf9m8CwKN21I/e9GUur19lz4ZzUA55euoGiLJlja2GRzuue3Ye0RmrWqnN0xMji04QBXz1yhweuNn144B1m9cnfq6DnAieMXsLCwYMOWyaxe9z0zZ6zi6pWIbMlWpGlDGo4fQZk3XuH88lWpzzuWKEbgmMHUGfoNF1asQX8/KVvy5RXHN+3nxtlQar9qWndv34xj2YRZvPxVZ5RFzuq25MbMeZlSFmb/yS4yB91UByAA8Adcgf1KqW1AJNBe07RbSilXYI9S6sFErVJAJ03TeiilFgCvAn8/ZvtLNE2bDqCUGgm8C0xOWeYE1MbY2V4O1AXeS8kQoGnaESA/sEfTtAFKqXFAD03TRqZkWaFp2qL0L6iUeh94H8DSqRqW9iX/7bHJFRzdHLkZGZv6ODYyDic3h8ev8AgHNx+hcmBFLC1fzGjYjbA4fLwejuJ5ezpxI91Ib1hEHG9/8hsA+e2seblFALduJxjXTyl7+Uo0O/adpZKfL5dCo7Isr42TE4k3H45+JsbEYuOU8SvTB7xqViPkrzmAcUpB2P5DnJ6/hOS7CWChsLCyokjTRmbP6eZekPCUC2nBOFrulu6bCTd3B8LDYnH3cCQ5Wc+d+EQcHJ8+V/Ts6evokw2U9fM1d+xHcnB1IC7NtJG4yFgKumSs12cPnWbT3HV8OP4zLK2z7vQ+b856Fi80XsNRvmJxwsIejtSFh9/E3cO0Prh7OBEeftO0TJqv2ZOT9WzcsJ95C0ekPrdq5S7qBlbCysoSFxcHKlcuTfCJC/gWcjfbftg4OZrW5Zsx2Dg5Pra8V81qBM+cm+F5e28vdDb5iL92HYdiRcyW72mc3R2ICo9NfRwdEYdLJs93Wa2Ai2Pq9A+A21GxFHhE3b1w+DQ75q/jrW8/x9LKKvX5e3cTmD90Ko3eegnfslk/nQxyT+Y5s1ezcOEGACpWLEnYjYfn/fCwaDw8XB63ap6Vly4SzTt7Yh71gLmapuk1TQsHtgLVAQWMVkodAzYAPsCDK80upnSeAQ4CRZ+w/QpKqe1KqeNAFyDtVXL/aJqmAceBcE3TjmuaZgCC02zzPrDiGV8LAE3TpmmaVk3TtGp5vXMOULRMISKuRhJ1I5rkpGT2bzqMf53MXYy4b+Nhqjd5MdNbAA4dv0zxom4U9nXBykpHh5eqsGaj6ZxuZ6f8qVMpvvygBbMX7QHAoaAt1ikdMWen/NSsUtzk4tKsULBYEe6GR3A3MgpDcjI39u7HvbLp1Jo7YeGpv0cePYGdh7FTVbN/LxpMGE2DCaMp0rwxxdu0zJLOOUC58oW4GhrF9as3SUpKZsOaI9RrYPo1dGBDP1YvPwjA5vXHqVqj5DNNWVm/+gjNWgVkRexH8i1TmKhrUdxMqddHtx7Gr3YFkzLXzl1l8aQFvD28B/ZOBbI0T8fOzVgYNJqFQaNp3KQq/yzbgaZpHD16jgIF7HBzM+2gu7k5YW9vy9Gj59A0jX+W7aBR46qpy/fsPkGxYt4mU2W8vFzYt8c4n/ru3USOHT1HseLemJNDsSLcManLBx5Rlx+O2kekqct3I6Mw6PUAJERFc+dGOLauL7ZDVKpcIW5ciSL8ejRJScnsWH+Y6vWz9uLrzPIuXZib1yKJCYtGn5RM8LZDlK5peg1N2PkrrJoyjzcH9yC/48O6q09KZuHI36nYuDrl6r24b6tyS+bOXVoRtHQCQUsn0KRJDZYt22psh0fOGNvhI+aai9xDRtCfTRfADaiqaVqSUuoS8OA7+ntpyumBJ13FNAN4RdO0o0qp7kDDNMsebMeQbpsGHv47JaV04h+8Vrb/+82c/BmBtcvh6lSAc3unMOL7RcycvyXb8ugsdXT64lUm9p6KwWCgbquaeBfzYtkfqylSphABdStw6VQoPw/8g7vxCRzbHczyGWsYNqMvAFE3bhITGUtp/xc3U0ivN9Bn2AIW/fEJOp1i9qI9nDoXRr8vXuLw8VDWbDpOvZqlGNSzLZoGu/efo/ewBQCUKeHJ9yM6YTAYsLCwYNLU9VneQbfQ6SjX9U0Ojv8RzWDAJ7AO9j7enF2yHIdiRXCv7E/oxi1EB5/CQqfDMr8dFXt0z9JMj2JpqePrfq/w1UfT0RsMtHmlBsVLejL9p7WULe9LYMPytGlfg+ED5vF6m7EULGjH8HFdUtfv0Go0d+ITSU7Ss21zMBN/7ZF6B5hN644y/qd3X9i+6HQ62n36Kr/1/xWDwUD1FjXxLOrF2pmr8C1dmPK1K7By+nLuJ9zj7xF/AuDo7sQ7w3tkebbA+gFs33aUl1r2xMbGmhGj3k9d9nr7/iwMGg3AgEHdGdh/Gvfu3adeoD/16j+83d+a1XtMprcAdOzUjEEDptH+5W/QNI127etTukxhs2a30Onw69aR/d9NTrllaB0K+HpzZsk/OBQtjEcVfy5vMNZlZanDys6OSj3eBiDmzHkurFiLstShlKL8Wx2xLmDeOfJPo7PU0aNXB4Z9Pg2DQaPJyzUoXNyTOVPXULKcLzXqV+DsyVC+7TOD+NsJ7N9+knnT1/LjvBd3S1wLnY6WH73G3EE/YzAYCGhWC7ciXmyZtRLvUoUpXasiG35fRlLifRaPMdbdgm5OvDnkfU5uP0zoiXMk3LrDsQ37AHj5qy54lsjab65yY+b6DaqwbdshWjb/BBubfIwa/Unqsvav9CRo6QQAxn/3FytXbCcx4R6NGvTg1dea8ulnb3L8+Dk+//Rbbt26w+bNB5gyZR7/rJiUpZmzQl4aQVcP+3v/XUqpeE3T7JVSHYAPgNaAM3AAqAm8CZTUNO0zpVQjYBPw4HurFZqmVUjZTi/AXtO0oY95nSiMF3PGAKuAa5qmdU+ZZ75C07RFSqmi6baZdlm8pmn2Kc+/BrRJWX8ycEjTtD+ftJ+2hTvlun/sNXu7ZXeETGtff9XTC+UgXf96NbsjZNqQyrezO0Km7Qi3enqhHKSlb864liEzvtmf++rF+2Wf7aLknOJgVO6qx7lR5xI+2R0h03SqQo64/YtrmS/N3s+JOj0xW/Yt73zUMI8g4BhwFGMnvI+maWHAbKBaytSUt4BT/3L7g4C9wM7n2MajzAN6K6UOy0WiQgghhPgvUlnwX3bJ9ikSOcGDUemU6SO9U37SLo/CeAHno1RIU278U17nF+CXRzzfPc3vl9JtM+0y+zS/LwIWpfy+E7nNohBCCCH+w/LSFJe8sydCCCGEEELkATKCngWUUj9hvE1iWpOeNkdcCCGEEEL8O3lpBF066FlA07RPnl5KCCGEEEKIjKSDLoQQQgghcr28NIKed/ZECCGEEEKIPEBG0IUQQgghRB6Qd8adpYMuhBBCCCFyPZniIoQQQgghhMgSMoIuhBBCCCFyPRlBF0IIIYQQQmQJGUEXQgghhBC5nspD487SQRdCCCGEELleXpriIh30/5A1e7tld4RMa1lzVnZHyLR1+7pmd4RMqeaaL7sjZNq1u/HZHSHTAj2TsjtCpoQlhGV3hEwbVsUquyNk2vcnbLI7Qqb0rpj7ug3WOvvsjpAp1+5czO4ImVbYvkJ2R8hzcl9LE0IIIYQQIh2lVHZHMJu8812AEEIIIYQQeYCMoAshhBBCiFxP5qALIYQQQgiRg+Slu7jknT0RQgghhBAiD5ARdCGEEEIIkevlpSkueWdPhBBCCCGEyANkBF0IIYQQQuR6MoIuhBBCCCGEyBIygi6EEEIIIXK9vHQXF+mgCyGEEEKI3E+muAghhBBCCCGygoygCyGEEEKIXC8vXSQqHXTxRCf2hjB/ShAGvUa9l2rSqktTk+Vnjp5n/pQgrp2/QY/B3ajaMACAU4fPsmDK0tRyYaER9Bj8FpUDK77A9Bn9+t0HtGpSmcjoW1Rr1idbs6R1Ym8IcycvxWAwEPhSLVp3aWKy/MzR88ybvJSrF27w/uBuVGvon7osOjyGmePmczMiFqUUX3zbA1cvZ7Nn1DSNcWPmsGPbMWxsrRk+6l3K+RXNUO5k8CUGD/iNe4lJ1KtfiT79OqOU4peflrJk0VacnAoA8NmXrxJY35+VK3Yz84/VqeufPXOVuQuHUrZc4efOfGDXKaZNWIbBYKB5u5q80b2xyfKk+8lMGDKXc6euUsDBjr6ju+Hh7czm1YdYPGtLarlL524wadaXlCjjw7Z1R5j/50YMegPVA8vxv8/aPHfOB3bvOMXEb5ejNxho26EGb71rmvf+/WSGD5jHqZNXcXCwY+R3XfHycSYu9g79e84i5MQVWrerRq/+7QFITLjPgF6zuHolGp3OgnoN/Pj4y9Zmywuwf9cpfhm/DIPeQMtXatLxnYyZvxs8l7MhxmM8YGw3PL2N9fPC2etMGrWYu3cSUUoxZdYXWOez4s+fVrN+5QHibyWwfMdos+YFY12eMHYJu7afxMbGisEju1DWr1CGciHBVxg+cDb37iVRJ9CPnn07oJRiw9rDTP9lDZcuhPPn3K/xK2+sq7Gxd+j39R+cPBFKm3Y16T3gNbNnv3EkmEN/LUIzGCjeqC5+7ZqbLD+1ciMXNu9CWViQr6A9NT/oSn43FwCOzFnKjcMnACjfoRWFa1c1e74HNE3juzHz2bn9BDY21gwd1Z1yfhnbdEjwZYYMnMG9xCTqBlagd783UUrx8+RlbN10FAsLhZNzAYaN6o6buyMAB/adZsK3C0hO1uPoZM/0Gb3Mlnns6L/Yvu0oNjbWjBz9AX7li2UoFxx8kYH9fuXevSQC6/vTt/9bKKU4FXKJEUP/4N79JHQ6HQMHv0PFSiXYtPEAU35chIWFQqfT8U2/blSpWua58+7fdYqfU9peq8e0vXEpba9gmrYXdv0m7742Dt8i7gCUq1iYL/u/xt07iXz13s+p60eFx9KkdVU+7tXuubOKzJMO+nNQSu3SNK3OU8p8CUzTNO2uGV6vO7BO07Trz7utZ2HQG5gzaTFfjf8QJzdHRn/4A/51K+Bd1DO1jLO7E+/07cy6+ZtN1i1buRSDf+8NwJ1bdxjQZTR+1Z//hPS8Zi3cyq8z1/LbDx9nd5RUBr2B2ROX8PWED3Fyc2DkBz8QULd8xuPcrxPr5m3JsP7vo+fwUtemlK9ehsS791AWKkty7th+jNDL4SxfPZbjxy4wavgs/p43KEO5UcP/YvCwd6hYqTiffvgDO3ccp15gJQC6vtWct99pZVL+pTa1ealNbQDOnrnCV59PNkvnXK838Mu4IEZOeR9XDwe+ensSter7Ubj4w+O6dtle7Ava8ltQP7auO8yfk1fSd0w3GrWqQqNWVQBj53xErxmUKOPDrdg7/PHjCibN+hIHJ3u+HzqXI/vOElCjlFnyThgdxKRp7+Pu4cD/Ov1IYMPyFCvhkVrmnyX7KFDQlkUr+7J+9RF+mriKkd91xdraivc/acH5c2FcOBdmst3Obzegao2SJCUl89l709i9/RS1A8s+d94HmaeMDWLsz8Zj/Fm3SdRu4EeRNMd4zVLjMZ6xrB+b1x7m9x9XMmBsN/TJer4dOJc+IzpRorQ3t2LvoLPUAVCrvh9t36jLO+3HmiVneru2n+TK5UgWrxzIiWOX+XbkQv6c83WGct+OXED/oR2pUKkIX340ld07QqgT6EeJUl6M++F/jBm+wKR8PmtLPvi0NefP3eDC2bAM23teBoOBA38uoFH/z7B1cWT9gHH4VK2Ig69XahmnooVoPuobLPNZc3b9No7MWUrdL97l+qETxFy8Qoux/TAkJbNpxES8/P2wsrM1e06AndtPcCU0gqWrRnDi2EXGjJjNX3P7ZSg3ZsQcBg3tRoVKxfj8o8ns2hFM3cAKvPVOcz7+zNgxnPv3Jqb/spL+Q7pw+9Zdxo6cy+Spn+Pl5czN6Ftmy7x921EuXw5j5ZoJHDt6jpHD/2TO/OEZyo0c9gdDh79HJf+SfPTBOHZsP0pg/QC+Hz+XDz/pQGD9ALZtPcL34+fy518DqVWrAo0aV0UpxenTofT66kf+WTX+ubLq9QYmjw3i25S29+kT2t7MlLb3248rGTi2GwDevi5MnWta5+3y25g893GXH6jXuMJz5XzRlMqa97/skHe+C8gGT+ucp/gSsHvWbSqldE9Y3B3wftZtPa+Lp0Jx93HFzdsVSytLqjeuzNGdJ0zKuHo541vC+4mN4uDWo1SoWZZ8NtZZHfmpdu47xc3Y+OyOYeJiyIPj7IKllSU1GlfmyI6Mx7lQCe8Mne/rl8Iw6A2UT/nwY2OXL8uO85ZNh2nTtg5KKSr5l+D27btERsaalImMjOXOnQQq+ZdAKUWbtnXYvPHQM7/G6lV7adGqplnyngkOxbuQC16+LlhZWVK/WQB7tgablNm7LZgmL1UDoF7jShzdfxZN00zKbF17mPrNAwAIuxaNdyFXHJzsAQioUZqdm46ZJe/JE6H4FnbFJyVv05YBbNtsmnf7lmBatzWOejZqVpEDe415be2s8a9SjHz5TMdcbGytqVqjJABWVpaUKedDRHicWfICnE53jBs0D2DXFtPMu7cG06yN8RjXb1KJw/uMmQ/uOUOxUl6UKG08pRV0zI9OZ3xLKlexCC5uBc2WM71tm0/Qum11lFJU9C/K7dsJREWaHpeoyDjuxCdS0b8oSilat63O1k3HAShW3JMixTwybNfWLh8BVUqQz9oqS3LfPHeJAp5u2Hu4orO0pHDtqlw7YFr/PMqXxjKf8RzgWrIYCTdjAYi7dgO3ciWx0OmwtMmHQ2Efbhw9mSU5AbZuPspLbWulHOPixN9OIDLdMY6MjCP+TgIV/YujlOKltrXYsukIAPb2Dz84JCTcg5RT3+pV+2jcNACvlG8JnV3MV082bzpI23aBKKXwDyjF7Vt3iYyIMc0cEUN8fAL+AaVQStG2XSCbNh4EjJ3DO/EJAMTH300d8bfLb5P6Hplw955ZOpHp217DR7S9XVuDaf6Itvcsrl6OJDYmnoqViz931hdJYWH2n+wiHfTnoJSKT/l/Q6XUFqXUIqXUKaXUbGX0OcYO9Wal1OYnbUcpNUEpdRSorZQarJTar5Q6oZSalrKt14BqwGyl1BGllK1SqqpSaqtS6qBSaq1Syutxr/FvxEbG4uzmmPrY0c2BmMjMv7nv33SYGo2rmDFZ3hITFYdTyokcwMnNkZioZzvO4VcisbO35aeBfzLs3Qks/GU5Br0hS3JGRMTi6flw6oyHhxMR4aZvXhHhMXh4pCnj6UxERGzq43lzNvJ6+0EMGfg7t+LuZHiNdWv20aq1eTro0ZFxuHo4pj529XAkOl39jY6Iwy2ljM5Sh529LbfiTL/s2rb+KA1SOuhehVy5GhpJ+PWb6JP17N5ygqjwWMwhMvwW7mnyuns4EBmRrkMTHodHShlLSx329jbExT7bl3O3byWwY+tJqtUqaZa8AFFpjh+A2yOOcVSk6THOb2/Lrdi7XA2NRCno98k0Pu78AwtmPvYUaXYREbF4eD7M7e7hQES6Yx0REZfu38PRpC5nh4SYWOxcnFIf27o4khAT+9jyF7bswsvfDwDHIr6EHT1J8r373LsVT8TJM9yNjnnsus8rIjwWjzTnC3cPRyLTnS8iw2Pw8Hi4P8ZzSmzq458mLaV1k76sWbmPjz5tC0DopXBu3brL+90n0OWNUaxYttuMmW/i6enyMI+nMxHpOugREenOcR7ORITfBOCbft2YMH4uTRt9xoRxc/jyqzdTy21cv5+XW/fik4++Y/jI9587a/q25+rhmOFDZvRj2h5A2LWbfNj5e77u8TPHD1/IsP3Naw/ToFlAnhqRzm2kg24+lTGOlvsBxYG6mqb9CFwHGmma1ugJ6+YH9mqa5q9p2g5giqZp1TVNqwDYAm00TVsEHAC6aJoWACQDk4HXNE2rCvwBjEq/YaXU+0qpA0qpA//8vTr94iwXGx3HtQs38Kthnq/UhSm93sDZYxd44+O2DJz6JZHXo9m5Zl92x3qkN95sxIo145i/eBiubo5M+G6eyfLjx85jY2NNyVK+2ZQwo1MnLpPPxoqiJY2ffQsUtOOTbzowtv8s+rz/Mx5eTljocv5pNDlZz+BvZvN653r4+Lo8fYUXQJ9s4MSRi/Qd2YXvf/+EnZtPcHjf2eyOlWdc2r6PmxdCKfuy8bohr0rl8Aooz4Yh49k1+U9cSxVDWeTsuvvJF6+wauNYWr5Ug/lzjB/g9HoDISdDmfTzp0yZ+gW/TV3F5Uvh2ZzUaP68DfTp25UNmyfTu29XBg+cnrqsSbPq/LNqPJMmf8WUHxdmY0pwdi3I7JUD+XXO13z4dVvGDJjNnfhEkzJb1h2hUcvK2ZTw31PKwuw/2UXmoJvPPk3TrgIopY4ARYEdz7iuHlic5nEjpVQfjFNjnIFg4J9065QBKgDrUz7h6oAb6Tesado0YBrA1hurnu27rRSObo7cTDOFITYyDic3h8xsgoObj1A5sCKWlk+aufPf5uTqQEyakbmYyFicXJ/tODu5OVCopDdu3sZOV+V6Fblw8jK8ZJ5s8+ZsZMmirQCUr1CMsLCbqcvCw2NwTzP6BeDu4UR4eJoyYTdxT/l2wCXNPnV4rQGffzzRZN01q/bRsnUt8wQHXNwcTEa3o8JjcUlXf13cHYgMj8XVwxF9sp678QkUdHg4I23buiM0aGH6JlWzfnlq1i8PwOole8zWQXfzKGgyehgRHoebu0O6Mg6Eh8fi7ulIcrKe+PhEHByfPoNu7PDFFCriSsdugWbJ+oBryvF7IPIRx9jVzVjGLeUY34lPoKCjHa4eDlSsXBwHp/wAVK9blrOnrlLZDPP5H2Xh3O0sXWwcbfWrUJjwsIe5I8LjcE93rN3dHdL9e8Sm1uXsYuvkaDLqnRAdi62TY4ZyYcdPcXLpGhoP/gqd1cPpNuXbt6R8+5YA7Jr8JwW83M2ab8HczQQtMr7t+VUoSnia80VEeCxu6c4Xbh5OhKcZVTeeUxwzbLdVm5p88dFkPvy0Le4eTjg45MfWLh+2dvmoUrUUZ05fpUjRjFOOnsXc2etYvMjY+a9QoThhYdEP84TdxN093TnOPd05Lvwm7ikj6suXbqdv/7cAaNGyJkMHTSe9atXLcfXqVGJibqdeMP9vpG97UeGxuKY/vz2m7SmlsLY2dv9Kl/PFy9eFq6GRlEm5UPr8mevo9QZKl8s5gyX/RTn743Puci/N73oy9+EnUdM0PYBSygb4GePIeEVgOmDziHUUEKxpWkDKT0VN05o/oty/VrRMISKuRhJ1I5rkpGT2bzqMf53ymdrGvo2Hqd5Eprc8SdGyhQi/GklkynHet+kw/nWf7cKcYmULczc+gdsp8+pDDp3F61++UT1Kx85NWLBkOAuWDKdRkyqsWL4LTdM4dvQ89va2uKWZAgXg5uZI/vy2HDt6Hk3TWLF8Fw0bGzu4aeerb9pwkJKlfFIfGwwG1q3dR8tWNcyWvbRfIa6FRhF2LZqkpGS2rT+S2rF+oGZgeTauPADAjk3HqFS9ZOpXugaDgR0bjlK/WYDJOrE3bwNw+9ZdVi7aRYt25pmSU658Ia5cjuL61ZskJSWzYc0RAhv6mZSp19CPVcuN8103rz9O1Roln/oV9NTJa7hzO4Ev+7Q1S860yvgV4tqVKG6kHOOt645Qu4HpMa7doDzrVxiP8baNxwhIOcbVapfh0rkwEhPuo0/Wc/zQhUfO6zaX1zsFMntRH2Yv6kODxhVZtXw/mqZx/Ogl7O1tMnRuXN0cyG9vw/Gjl9A0jVXL91O/UfZeMOdcogi3wyKIj4hCn5xM6O6D+FQ1vTNWzMUr7P9tLoG9PsTG4WEH0GAwcO+28TwRe/kacaHX8KxUzqz53ujUiLmLBzF38SAaNg5g5fI9Kcf4Qsr5It0HTjcH7PPbcvzoBTRNY+XyPTRoZLxDVejlh6PiWzcdoWgx48WPDRv5c+TwOZKT9SQk3OfE8YsUS3NhZGZ16tKcRUFjWBQ0hsZNqrF82XY0TePokbPYF7DFLV0H3c3dCXt7W44eMc7nXr5sO40aV01ddmB/CAB79wRTuIhnyr6Epc79Phl8kaT7yTg62v/rzJCx7W15TNtb94i2FxsTjz5lKuSNq9FcC43Cy+fhN2ub1xymUYvcN3oOgFLm/8kmMoKe9W4DBYCoZyz/oDMepZSyB14DFqXbFsBpwE0pVVvTtN1KKSugtKZppleJPAedpY5OX7zKxN5TMRgM1G1VE+9iXiz7YzVFyhQioG4FLp0K5eeBf3A3PoFju4NZPmMNw2b0Ne7AjZvERMZS2r+EuSI9t5mTPyOwdjlcnQpwbu8URny/iJnzt2RrJp2ljs5fdmBir2nG49y6Bj7FPFn6+2qKljUe54shofw86E/u3E7g6K5glv+5huEzv8FCZ8HrH7Vl/Fe/gKZRpEwh6rcx3yh0WoH1K7Fj2zFebvUNNjbWDBv5buqyNzoMZsES490O+g/qxuABv3Pv3n3q1quYegeXiRMWcPpUKEopvL1dGTj07dT1Dx44g6enM76FzDeip7PU8VGf9gz6fDoGvUazttUpUsKTWb+uoVS5QtRqUJ7m7Wowfshc3ms/hgIF7egzqmvq+icOX8DVwxGvdFNCpk5YxsWzxhspdXqvGT5F3MyS19JSR8/+r/DlR9Mx6A20eaUGxUt6Mu2ntZTz8yWwUXlebl+DYf3n8dpLYynoYMeIcV1S12/fcjR34hNJTtKzbVMwk6b2IH/+fMyYvpEixdzp/uZEAF7rWJe2r5rnQ4XOUsenfdrT/1PjMW7RrjpFS3gy85c1lPYrRO0G5WnZrgbfDppL93ZjKOBgR//RxmNcoKAdHbrW57O3JoGCGnXLUTPQ+IFk+qQVbF5zmHuJSXRuNYKWr9TgrQ9amCUzQN1AP3ZtO0mH1iOwsbFm0MjOqcu6vDaO2YuMt2DtM/B1420WE5OoU8+POin5Nm88yoTRi4mJiefrj6dSqqwvk6d+BEC7FsO4E59o/MCy6Rg/TvuY4iX+fQcyLQudjqrd32DrmJ8wGAwUb1gbh0LeHF+4AudihfGpVokjc4JITrzHzkm/AWDn4kz93h+iJevZOOwHAKxsbaj1ydtY6LLum8169Suwc/tx2rUaiI2tNUNHPGzvnV4dwdzFxjtA9R3YiaEDZ5KYeJ+6gRWoG2j8EDT5hyAuXwpHKYWXtzP9BxvrerESXtSpW56OHUZgYaF45dW6Jh/2n0dggwC2bTtC6xZfp95m8YHX2vdjUdAYAAYOfoeB/aaSeO8+9QL9Caxv/FAxdPh7jB39F3q9gXz5rBgy/D0A1q/bzz/LtmNppSNfPmu++/6z557b/aDt9UvX9maktL06DcrTql0Nxg6ay9spbW9ASts7fugCM39di85Sh4VSfNH/VZNvDrduOMqoSe89V75sk4eGndWzXtErMlJKxWuaZq+Uagj00jStTcrzU4ADmqbNUEp9BnwKXH/cPPQH20nzeCTQCQgDzgCXNU0bqpR6FRgNJAC1MU5z+RFwwPhha6KmaRm/U0uR2SkuOUHLmrOyO0KmrdvX9emFcpBqrk5PL5TDXLsb/fRCOYxzvtzV/G4n5b6Lwxyz6O4pWen7E7lrnKx3xdyVF8Ba93yj1S9a2N0Ms1VzvML2L+eIE0bpWj+b/UR7Zs/H2bJvua+l5SAPOtWapm0BtqR5/tM0v0/GeDHnU7eT5vFAYOAjyi3GdK76EaB+poMLIYQQQuQ1eeiuM3noywAhhBBCCCFyPxlBf4GUUnuBfOme7qZp2vHsyCOEEEIIkWfkoRF06aC/QJqmmefKLCGEEEIIkWdJB10IIYQQQuR+eWjitnTQhRBCCCFErqfloSkueeizhhBCCCGEELmfjKALIYQQQojcL+8MoMsIuhBCCCGEEDmJjKALIYQQQojczyLvDKFLB10IIYQQQuR+cpGoEEIIIYQQIivICLoQQgghhMj98s4AunTQ/0va11+V3REybd2+rtkdIdOa1/g7uyNkygcLemR3hEwbFKBld4RM2x1hld0RMqWJt1N2R8i0wQfvZneETOtcIndlXn9Nl90RMs3SIiG7I2RKK9/C2R1B5AAyxUUIIYQQQuR+Fsr8P89AKdVSKXVaKXVOKdX3EcsLK6U2K6UOK6WOKaVaP3VX/sXuCyGEEEIIkbMoZf6fp76k0gE/Aa0AP6CTUsovXbGBwAJN0yoDHYGfn7Zd6aALIYQQQgjx79QAzmmadkHTtPvAPKBdujIaUDDldwfg+tM2KnPQhRBCCCFE7pc9F4n6AFfSPL4K1ExXZiiwTin1GZAfaPq0jcoIuhBCCCGEEI+glHpfKXUgzc/7/2IznYAZmqb5Aq2BWUqpJ/bBZQRdCCGEEELkflnwl0Q1TZsGTHtCkWtAoTSPfVOeS+tdoGXK9nYrpWwAVyDicRuVEXQhhBBCCCH+nf1AKaVUMaWUNcaLQJenKxMKNAFQSpUDbIDIJ21URtCFEEIIIUTulw1z0DVNS1ZKfQqsBXTAH5qmBSulhgMHNE1bDvQEpiulvsJ4wWh3TdOe+Ac9pIMuhBBCCCFyPe0ZbouYJa+raauAVemeG5zm95NA3cxsU6a4CCGEEEIIkYPICLoQQgghhMj9suAi0ewiI+hCCCGEEELkIDKCLoQQQgghcr+8M4AuHXTxZE0CyzF64GvodBbMWrCLSdPWmyz39XZi8piuuDrbExN3lw97zeR6WCwAkad+5OQZ41+zvXo9hi4fTn0hmU/sDWHu5KUYDAYCX6pF6y5NTJafOXqeeZOXcvXCDd4f3I1qDf1Tl0WHxzBz3HxuRsSilOKLb3vg6uX8QnI/zq/ffUCrJpWJjL5FtWZ9sjXLA5HHggmZvQDNoOHboC4l2rQwWR66aRuXN25FWVhgmS8f5d/pQgEfL2LPX+LEjNnGQppGyVfa4FktIMty7tl5ionfLkdvMPBy+xq89W5jk+X37yczYsA8ToVcxcHBjhHjuuLl40xc7B0G9JxFSPAVWretRs/+7VPXSUpKZsKYpRzefx5lofjgs5Y0alrJ7NlD9oWw9OclGAwatVrVokkn0z88d/7YeZb+HMSNC9fpNvAt/OsHpC77Z/pyQvaeBKBZl+ZUblTF7Pke0DSNb0fPZse2o9jYWjNidA/K+RXNUO5k8EUG9f+Ne4n3qVffn2/6d0GlXNA15+/1zJ+7EQsLRf0GAXzV602SkpIZNvgPQk5eRq/X83Lburz7/stmzx9+LJjjsxaAQaNww7qUftm0Ll/cuI2LG1Lqsk0+/P/XhYI+XkQcD+HkgiAMyXosLHWU79gBt/JlzZ4vvSN7TjFj4lIMegONX67JK2+Znt9OHj7PzEnLCD1/gy+GdaVWY+P57dKZa/z23WIS7iZiYWFB+7ebUKdp5SzPm97p/SH88+sSNL1G9Va1aPimab3evngz+9fswUJnQX4He177uhNOHi/+HHxqfwjLUtpfzVa1aNwxY/tb/oux/XUZYNr+VkxfTsi+h+0voGHWtD9N0xgz+k+2bTuMrU0+Ro3+GL/yxTOUCw6+wIB+P5F47z7161emX/93UEpx6tQlhg+dzt27iXj7uDHuu8+xt7fj/v1khg2dRvCJ8ygLC/r1706NGuWzZB/MLpsuEs0K/8kOulJql6Zpdf7Feq8AZ1Kuxn1SuaFAvKZp45VSM4AVmqYt+jdZnzFXd2CdpmnXzbldCwvFuKFv0KH7FK6HxbJxcW/WbDrO6XNhqWVG9G3P/KX7mBe0l8BapRnUsy0f9f4LgITEJBq0HWvOSE9l0BuYPXEJX0/4ECc3B0Z+8AMBdcvjXdQztYyzuxPv9OvEunlbMqz/++g5vNS1KeWrlyHx7j1UDpjPNmvhVn6duZbffvg4u6MAoBkMBP81jxp9PsfG2YldQ8fiXrkSBXy8Ust41a5O4cb1AQg/dJRTcxdRvddnFPD1ps7QvljodCTGxrFz4EjcK1fEQqcze0693sD40UFMmvo+7h4OvNv5RwIblqdYCY/UMv8E7aNAQVsWrujL+tVH+HniKkZ81xVrayt6fNKCC+fCuJCmvgPMnL4RJ2d75v/zDQaDgVtxCWbPbtAbWDJ5ER9++xEObo788Mn3lK9TAc8iD+uxk7sjnfp0ZsuCTSbrntwTzLWzV+k5tTfJ95P5uecUytXwwya/jdlzAuzYdozQy2H8s2Ycx4+dZ+SwmcyePyRDuZHDZzJk+DtUrFSCTz6YwM7tx6hX3599e0PYsukQC4NGYG1tRXT0LQDWr93P/fvJLF42ioSEe3R4uT8tX6qFj4+b2bJrBgPHZs6jzjefY+vsxNbBY/GsUomCaeqyb53qFGtirMs3Dh0lePYiavf5DOsC9tT8+mNsnRy5deUau7+bTIsfs/Z8Z9Ab+GP8EgZM+gAXdwf6vTuRaoHl8S32sF64ejrx8cCO/DNni8m61jbWfDK4E16F3LgZGUe///2Af82y5C9gm6WZ0+df9tMi3h3zEQ6ujkz57HvK1aqAR5p67V3Cl08n98Taxpo9/+xg9W/L6Tyg+wvL+CBn0ORFvP+tMeekT7/Hr3bG9vdm785sXZiu/e0N5tq5q3z9q7H9/dJrCmWrZ037277tMJcvh7F6zY8cO3qW4cN/Y9780RnKDR82nWHDP6CSfyk+/GAMO7YfIbB+ZQYPmkrv3t2oXsOPJYs38cfvy/n8i44sWrgBgKXLJxAdHceH749m/sIxWFjIrOgX6T95tP9N5zzFK4CfGaOYS3fA29wbrVqpKBcvR3H5SjRJSXqWrDxEqyamI4VlSnqxffdpALbvOUPrphXNHSNTLoaE4u7jipu3C5ZWltRoXJkjO06YlHH1cqZQCe8Mne/rl8Iw6A2Ur14GABu7fOSzsX5h2R9n575T3IyNz+4YqWIvXCK/hxt27m5YWFriVbMaEYeOmpSxsn34pq+/dz/1d10+69TOuCEpKUtHO06eCMW3kCs+vi5YWVnStGUA27cEm5TZvjmYVm2rAtCoWUUO7DuLpmnY2lnjX6UY1vkyjmGsWLqft/5nHIm3sLDA0Sm/2bOHnr6Mq7crLt6uWFpZUrlhZU7sPG5SxtnTBe/iGetx2OVwilcqgU6nI59tPryKe3Nqf4jZMz6wedMhXm5XF6UUlfxLcvv2XSIjY03KREbGcic+kUr+JVFK8XK7umzaeAiAhfM28r/32mBtbQWAi0tBwFg1EhLukZys5969JCytdNjnN29nMua8sS7nT6nLPrWqEXbwKXU55XA7Fi2ErZMjAAV8vdHfT0KflGTWfOmdOxmKh68LHj7G81udppXZv920Trt7OVOkpDcW6eqFd2E3vAoZP9w4uzlQ0MmeWy/4vHLl9GVcvF1x8TLWa/+GlTm527RelwgohXXKebdQuaLERcW90IxgbH9pcwY0rEzwrse0v3TnsPDL4RSv+LD9eRf35tSBrGl/mzYdoG27+iil8A8oze1bd4iMiDEpExkRw534BPwDSqOUom27+mzcuB+Ay5euU616OQBq16nE+vV7ATh//io1a1YAwMXFgQIF83PixIUs2Qezs1Dm/8muXcm2V85GSqn4lP83VEptUUotUkqdUkrNVimtTSk1Vil1Uil1TCk1XilVB2gLfKeUOqKUKqGU6qGU2q+UOqqUWqyUsnvK615SSo1JWf+AUqqKUmqtUuq8UurDNOV6p2z3mFJqWMpzRZVSIUqp6UqpYKXUOqWUrVLqNaAaMDtlu2Z7B/PydODajYeN/XpYDF4eDiZlTpy6RpsWAQC0ae5PAXtbnByNHRabfJZsXNKHdQt70joLpgA8SkxUHE7ujqmPndwciXnGE3z4lUjs7G35aeCfDHt3Agt/WY5Bb8iipLlXYkwsNs5OqY9tnJ1IjInNUO7yhi1s6TWI0wuC8Ov6Zurzsecvsr3fcHYMGEn5tztnyeg5QGTELTw8HVMfu7k7EBkel65MXGoZS0sd+e1tiIu9+9ht3r5lHC2f9tMaur85kQG9ZnEz+rbZs8dFxeHo/vAYO7o5Ehf9bPXYp4Q3p/af4n7ifeLj4jl35Byx6TrM5hQREYOHp0vqYw8PZyLCTTsJEeExeHg4mZZJ6UhcvhTOoYOn6fLmMP731mhOHDd2BJo2r46tbT6aNviCFk2+4u13WuHgaG/W7Ikxsdimqcu2j6nLF9ZvYX3PQQTPC6JitzczLL+x/zAORQuhs7Iya770bkbG4eLhmPrYxc2BmMjMd2DPnQwlOUmPh4/L0wub0a3oOBzcHh5vB1dHbj3h/HxgzR5Kp3QgX6S4qDgc0+R0dHV85g8K3sW9OZ3S/u48aH8RsVmSMyL8Jp6erqmPPTxdCI+4aVImPOImHh4P/509PVyICDeWKVmyEJtSOutr1+4h7EY0AGXKFmXz5gMkJ+u5ejWCk8EXCAuLypJ9EI/3n+ygp1MZ+BLjyHhxoK5SygVoD5TXNK0SMFLTtF0Y/3Rrb03TAjRNOw8s0TStuqZp/kAI8O4zvF6opmkBwHZgBvAaUAt40BFvDpQCagABQFWlVP2UdUsBP2maVh6IBV5NmTpzAOiSksvk+3al1PspHwYO3IszHWkxh8Fjg6hToyRbln1D3RoluR4Wgz6lU+vfcDBNOoyjx9czGD3gVYoWdn3K1rKXXm/g7LELvPFxWwZO/ZLI69HsXLMvu2PlWkWaNqTh+BGUeeMVzi9/+PcbHEsUI3DMYOoM/YYLK9agv5+1o47mpNcbiAiPo2JAUWbM/5IKlQozecKK7I5loky1spSrUY4fv5jI36P+oqhf0RwxVetxkvV64uLu8Pe8wXzV6016f/0TmqZx4vgFdBYWrN8ykVXrJvDXjDVcvRKRLRmLN2tIswkjKP/mK5xZZvK3SLh19TrB84MIeKdLtmTLrJioW0wZPoePBnTM0VMWDm88wNWzV2jwWuOnF85BylQrS9ka5ZjyxUT+Hv0XRfyKYqHLme1vxKiPmDd3Ha+/+g137yRgZWX8xrBDh0Z4eDjzxut9GTtmBgEBZdDl4LpiQmXBTzb5T85BT2efpmlXAZRSR4CiwB4gEfhdKbUCeNw7cAWl1EjAEbDH+Gden2Z5yv+PA/aapt0Gbiul7imlHIHmKT+HU8rZY+yYhwIXNU07kvL8wZSsT6Rp2jRgGoBzqU+f+Gdl07sRFoeP18NRBG9PJ26kG4EMi4jj7U9+AyC/nTUvtwjg1m3jZ4QHZS9fiWbHvrNU8vPlUmjWfgp3cnUgJs1oRUxkLE6uDo9fIe26bg4UKumNm7dxtKFyvYpcOHkZXsqKpLmXjZMjiTcfjpAm3ozBJuWr/kfxqlmN4JlzMzxv7+2FziYf8deu41CsiNlzurkXJDzlgmUwjpa7pfsGyM3dgfCwWNw9HElO1nMnPhEHx8d/EebgaIeNjRUNmxi//m3c3J8VQfvNnt3B1YHYNF9Vx0bG4uDybPUYjBemNevSHIBZo/7CzdfdrPnmzdnAkoVbAShfsRjhYdGpy8LDb+KeZrQcwN3DifA0o+rh4TdxT/mGwMPTmSbNqqGUomKlElhYKGJibrN65R7qBFbEysoSF5eCBFQuRfCJi/gWMt++2Dg5kpCmLic8pS771KrG0RlzTcrvmzSVKh90J7+H+ebGP46zmwPR4bGpj6Mj43Bye/Z6cfdOImN7/UbH91tRuoL529zTFHRxIC7y4fGOi4ql4CPOz2cPnWbT3HV8MP4zLK1ffDfFwdWB2DQ5Y6NicXjG9xGApl2a0zSl/c0e/RduPuars3Nmr2HRoo0AVKhQwmRkOzwsGg930wtqPdydCQ9/2D7DwqNxT7notnhxH6b/PhCASxevs3WrcdqZpaWOvv26p67TpdNAihQ1+yzarJGHLhLNJR+JstS9NL/rAUtN05IxjmAvAtoAax6z7gzgU03TKmIcAX+Wq0AevJ4h3WsbMH5gUsCYlNHwAE3TSmqa9vvjsj7D6/1rh45fpnhRNwr7umBlpaPDS1VYs/GYSRlnp/ypc/C+/KAFsxftAcChoC3WKSdWZ6f81KxS3OTi0qxStGwhwq9GEnkjmuSkZPZtOox/3QrPtG6xsoW5G5/A7ZR5mSGHzuJV1OMpa/33OBQrwp3wCO5GRmFITubG3gO4VzadwnQn7OFIZ8TRE9h5GN+g7kZGYdDrAUiIiubOjXBsXbPma/Zy5QtxNTSK61dvkpSUzIY1R6jXwPQSksCGfqxefhCAzeuPU7VGyQxzStNSSlG3gR+H9hunYRzYe5aiJcxfRwqVKUzktSiiU+rx4S2HqVDn2eqxQW/gTtwdAK5fuM6Ni9cpU62MWfN17NyUBUEjWBA0gkZNqvDPsp1omsaxo+ewL2CLm5ujSXk3N0fy29tw7Og5NE3jn2U7adTYeGeLRo2rsH+fcY7upUthJCXpcXIqgKeXC/v2GK/Hv3v3HsePnqdYcS/MybF4Ee6ERXAnwliXr+05gGcV07ocn6Yuhx85QX5PY11OunOXPeN/wu+NV3ApXcKsuR6nRLlChF2NIuK6sV7s2nCYavWe7e4ayUnJTOj7J/VbVUu9s8uL5lumMNHXorgZZsx/dMth/GqZ1utr564S9OMC3h7WA3vHAtmSs1CZwkSlaX9HthymfO1MtL9bD9vf9YvXKW3G9te5S0uWBH3HkqDvaNKkBsuXbUPTNI4eOYN9ATvc3E0/HLu5O5Hf3pajR86gaRrLl22jceNqAESnTJszGAxM/XUJb77ZDDBe+3H3biIAu3YeQ6fTUbKkr9n2QTwbGUF/BKWUPWCnadoqpdRO4MHVEbeBtGeMAsANpZQV0AW4ZoaXXwuMUErN1jQtXinlAzxtDkD6XGah1xvoM2wBi/74BJ1OMXvRHk6dC6PfFy9x+HgoazYdp17NUgzq2RZNg937z9F72AIAypTw5PsRnTAYDFhYWDBp6voX0kHXWero/GUHJvaahsFgoG7rGvgU82Tp76spWrYQAXUrcDEklJ8H/cmd2wkc3RXM8j/XMHzmN1joLHj9o7aM/+oX0DSKlClE/Ta1sjzz08yc/BmBtcvh6lSAc3unMOL7RcycvyXb8ljodPh168j+7yajGQz41q9DAV9vziz5B4eihfGo4s/lDVuIDj6FstRhZWdHpR5vAxBz5jwXVqxFWepQSlH+rY5YFzDvvOIHLC11fN3vFb76aDp6g4E2r9SgeElPpv+0lrLlfQlsWJ427WswfMA8Xm8zloIF7Rg+7uE0hQ6tRnMnPpHkJD3bNgcz8dceFCvhwcdfvsTwAXOZ9N0yHJ3sGTD8DbNn1+l0dPjsVab1/RWDwUCNljXxLOrF6hmrKFS6MBXqVCD0VCh/Dv2dhPgEgncHs2bmGr75vS96vZ4pX/0IQD47G7r07Youi+b5AwTW92fHtmO0adkbG5t8DB/1XuqyN9oPYkHQCAAGDHqbQf2nc+/efeoGVqJefWNHuH2H+gwe+Bsd2vbHysqSEaN7oJSiY6cmDB7wG+1f7gcatGsfSOkyhc2a3UKno9JbHdmdUpcL169DQV9vQhb/g2OxwnhV8efi+i1EBp9C6XRY57ejyvvGunxh/RbuhEdyeukqTi81Tnup0+cz8jkUNGvGtHSWOv73dQdGfzUNg16jYZsaFCruyYLpayhe1pdqgRU4dzKUCf1mcOd2Agd3nGTh72uZMLsPuzceJeTIBW7fusvWVcZvfT4e0JGipX2yLG+G/DodbT95lT/6G+t1teY18SjqxbqZq/AtXRi/2hVYPX059xPuMXvknwA4ujvx9rAeLyzjg5ztP32V6f1+RTMYqN7C2P7WpLS/8nUqEHo6lJlDf+dufAIn9wSz7q819P7N2P5+Sml/NnY2dP4m69pf/QaV2bbtEK1afI6NjTUjRz+801eH9r1ZEvQdAIMGv8eAfj9z79596gUGEFjfeHvNVSt3MneO8Yv/ps1q0L5DIwBu3ozj/fdGYWFhgbu7M2O//TRL8meJPDSCrjQtU7Me8gSlVLymafZKqYZAL03T2qQ8PwXjfO61wDKMI+IKGK9p2kylVF1gOsaR7NcwTkXpA0QCe4ECmqZ1f9xtFpVSl4BqmqZFpdwasZqmaZ+mvHbaZV8AD97l4oGuGEfMV2iaViGlfC+MU2SGKqVeBUYDCUDt9PPQH8jsFJecYNn2VtkdIdOa1/g7uyNkygcLXuybnzkMCsg5d7V5Vnsis/YCQnNr4u309EI5zOCDj7/AN6fqXCJ3Zb54O+s+7GUVy1w2V6CVby6ZTpKGpYV/jugZl3z1b7P3c84t7pot+/afHEHXNM0+5f9bgC1pnk/7MbHGI9bbieltFn9J+Ulfbmia37un+b1omt9nYJwi86hlk4BJj4heIU2Z8Wl+XwwsfkR5IYQQQoj/hlz2YexJ/pMddCGEEEIIkcfkoSkueeizhhBCCCGEELmfjKALIYQQQojcL+8MoMsIuhBCCCGEEDmJjKALIYQQQohcT8vBfzU5s2QEXQghhBBCiBxERtCFEEIIIUTul4fu4iIddCGEEEIIkfvlnf65THERQgghhBAiJ5ERdCGEEEIIkfvJRaJCCCGEEEKIrCAj6EIIIYQQIveTi0RFbtT1r1ezO0KmVXPNl90RMu2DBT2yO0KmTH1jenZHyLRxl3pmd4RM87ANz+4ImXJPH5fdETItn06X3REyzcvOkN0RMuXKndx3jCMSctdkgfuGW9kdIdMsc8ohzjv9c5niIoQQQgghRE4iI+hCCCGEECL3k4tEhRBCCCGEEFlBRtCFEEIIIUTul4dG0KWDLoQQQgghcj0t7/TPZYqLEEIIIYQQOYmMoAshhBBCiNwvD01xkRF0IYQQQgghchAZQRdCCCGEELlfHvpLojKCLoQQQgghRA4iI+hCCCGEECL3y0Nz0KWDLoQQQgghcr88NC8kD+2KEEIIIYQQuZ+MoIsnijwWzKk5C9AMBnzr16V4m5Ymy69s2kbopi0oZYHOJh/lu3fB3sc7dXlC9E129h9GiVdeolir5lmWU9M0xo2Zw45tx7CxtWb4qHcp51c0Q7mTwZcYPOA37iUmUa9+Jfr064xSil9+WsqSRVtxcioAwGdfvkpgfX9WrtjNzD9Wp65/9sxV5i4cStlyhc2aP/JYMCGzF6AZNHwb1KVEmxYmy0M3bePyxq0oCwss8+Wj/DtdKODjRez5S5yYMfvBQaDkK23wrBZg1mz/xq/ffUCrJpWJjL5FtWZ9si2HpmmMHf0X27cdxcbGmpGjP8CvfLEM5YKDLzKw36/cu5dEYH1/+vZ/C6UUp0IuMWLoH9y7n4ROp2Pg4HeoWKkEK/7ZyR+//YOmaeTPb8ugIe9QpmwRs+c/uieEWROXYjAYaPhyLdp2a2KyPOTIef6etJTQ8zf4dFg3ajbyN1l+904ifbp8S7XACnTv+arZ84HxGE8Yu5hd209iY2PN4JFdKOtXKEO5kOBQhg+czb17SdQJ9KNn31dRSrFh7WGm/7KaSxfC+XNuT/zKm7atsBs3ebPdaHp83Iqu3Ztk2K453TgazJG/FqEZDBRrVJdybU3PWec2bOf8+m0oC4VlvnxUfa8zDr5eWZoJYO/OU/w4bjkGg4GX2teg6/8amyy/fz+ZUQPncSbkKgUd7Bj6bVe8fJzZv/sMU39cRVKSHisrHR991YaqNUoCsGH1YWb9vgmlwNWtIANHdcbRKX+W5D+1P4RlPy/BYNCo2aoWjTs2NVl+/th5lv8SxI0L1+ky4C386wekLlsxfTkh+04C0KxLcwIaVsmSjOldOHiSjb8tQdMbqNS8NrVea2ayfP/STRxbvxsLCx22Dva0+rwzDu7Oqcvv3U3g909GU6pmJZp9+HqW5zW+B85l57bj2NhaM2zU/yjnl/GcdDL4EkMG/Mm9xPvUrV+RPv06oZTi15+WsWTR9tT3wE+/bE9g/UpZntvs5CJR8V+gGQyEzJpL1a8/pd7oIdzYu5/4a9dNynjVrk7dkYOpM2IgxVo359TcRSbLT89diGvF8lmedcf2Y4ReDmf56rEMGtqdUcNnPbLcqOF/MXjYOyxfPZbQy+Hs3HE8dVnXt5qzYMlwFiwZTmB9Y0fnpTa1U58bNbYHPr6uZu+cawYDwX/No1rPTwkcM5gbe/Zz+9oNkzJetasTOGoQ9UYMoFjrZqnHuYCvN3WG9qXeiAFU6/UZwTNmY9DrzZrv35i1cCvt3hqb3THYvu0oly+HsXLNBIYMe5eRw/98ZLmRw/5g6PD3WLlmApcvh7Fj+1EAvh8/lw8/6cCioDF88tlrfD9+LgC+vm78+dcggpZ/ywcfvcKwIb+bPbtBb2DGhCX0mfA+42Z/w+4Nh7h6McykjKuHEx8M6ESdZo/utCyavpqyAcXNni2tXdtPcuVyJItXDqLfkDf5duSCR5b7duQC+g/tyOKVg7hyOZLdO0IAKFHKi3E/vEvlqiUeud7E74KoXc8vy/I/YDAYOPTnAgL7fEKL7wYRuusAcVdN22GROtVo8e0Amo/pT5mXm3H078VZnkuvN/DDmCC+++ld/lrSi41rjnDpfLhJmZVB+yhQ0Ja5//Tlja71+XXSKgAcnPIzdtI7zFzUk/4jOjJqgLH+Jifr+XHcMiZN/5AZC3tSopQXS+btzJL8Br2BoMmLeG/0B/T+rS+HNx8i7LJpPXZyd+TN3p2p3Ni0Hp/cG8y1c1f5+tfefP7jV2xZuJnEO4lZkjN95g1TF/L6kA9596f+hGw7SFSoaV1wL+7LW9/35p3JfSlTx58tM5aZLN8xexWFypfM8qypr7f9OKGXI1i2ejQDh77F6OF/P7Lc6OF/M2jYWyxbPZrQyxHs3HEidVnXt5oxf8kQ5i8Zkjs753mMdNCziVJqhlLqtScs/00plfXvSk8Qd+ESdh7u2Lm7YWFpiVfN6kQcPmZSxtLWNvV3/b37qDSfXsMPHsHW1RV7n6wfYdqy6TBt2tZBKUUl/xLcvn2XyMhYkzKRkbHcuZNAJf8SKKVo07YOmzceeubXWL1qLy1a1TRzcoi9cIn8Hm5pjnM1Ig4dNSljle44P6DLZ42FTgeAISkpx4we7Nx3ipux8dkdg82bDtK2XSBKKfwDSnH71l0iI2JMykRGxBAfn4B/QCmUUrRtF8imjQcBUEpxJz4BgPj4u7i5OwIQULk0Dg7G0cZK/qUID7tp9uznQ0Lx8HXF3ccFSytLajWpzMHtJ0zKuHk5U7ikt0m7e+DiqSvE3bxNxeplzJ4trW2bj9O6bQ2UUlT0L8bt2wlERcaZlImKjONOfCIV/YuhlKJ12xps3WQ8lxQr7kmRYh6P3PaWjcfw9nGheEnPLN0HgJvnLmHv4Ya9hys6S0sK167K9YOm5zsru3Tt8AW0t5ATofgUcsXb1wUrK0uatAhgx5ZgkzI7tgTT8uWqADRoWpFD+86iaRqly/rg6u4AQLESHty7l8T9+8mggQYkJtxH0zTu3LmHq1vBLMkfevoyLt6uuHi5YmllSUDDygTvOm5SxtnTBe/iGetx+OVwilcsgU6nI59tPryLe3PqQEiW5EzrxtnLOHq54ejpis7KknKBVTi31zRzkUqlscpnDYB3maLER8WmLgs7F8qd2NsUrVw2y7M+sHXTEdq0rf0M74GJad4Da7Nl4+EXlvGFsFDm/8muXcm2VxZPpGnae5qmnczODIkxMdg4O6U+tnFyJDEmJkO50A1b2NZ7IGcWLKFslzcASE5M5OKqtZR45aUXkjUiIhZPz4dfL3p4OBERbpo1IjwGD480ZTydiYiITX08b85GXm8/iCEDf+dW3J0Mr7FuzT5atTZ/Bz0xJtb0ODs7kRgTm6Hc5Q1b2NJrEKcXBOHX9c3U52PPX2R7v+HsGDCS8m93Tu2wC4gIv4mnp0vqY+O/ebp6EZGuXng4ExFu7HB/068bE8bPpWmjz5gwbg5ffvUm6QUt3kK9QP8Mzz+vm5FxuKR8IABwdnckJl3H93EMBgOzpyyn86dtzZ4rvYiIODw8HVMfu3s4EhERl6GMu8eTy6R39+49/vpjA+991MqccR8rISYWO5eH7dDW2ZGEm7EZyp1dt5WVXw7h6JwgKr+V9VMXoiJu4Z7m+Lp5OBCZ7thFRcSllrG01JHf3oa42LsmZbZuOE7pcj5YW1tiaaWjZ/8OdH99Au2bjeDShXBeal8jS/LHRcXh6PbwuDq6OhIX9Wz12Lu4N6f3n+J+4n3uxMVz7sg5YtOcs7NKfHQsBVwdUx8XcHXkdvTjMx9bv4diVY3jaZrBwOY/ltLonXZZHdPEo98DY03LhMfi7vHw38LD0ynde+Am3mg/hKED/3zke2BuoCll9p/s8p/voCulliqlDiqlgpVS76c8F6+UGqWUOqqU2qOU8kh5foZS6kel1C6l1IUHI+BKqYZKqRVptjlFKdU95ffBSqn9SqkTSqlp6lFDXY/OtUUpVe0peTyUUkEpzx9VStUx68F5RoWbNqT+dyMp9Xp7LvxjnK99fukKirZogqWNTXZEyrQ33mzEijXjmL94GK5ujkz4bp7J8uPHzmNjY03JUr7ZlBCKNG1Iw/EjKPPGK5xfvir1eccSxQgcM5g6Q7/hwoo16O8nZVvGvGb+vA306duVDZsn07tvVwYPnG6yfN/eYJYs3sJXPTtmU8JH27BkJ/61y5l08HOb6T+vplO3htjZ5cvuKCZKNW/ASxOHUanTK5xcuia74zyTi+fC+HXSSnoNNF6HkJykZ+nC3fw+70uC1g+iRCkv/v5jUzanzKhMtbKUrVGOKV9M5O/Rf1HErygWupzxLeEDwZv3E3YulBodjNcFHF61g+JV/Sjg6vSUNXOW199syD9rxjBv8RBc3Rz4/rtHT1UTL45cJAr/0zTtplLKFtivlFoM5Af2aJo2QCk1DugBjEwp7wXUA8oCy4FFj9poGlM0TRsOoJSaBbQB/slkxsfl+RHYqmlae6WUDrBPv2LKh473ARr1+ZoKr7R55he1cXIi8ebD0cbEmFhsnB5/0vGqWY2Qv+YAxmkbYfsPcXr+EpLvJoCFwsLKiiJNGz3z6z/NvDkbWbJoKwDlKxQjLM00g/DwGJORAgB3DyfCw9OUCbuJe0oHxsXVIfX5Dq814POPJ5qsu2bVPlq2rmW27GnZODmaHuebMdg4OT62vFfNagTPnJvheXtvL3Q2+Yi/dh2HYua/YDG3mDt7HYsXbQagQoXihIVFpy4z/punqxfu6epF+E3cU0bUly/dTt/+bwHQomVNhg562EE/fTqUIYN+45epfXBMubDKnJzdHIhOM7p1MyIWJzeHx6+QxtkTlzl97AIbluwkMeE+yUnJ2Njlo+NHz97+n2Th3G0sXbwbAL8KhQkPe5gzIjwWd3fTnO7uDiajeY8qk96J45fYtP4IU35Yzu3bCVgohbW1FW90rm+WfUjP1smRu9EP22HCzVhsnR0fW75w7aoc+mPeY5ebi6t7QSLSHN/I8Djc0h07V3cHIsJicfdwJDlZz534RBwc7QDjsR7w9UwGjOiITyFXAM6eNl5L9OBxo+b+zP5jc5bkd3B1IDby4XGNjYrFwfXZ6jFA0y7NadrFeLHu7NF/4ebjbvaM6dm7OHI7zZSV21GxFHDJmPnSkdPsXriOTqM/x9LKCoBrpy9yNfgCh1fvICnhHvrkZKxt89HgbfN/mzV/ziaWLNoOQPkKRR/xHuhoUt7dw9Hkm+XwsJjHvAfW5/OPfzR73hciDw07SwcdPldKtU/5vRBQCrgPPBgRPwikvXx7qaZpBuDkg5Hsp2iklOoD2AHOQDCZ76A/Lk9j4C0ATdP0QIbv4DRNmwZMA/h892YtMy9asFgR7oZHcDcyChsnR27s3Y//h++alLkTFk5+T+NhiDx6AjsP48mzZv9eqWXOBf2DziafWTvnAB07N6FjZ+NdHbZtPcr8ORtp2bomx49dwN7eFjc3R5Pybm6O5M9vy7Gj56lYqTgrlu+iYxfj+pGRsanlN204SMlSPqnrGQwG1q3dx59/9TNr/gccihXhjslxPoD/h/8zKXMnLIL8nsZjG5HmON+NjMLG2QkLnY6EqGju3AjH1tUlw2v8l3Tq0pxOKW/o27YcZs6cdbRqXZtjR89hX8AWt3QddDd3J+ztbTl65CyV/EuyfNl2OndpkbrswP4QqtfwY++eYAoXMc6FvnE9iq8+n8iYbz+iaLGsucaieNlChF2NJOJ6NM5uDuzZeJhPhnR7pnU/Gdo19fetK/dx8dQVs3XOAV7vVJ/XOxk7yju2BbNwzjaat6rCiWOXsLe3wTXdBwlXNwfy29tw/OhFKlQqyqrl+57a0Z4+88vU36f9vAo7u3xZ1jkHcC5RhPiwCOIjorB1diR090FqfdrdpMztGxEU8DK2vRuHg7H3zPrOYtnyhbgaGsX1azdxcy/IxrVHGDy6s0mZug38WPPPQSr4F2XrhuNUqV4SpRS3byXwzWd/8MEXralY+eHdi9zcC3LpQjixN+NxdLbnwJ4zFCmeNftSqExhoq5FEX0jGgdXB45sOUyXfs9Wjw16Awl3EshfMD/XL1zn+sXrdKyWtddUAHiVKkzM9Uhiw6Ip4OJAyPZDvNzrbZMy4eevsO7nebw29CPyOz78gP5yz4fljm/cS9jZ0CzpnAO82bkxb3Y2jtxv33qMeXM20bJ1jae8B9qkeQ/cTccuxvVN3wMPUSLNe6DIHv/pDrpSqiHQFKitadpdpdQWwAZI0jTtQWdWj+lxupd2Eyn/T8b0c5tNyvZtgJ+BapqmXVFKDX2wLJOelCfLWOh0lOv6JgfH/4hmMOATWAd7H2/OLlmOQ7EiuFf2J3TjFqKDT2Gh02GZ346KPbq/iGgZBNavxI5tx3i51TfY2FgzbOTDDxJvdBjMgiXDAeg/qBuDB/zOvXv3qVuvIvUCjVeqT5ywgNOnQlFK4e3tysChD0+yBw+cwdPTGd9CWfMGZqHT4detI/u/m5xyO8s6FPD15sySf3AoWhiPKv5c3mA8zspSh5WdHZV6GPPFnDnPhRVrUZY6lFKUf6sj1gUyfJHyws2c/BmBtcvh6lSAc3unMOL7Rcycv+WF5whsEMC2bUdo3eLr1NssPvBa+34sChoDwMDB7zCw31QS792nXqB/6l18hg5/j7Gj/0KvN5AvnxVDhr8HwK8/BxEbezv1rjA6nY75i0ZiTjpLHd2/6sC3X0/DoDfQoE0NfIt7smj6aoqVLUTVwAqcDwnlh35/cvd2Aod3BrP4tzWMm/2NWXM8Td1AP3ZtC6ZD6+HY2FgzaGSX1GVdXvuW2YuMefoMfMN4m8XE+9Sp50edQOOc3c0bjzJh9CJiYuL5+uOplCrrw+SpH7/QfQBjO6zS/Q22jf3JeJvFhrVx8PXmxMIVOBUvjE/VSpxbt5XwE6ewsNRhld+OGh89W0fzeVha6viy7yv0+mg6BoOB1u1qUKykJ7//vJYyfr7Ua1iel9rXYNSAeXR6eSwFCtox9Fvjv8GS+Tu5FhrFzKnrmTl1PQATfn0fV3cH3vmgGZ+++wuWlhZ4ejnRb3jG6yvMQafT0f7TV5ne71c0g4HqLWriWdSLNTNWUah0YcrXqUDo6VBmDv2du/EJnNwTzLq/1tD7t77o9Xp++so4kmtjZ0Pnb7qiewHX2FjodDT94DUWDv0ZzWCgYtNauBb2YvvslXiWLEypmhXZMmMZ9xPus/xb4zmggJsTrw58P8uzPU69+hXZse04bVv1x8bGmqEj30ld9maHYcxfMgSAfoO6MmTAH9y7l0TdehWoF1gRgEkTFnH61BWUAi9vVwYOzfq6nSXy0F8SVQ/7ff89Sql2wHuapr2slCoLHAFaAis0TbNPKfMa0EbTtO5KqRkpyxalLIvXNM1eKVUI2A6UAWyBw8AwYClwGigK6IA9wCJN04am39Yjsm0BemmaduDB6zwizzyMU18mPpjiomnaY69kyewIek7wbfWcNf/0WfQ7kPW3ATOnqW9Mf3qhHCbuUs/sjpBpx26GP71QDlKqYO4bvxl/PPddIP2p392nF8pB9kVaZXeETItIyF3zHjqVsMvuCJlmZxmYI3rGxXr9Y/Z+zsXxL2fLvuWuWmt+awBLpVQIMBZjBzrTNE27AiwATqT8/3DK87HA9JTn1wL7nz+yiS8wTqE5jnHqS7bellEIIYQQQjy/3DdEYkaapt0DHnUPL/s0ZRaRciGopmnd062ftlwfIMOfTNQ0bSAw8BHPd0//XLrlDR/zOmnzhAMv9l5OQgghhBA5UR6a4vJfH0EXQgghhBAiR/lPj6DnBEqpIKBYuqe/0TRtbXbkEUIIIYTIlfLOALp00LObpmntn15KCCGEEEL8V0gHXQghhBBC5HpaHpqDLh10IYQQQgiR++WhDrpcJCqEEEIIIUQOIiPoQgghhBAi91Mygi6EEEIIIYTIAjKCLoQQQgghcr88NOwsHXQhhBBCCJH7yRQXIYQQQgghRFaQEXQhhBBCCJH75aHbLCpN07I7g3hBohOX57p/7Jj7ua+xOVnnrsNcwNo7uyNkmkPRCdkdIdO2H+qa3REypbSDdXZHyLSbiYnZHSHT7hty1zkuOXed3gAolN82uyNkikFLzu4ImeZg3SJHVOSiw9aavYZeGpI9+yYj6EIIIYQQIvfLQyPo0kEXQgghhBC5niYXiQohhBBCCCGygoygCyGEEEKI3C8PDTvnoV0RQgghhBDixVJKtVRKnVZKnVNK9X1MmTeUUieVUsFKqTlP26aMoAshhBBCiNwvG+agK6V0wE9AM+AqsF8ptVzTtJNpypQC+gF1NU2LUUq5P227MoIuhBBCCCHEv1MDOKdp2gVN0+4D84B26cr0AH7SNC0GQNO0iKdtVDroQgghhBAi97NQZv9RSr2vlDqQ5uf9dK/qA1xJ8/hqynNplQZKK6V2KqX2KKVaPm1XZIqLEEIIIYTI/bLgPuiapk0Dpj3nZiyBUkBDwBfYppSqqGla7ONWkBF0IYQQQggh/p1rQKE0j31TnkvrKrBc07QkTdMuAmcwdtgfSzroQgghhBAi91NZ8PN0+4FSSqliSilroCOwPF2ZpRhHz1FKuWKc8nLhSRuVDroQQgghhBD/gqZpycCnwFogBFigaVqwUmq4UqptSrG1QLRS6iSwGeitaVr0k7Yrc9BFBnt2nmLit8vRGwy83L4Gb73b2GT5/fvJjBgwj1MhV3FwsGPEuK54+TgTF3uHAT1nERJ8hdZtq9Gzf3sA7txJ5ON3fk5dPyI8jhYvVeHLPukvcv73Duw6xbQJyzAYDDRvV5M3uptmTrqfzIQhczl36ioFHOzoO7obHt7ObF59iMWztqSWu3TuBpNmfUmJMj5sW3eE+X9uxKA3UD2wHP/7rI3Z8pr7GAMkJSUzYcxSDu8/j7JQfPBZSxo1rWS2zJqmMXb0X2zfdhQbG2tGjv4Av/LFMpQLDr7IwH6/cu9eEoH1/enb/y2UUpwKucSIoX9w734SOp2OgYPfoWKlEqz4Zyd//PYPmqaRP78tg4a8Q5myRcyW+1n8+t0HtGpSmcjoW1Rr1ueFvvaTHN0TwqyJSzEYDDR8uRZtuzUxWR5y5Dx/T1pK6PkbfDqsGzUb+Zssv3snkT5dvqVaYAW693w1SzJqmsaEMYvYuT0YGxtrhozqRlm/QhnKhQSHMmzgLO4lJlE3sDw9+72GUooNaw8x7edVXLoQzoy5vfCrYPy3T07SM3LIbE6FXEGfbKB12xq806OFWTLv33WKX8cvQ28w0OqVmrzZPWP7+27IXM6GXKWggx39x3TD09sZgAtnr/Pj6MXcuZOIhVJM/usLrPNZpa475Ks/uHEtmmkLepslK8DB3aeYPsFYD5q1q8nrb5vWg6T7yXw/dA7nT12lgEN++owynt+Sk/VMHrmA86evotcbaNy6Gq93N667dM5W1i3bi1KKoiU9+WJQR5P9yCqHdp/i9++N+9K0bU1eTbcvwYfP88cPy7h07gY9R3SlThP/x2zJ/DRNY/yYhSl12Yqho96irF/hDOVCgkMZOvCv1Lrcq9/rKKWYNH4J27Yex8pSh28hN4aM7EaBgnZcvxbN622HU6SoBwAVKhWl/5DOZsk7Yexidm0/iY2NNYNHdnls2xs+cDb37iVRJ9CPnn1fTWl7h5n+y2ouXQjnz7k98Stv3Nfr16J5s91oChd1T83bb/Cbz533RdCyYA76M72upq0CVqV7bnCa3zXg65SfZyIj6LmMUmqoUqqXUqq7Uso7zfO/KaX8nnf7er2B8aODmPDzu8wJ6sWGNUe4eD7cpMw/QfsoUNCWhSv68mbX+vw80Vgnra2t6PFJCz792rQjmz+/DTMXfJ364+nlRIMmFZ83qknmX8YFMWzSe/yyoDfb1h0m9EKYSZm1y/ZiX9CW34L68Urn+vw5eSUAjVpVYcqcr5ky52t6De+Eh7czJcr4cCv2Dn/8uILRP3/ALwt6Ext9myP7zpotr7mPMcDM6RtxcrZn/j/fMCeoF5WrljBL3ge2bzvK5cthrFwzgSHD3mXk8D8fWW7ksD8YOvw9Vq6ZwOXLYezYfhSA78fP5cNPOrAoaAyffPYa34+fC4Cvrxt//jWIoOXf8sFHrzBsyO9mzf0sZi3cSru3xr7w130Sg97AjAlL6DPhfcbN/obdGw5x9aJpvXb1cOKDAZ2o06zKI7exaPpqygYUz9Kcu7afJDQ0kiWrhtB/aCfGjpj3yHJjR8xnwNDOLFk1hNDQSHbtMN4iuERJb8ZN7JGhvm5Yd4j795OZFzSAWQu+IWjhTq5fe+KA0zPR6w389G0QI398j+kLe7N57WEuP+p8UcCWGUv70aFzfX5POV/ok/WMGzSXz/q9yvQFvflu6kfoLHWp6+3YdBwbu3zPnTF93l/HLWHopB78NL8P29ZmPL+tW74X+wJ2TFvSn3ad6jNjygpjng1HSUpKZsrc3vzw11esCdpN+PWbREfE8c/8Hfww8yt+mtcbvV5j2/rDZs39uH2Z9t0SBk3swY/z+rBj3WGupNsXNw8nPhvUkfrNK2d5nvR2bg/mSmgEQauGMmBoF8Y8pi6PGTGXgUO7ELRqKFdCI1Lrcs3aZZkfNJB5QQMpXNSdP39bm7qOTyFX5izuz5zF/c3SOQdj27tyOZLFKwfRb8ibfDtywSPLfTtyAf2HdmTxykFcuRzJ7h0hAJQo5cW4H9595HuFTyFXZi/6htmLvsk1nXPAeB90c/9kE+mg517dgdQOuqZp76W9Kf6/dfJEKL6FXPHxdcHKypKmLQPYviXYpMz2zcG0alsVgEbNKnJg31k0TcPWzhr/KsWwzvf4L2ZCL0USczOegCoZR17/rTPBoXgXcsErJXP9ZgHs2Wqaee+2YJq8VA2Aeo0rcXS/MXNaW9cepn7zAADCrkXjXcgVByd7AAJqlGbnpmNmyZtVx3jF0v289T/jSKCFhQWOTvnNkveBzZsO0rZdIEop/ANKcfvWXSIjYkzKREbEEB+fgH9AKZRStG0XyKaNBwFQSnEnPgGA+Pi7uLk7AhBQuTQODsaslfxLER5206y5n8XOfae4GRv/wl/3Sc6HhOLh64q7jwuWVpbUalKZg9tPmJRx83KmcElv1CPeRC6eukLczdtUrF4mS3Nu3XyMl9rWQClFRf9i3L6dQFRknEmZqMg47txJpKJ/MZRSvNS2BltT2lOxEp4ULeaRYbtKKRIS7pOcrCfx3n2srHTkt7d57ryn050vGjYPYHe688XurcE0a2M8XwQ2qcSRlPZ3cM8ZipXyokRp46m3oGN+dDrj22jC3Xssmb2Vzu+ajgg/r7PBoXj5uuDpk3J+a16ZvdvSnd+2nkg9v9VNc35TChIT7qNP1nM/MQlLSx12+Y3H0KDXc/9eEvpkPfcS7+Ps6mDW3I/cl5Om+1KvWWX2pdsXd29nipbyRmXDSOjWzcdo3bZmmrp896l1uXXbmmzZZByEqFXXD8uUD2wVKxUjIjw2S/Nu23yc1s/S9uLT5k3T9op7UuQRbU/kDNJBzwWUUgOUUmeUUjuAB++21YDZSqkjSilbpdQWpVS1532tyIhbeHg6pj52c3cgMjwuXZm41DKWlsY3zbjYu8+0/Q1rjtCkhf8jOxT/VnRkHK4ejqmPXT0ciU53koqOiMMtpYzOUoedvS234kwzb1t/lAYpHXSvQq5cDY0k/PpN9Ml6dm85QZSZTrZZcYxv3zJ2fKf9tIbub05kQK9Z3Iy+bZa8D0SE38TT0yX1sYenMxHpOugRETF4eDg/LOPhTES4scP9Tb9uTBg/l6aNPmPCuDl8+VXGUZmgxVuoF/jivtLOyW5GxuGS8iEGwNndkZh09fpxDAYDs6csp/OnbZ9e+DlFhsfi4emU+tjdwzFDxyQiPBb3NG3U3cORyKe0pybNKmNra02rRgN4udlgunRvkvpB7nmkPRcAuLo7EhWRrlOT7nyRP+V8cTU0EgX0/3Qan3T5gQUzN6euM/OXNbzatQH5bKyfO6NJ3nTnNxd3h4znt8hbqWUe5r1D3Sb+2Nha81brYfyv7Ujad21IAQc7XNwdaN+1If9rO4K3Wg8jv70NVWpl7Qc5gJsRT9+X7BQZHotnmrrs4eH0yLrskWYfPDycHlmXlwftok69h19qX78WTefXRvN+9+85fPCcWfJGpHmfgJS2l64uR0TEZWh76cs8yvVr0XR9/Vs+6D6JwwfPmyXvC5EF90HPtl3JtlcWz0QpVRXjFcEBQGugesqiA0AXTdMCNE1LyKZ4mbZh7RGatXrxX10+zakTl8lnY0XRkl4AFChoxyffdGBs/1n0ef9nPLycsNDl3Oai1xuICI+jYkBRZsz/kgqVCjN5worsjmVi/rwN9OnblQ2bJ9O7b1cGD5xusnzf3mCWLN7CVz07ZlPCvGPDkp341y5n0sHPbYKPX8JCZ8HqTaNYtmYYs2du4uqVqGzNpNcbOHH0It+M7MKE3z9h15YTHN53lvOnr3HjajR1G5lv6p45nAkOxcJCMXPVEH5b2p+ls7cSdi2a+Ft32bs1mN+WDmDmqiEkJtxn8+qD2R03z/h96mp0Oh2t2tQAwNWtICvWj2TOov581fs1Bvb5g/j4nPu27epWkOXrhvH3wm/4snd7Bn0zM0fnzavkItGcLxAI0jTtLoBSKv2te54o5S9evQ8wYcrHvP3uky+ycnMvSHhYbOrjyIg43Dwc0pVxIDzMOCKWnKznTnwiDo52T81y9vR19MkGyvr5ZmYXnsrFzcFkdDsqPBYXN9PMLu4ORIbH4urhiD5Zz934BAo6PMy8bd0RGrQw/eBQs355atYvD8DqJXvM1kHPimPs4GiHjY0VDZtUAKBxc39WBO1/7qxzZ69j8SLjKGGFCsUJC3s4Bzg87Cbu7k4m5d3dnQgPfzhFJTz8Ju4pI+rLl26nb/+3AGjRsiZDBz3soJ8+HcqQQb/xy9Q+ODoVeO7ceYGzmwPREbGpj29GxOLk9mzTEM6euMzpYxfYsGQniQn3SU5KxsYuHx0/Ms+FzgvmbmXpol0A+FUoQnjYw29S0o+WQ8ZR9YjwWJNR7EdZs+oAder6YWmlw9mlAP4BxQkJNk4Pex4PzgUPREXE4upuelxdU8q4pZwv7qScL9zcHahYuTgOjsaR/Op1y3Lu1FVs7PJxJuQqb708Cr3eQOzNeHq//zPfTfv4ubJCxvNbdERcxvObW0Gi0pzfjHnzM2ftWqrULoulpQ5H5wKU8y/K2ZNXUErh4e2cOoWvTqNKhBy7RKNWVZ8775M4uz99X140Y13eCRjrcliauhweHvPIuhyeZh/Cw2NM6vI/S3ezY9sJfvnti9Rviq2trbC2Nl6AW658YXwKuRF6KSL1gujMWDh3G0sX707JW9jkvSQiPBb3dHXZ3d0hQ9tLXya99Hl9C7kSejky9SLSHC37BrzNLucOCQqz0DRtmqZp1TRNq/a0zjlAufKFuBoaxfWrN0lKSmbDmiPUa2B67WlgQz9WLzeOtmxef5yqNUo+05SV9auP0KxVwL/ajycp7VeIa6FRhF2LJikpmW3rj6R2rB+oGViejSsPALBj0zEqVX+Y2WAwsGPDUeo3M80We9M4ReT2rbusXLSLFu1qmiVvVhxjpRR1G/hxaL/xtqoH9p6laInnn1vYqUtzFgWNYVHQGBo3qcbyZdvRNI2jR85iX8AWt3QddDd3J+ztbTl6xDgHdvmy7TRqXDV12YH9xouT9u4JpnARTwBuXI/iq88nMubbjyhazOu5M+cVxcsWIuxqJBHXo0lOSmbPxsNUrVfhmdb9ZGhXflwymEmLB9H5k5cJbFnNbJ1zgDc6NWDO4n7MWdyPho0rsXL5PjRN4/jRi9jb2+KartPl6uZA/vw2HD96EU3TWLl8Hw0aPfkOQ55ezuzfdxowzu8+cezSI+eqZ1YZv0Jcu/LwfLFl3RFqpTtf1KpfnvUrjOeL7RuP4Z9yvqhauwyXzoWRmGic133s0AUKF/fg5dfqMHfNYP76ZwATfvsEn8KuZumcA5TyK8T1NHm3rTtMjcB057f6D89vOzcdo1I14zUgbh5OHDtgnE6RmHCP0ydC8S3qjpunI6dOXCYx8b6xPe8/S6GUO3ZkpVLlCnHjShTh1437smP9YaqnO/YvmrEuGy/ebNi4EquW781UXV61fG9qXd61I5i//ljP95M/xMb24VSnmJu30esNAFy9EsWV0Ah8/uUHzdc71U+9eLNB40qsMml7No/Oa5827z7qP+WbnrR5r12J4kpoJD6+Lk9cJ6ewsDD/T3ZR6S+UEzmLUqoKMAOoifEbj0PAVKAB8L2maZtTym0BemmaduBx24pOXP5M/9i7tocwaZzxFoBtXqlB9x5NmP7TWsqW9yWwYXnu3Uti+IB5nDl1jYIF7Rg+rktq4+3QajR34hNJTtJjX8CWib/2oFhKR/G11mMY/9O7FC327G8EMfef8a8E7Axh2vfLMOg1mrWtTsf/NWXWr2soVa4QtRqU5/69JMYPmcuF09coUNCOPqO64pWS+djBc8yYsorv//zcZJvfDvibi2evA9DpvWY0eMa7CjhZP/0wZ8UxvnE9huED5hJ/OwFHJ3sGDH8DTy+npySBAtbeTy0Dxlt6jRoxg507jqXeZrF8BeMdQl5r349FQWMACD5xgYH9ppJ47z71Av3pP/BtlFIcOniasaP/Qq83kC+fFQMGv0P58sUYMnA669fvw9vb+Ial0+mYv2jkE7M4FJ3wTJmf1czJnxFYuxyuTgWIiIpjxPeLmDl/i1lfY/uhrple58iuk8z6cRkGvYEGbWrwytvNWDR9NcXKFqJqYAXOh4TyQ78/uXs7AStrSxycCzBu9jcm29i6ch8XT13J9G0WSzs821xqTdMYN2oBu3eEYGNrxeARXVNHBju/OoY5i/sBcPLEZYYN/Jt7icZbvfXub7w13eYNRxk/ZiExN+MpUMCW0mV9mDztU+7evcfwgX9z4fwN0ODlV2rR7X9Nn5jlZmLiM2XetyOEX1POF83bVqfzu02Z+esaSpcrRO2U88W4wXM5l3K+6D/64fli46qDzJuxCQXUqFuO974w/eATdv0mg7/8/Zlvs3jf8PRz3IGdIUz/fikGg0bTl2vw5v+a8vfUNZQq50vN+hW4fy+J74fM4cKZa9gXtKPPqG54+riQcPcek4bPI/Si8S5RTdtUp0O3RgDMnraG7euPoNPpKF7Gh88HvIGV9dO/VE9+zi7DwZ0h/P6DcV+avFyD199pypypayhZzpca9Stw9mQo3/aZQXxKnXZyKcCP857v1qeF8ts+UzljXZ7Prh0nsbG1ZsiIbmnq8mjmLO4PGOvyg9ss1gksT5/+b6CU4pVWQ0i6n4SDo/GbiQe3U9y4/jBTp6zA0lJnvAXuJy9Rv+HjP6AatORnzvvdqIXs3hmCjY01g0Z2SR3l7vLat8xeZDwXnHxwm8XE+9Sp50ev/sZbnG7eeJQJoxcRExNPgQJ2lCrrw+SpH7Np/RGm/rQKS0sdFhaK9z9uRWDDJ3fqHaxb5Iix66JTtpq9U3vp0wbZsm/SQc8FlFIDgLeBCCAUYyf9IjAaSABqA6sxUwc9J3nWDnpO8iwd9JzkWTvoOYm5O+gvwr/poGenZ+2g5yTP2kHPSZ6lg56TPG8HPTs8awc9p3jWDnpOklM66MV+Mn8H/eIn2dNBlznouYCmaaOAUY9YtDjN7w1fTBohhBBCCJGVpIMuhBBCCCFyvWz8u0JmJxeJCiGEEEIIkYPICLoQQgghhMj1zPlHELObdNCFEEIIIUSul4f65zLFRQghhBBCiJxERtCFEEIIIUSuJyPoQgghhBBCiCwhI+hCCCGEECLXU3lo2Fk66EIIIYQQIteTKS5CCCGEEEKILCEj6EIIIYQQItezkBF0IYQQQgghRFaQEXQhhBBCCJHr5aU56NJB/w/ZEW6V3REyLdAzKbsjZNruiNx1nD1sw7M7QqZtP9Q1uyNkWmCVv7M7QqaEn/9fdkfItF25rO0BdC5RPLsjZErxT4OzO0KmLR+R3Qkyp4i9bXZHyLXyUgddprgIIYQQQgiRg8gIuhBCCCGEyPVUHhpClxF0IYQQQgghchAZQRdCCCGEELleXvpLonloV4QQQgghhMj9ZARdCCGEEELkenloCrp00IUQQgghRO6XlzroMsVFCCGEEEKIHERG0IUQQgghRK4nI+hCCCGEEEKILCEj6EIIIYQQItezyEMj6NJBF0IIIYQQuZ5McRFCCCGEEEJkCRlBF8/s9P4Qlv2yBM2gUaNlLRp1bGqyfNuizexbswcLnQX2Dva83rMTTh7OLyTb7h2nmPjtcvQGA2071OCtdxubLL9/P5nhA+Zx6uRVHBzsGPldV7x8nImLvUP/nrMIOXGF1u2q0at/ewASE+4zoNcsrl6JRqezoF4DPz7+snWW5Q/ZF8LSn5dgMGjUalWLJp1Mj+35Y+dZ+nMQNy5cp9vAt/CvH5C67J/pywnZexKAZl2aU7lRlSzL+cDRPSHMmrgUg8FAw5dr0bZbE9P9OXKevyctJfT8DT4d1o2ajfxNlt+9k0ifLt9SLbAC3Xu+muV5c2vmJ/n1uw9o1aQykdG3qNasT7bl0DSNCWMWsXN7MDY21gwZ1Y2yfoUylAsJDmXYwFncS0yibmB5evZ7DaUUG9YeYtrPq7h0IZwZc3vhV6EIAMlJekYOmc2pkCvokw20bluDd3q0MHv+cwdCWDN1CQaDgSotalHvjWYmy3cv2cyhtbux0FmQ38Getl92xtHDmbDzV1n500Lu3U1EWSgC32xOhQZZ3/Y0TWPUqGls3XoQG5t8jB37BeXLl8xQ7ocf/mLp0s3cuhXP4cMLU5+fO3c1c+asxMLCAjs7G0aM+JSSJQtnaeb65dwZ/FolLCwUC3Zd5tf1ZzKUaV3Zhy9al0UDTl2L48sZBwD4pl15GlXwxEIpdpyKYPiiY1ma9YHDu0/xxw/G80WTtjXp8Jbp+SL48Hn+/GEZl8/f4OsRXand+OH5YsSX0zhz4jLl/IvRf8J7WZZR0zTGj1mY0vasGDrqLcr6Zfy3DAkOZejAv1LbXq9+r6OUYtL4JWzbehwrSx2+hdwYMrIbBQrakZykZ8SQv1Panp6X2tbknR4ts2w/zElG0MV/jkFvIGjKIt4d9QE9p/flyJZDhF8OMynjXdKXz6f05Oup31Ax0J+Vvy1/Idn0egMTRgfx/S/vMndpL9avPsLF8+EmZf5Zso8CBW1ZtLIvHbvV56eJqwCwtrbi/U9a8GnPNhm22/ntBsxf3oeZC77k2OFL7N5+KkvyG/QGlkxexPujP+Cb3/tyaPMhwtIdWyd3Rzr16UyVxqYdgJN7grl29io9p/bmi8lfsWXhZhLvJGZJzrR5Z0xYQp8J7zNu9jfs3nCIqxdN87p6OPHBgE7UafboDsui6aspG1A8S3OmlRszP82shVtp99bY7I7Bru0nCQ2NZMmqIfQf2omxI+Y9stzYEfMZMLQzS1YNITQ0kl07jB8qS5T0ZtzEHlSuWsKk/IZ1h7h/P5l5QQOYteAbghbu5Pq1aLNmN+gNrPp5IV2Gf8Anv/bjxNZDRIaa1gvPEr68P6kXH/3cl3L1Atjwh/G8ZpXPmld6duHjX/vRdcRHrJ0WRGL8XbPme5Rt2w5y6dJ11q2byogRnzB06C+PLNeoUQ0WLpyQ4fmXX27AP/9MYdmyH3nvvVcZM+b3LM1roWDYG/688/MuWozcwMtVfSnpWcCkTFG3/HzUvDSvf7+NlqM2MiKlE16lmDNVi7vQevRGWo7aQKUiTtQs5ZqlecH4njJ9/BIG/NCDiXP7sGPdYa6kO1+4eTjx6aCOBDavnGH9dl0a8vmQzlmec+f2YK6ERhC0aigDhnZhzGPa3pgRcxk4tAtBq4ZyJTQite3VrF2W+UEDmRc0kMJF3fnzt7XAw7Y3P2ggfy/ox5KFO8ze9sTTSQddPJMrpy/j6u2Ki5crllaW+DeoTPCu4yZlSgaUwtrGGoDC5YoSFxn3QrKdPBGKb2FXfHxdsLKypGnLALZtDjYps31LMK3bVgWgUbOKHNh7Fk3TsLWzxr9KMfLlM/0yycbWmqo1jKNSVlaWlCnnQ0R41uxP6INj6208tpUbVubETtNj6+zpgndxb1S6K2DCLodTvFIJdDod+Wzz4VXcm1P7Q7Ik5wPnQ0Lx8HXF3ccFSytLajWpzMHtJ0zKuHk5U7ikN+oRwxkXT10h7uZtKlYvk6U508qNmZ9m575T3IyNz+4YbN18jJfa1kApRUX/Yty+nUBUurYfFRnHnTuJVPQvhlKKl9rWYOsmYyesWAlPihbzyLBdpRQJCfdJTtaTeO8+VlY68tvbmDX7tTOXcfZ2w8nLFZ2VJeXrV+HUbtO2V8y/FFYp5zXfskW5FRULgIuvOy4+7gAUcHEgv6M9d+Ky/t9j48Y9vPJKY5RSBASU5datO0RE3MxQLiCgLO7uGb/BtLe3S/09ISExy0cc/Ys6cznqDlei75Kk11hx6CrNKnmZlHmzTlFmbbvArYQkAKLj7wOgAfmsLLCytMDaUoeVThF1617WBgbOnQzF09cFTx/je0q9ZpXZv830PcXd25mipR59vqhUvTS2dvmyPOfWzcdo3bZmmrZ396ltr3XbmmzZdBSAWnX9sLTUAVCxUjEiwmONKylITLiXpu1Zmr3tZRVlocz+k12kg/4ESqmvlVInUn6+VEoVVUqdUkrNVkqFKKUWKaXsUspWVUptVUodVEqtVUp5pTy/RSn1rVJqn1LqjFIq8AmvV1QptV0pdSjlp06aZd8opY4rpY4qpcamPFdSKbUh5blDSqkSj9v284qLisPBzSn1sYObI7eiH99h3b9mD2Wrl8uqOCYiw2/h7uGY+tjdw4HIiLh0ZeLwSCljaanD3t6GuNhnG+26fSuBHVtPUq1Wxq+RzSEuKg5H94fH1tHNkbgnHNu0fEp4c2r/Ke4n3ic+Lp5zR84RGxmbJTkfuBkZh4u7Y+pjZ3dHYp7xw5jBYGD2lOV0/rRtFqV7tNyYObeIDI/Fw/Nh/XX3cHz4Rp8iIjw2XRt1JDJdmfSaNKuMra01rRoN4OVmg+nSvQkODvnNmBxuR8dR0PVhroKujtx+Qts7vHYPJatlPK9dO30ZfbIeZ6+sH90ND4/G0/Ph63h6uhAenrnRzdmzV9K0aQ+++24GAwd+YO6IJjwdbLgRk5D6+EZMAh4Opp29Yu72FHO3Z8FX9VncswH1yxk/+By+eJM9Z6PYO6oVe0e3YltIBOfDb2dpXjCeL1xNzhcORL+gAafMiAyPxTNN2/PwcHpk2/NI0/Y8PJwe2faWB+2iTj0/AJo2q4KNbT5aNupHm2YD6dq9qdnbXlZRyvw/2UU66I+hlKoKvAPUBGoBPQAnoAzws6Zp5YBbwMdKKStgMvCapmlVgT+AUWk2Z6lpWg3gS2DIE142AmimaVoV4E3gx5QsrYB2QE1N0/yBcSnlZwM/pTxXB7jxiP14Xyl1QCl1YO2c1Zk/EP/CoQ0HuHrmCg1eb/z0wjlccrL+/+zdd3gU1dvG8e/JJiEJ6T2h9xJ6rwGkCIoURUHA9lOxICoqKkV6Bwt2QEFUOghBqvTQew29JbRUSCjpu+f9Y2PIJpREEkLyPh+vXGZnntm9dzIze+bsmYGhn83m+Z7NKFbcI7/jZFGpXmWqNKjCtx98w59jfqd01dL5esb/IOv+2kbNxlUsGsuPu4KYuTAIOXIBK4MVqzaMIWj1CGbP2sCli9H5lufwhj1cOR1Gk26WY5FvXotjyeQ/6dy/J8qqYHyk9ur1NOvWTeeTT17hp5/m53ccrA1WlPZ2pOeULXzw2x7G9qyNk70NpTyLUt7HiSZDVtN48CoaV/SifrnH7zhc0P06dRUGg4EOHRsAcPTIBQwGK1ZvGMey1aP4c9a6fN33/r+Si0TvrRmwRGt9G0Ap9RfQHLiotd6WVvMn8D6wGqgGrE37usuAZWP5r7T/7wNK3+c1bYDvlVK1ACNQMW16G2Cm1joeQGt9TSnlBBTTWi9Jm3bXgcda62nANICg0FU6O2/8blw8XYiLup7+OC4qFmcPlyx1p/efZMPcf3h7cj+sbR/N5uXl42zRaxAZEYeXt0umGhciImLx9nUlNdXIrVuJuLg68CDjRy6mRClPerx0zy8+HpqLpwuxkXfWbWxULC53Wbf30rZXO9r2agfAH2N+x6u4d65nzMjdy4WYyNj0x9ciY3Hzyl7e00dDOXn4HOv+2kZiQjKpKanYORShxztZrwHITQUx8+NswdzNLF20HYCq1UoREX5n+83cWw5Ze9UjI2LxylST2eqVe2nStCrWNgbcPZyoWassx0PCKF4i93qpnTxc0oesANyIjsXpLvveuQMn2TJ/La9O6Ie1zZ3jWlJ8InOGTeOJV56meOXSuZYrs9mzV7BggXl8cPXqFQgPv9NYCg+PwcfnvzVan3468J5j2HNLeFwifm726Y/93OyJiLP8uAqPTeDghWukmjSXYuK5EHmLMl5FaVjBiwMXrhGfbARgc0g4tcu4s+ds3o6HdvdyIdrieBGHRzaPF3nNvO+ZmyBVq5UiPMO+FxFx/a77XkSGfS8i4rrFvvf30h1sDT7KT798kD5cZ83KPTS22PfKcTwkNFf3vbwiF4n+/5a5kasBBYRorWul/VTXWrfLUPPvoDkj9z8p6g9EADWBeoBtLmV+aMUrlST6cjTXrsaQmpLKoc0HqNq4mkXN5TOXWDxlAa+MfBNHN6d7PFPuqxJQgouh0Vy5dI2UlFTWrT5I85ZVLWqatazKymX7ANi49gh1G5S/69jBjKZ+t5rbNxP48NO8HdpQolJJoi5HE5O2bg9sOkC1JtUevCDmi9xux90G4Mq5K1w9f4VK9fJ2nHTZyiUIvxRF5BVz3p3rD1C3Wfby9h3em2//GsqUxV/Qs+8zNG9f75E0dAti5sfZCy+2YM7igcxZPJCWT9RgxbLdaK05cug8jo72eGZqzHh6uVC0qB1HDp1Ha82KZbtp0arGfV/D18+dPbtPApAQn8TRwxfuOlb9YRSrWJKYK1FcD4/BmJJKSPB+KjWy3C6unr3E8u/m02PoGxR1vXNcM6akMn/UL9RsXZ+qzWrlaq7MevV6mqCgbwkK+pY2bRqxdOkGtNYcPHgCJyeHu441v5cLF66k/75p015KlfLPi8jpDodep7SXI8U9HLAxKDrWKc66w5Zf9v5z6AoNK3gB4FbUltLejoTFxHPlejwNy3tisFJYWykaVvDkTHjeD3EpX6UEVy9GE3ElhpSUVLauPUC95gF5/rrZYd73BjFn8SBaPlGDlct25WjfW7lsV/q+t31rCL/PWMtX372Nnf2d5oaPnzt7Lfa987m+74kHU1r/507VQk0pVQf4DfPwFgXsAl4C9gNNtNY7lFK/AMcxD285BryUNt0GqKi1DlFKbQI+0VrvVUp5Anu11qXv8ZpfA5e01l8qpV4DZmitlVKqPTAUaKO1jldKuaf1ou8ExmutlyqligCGf3vZ7+ZhetABju8+xt8/LcFkMlH/yYa07tmONbNWUrxiSQIaV2PaZz8Sfv4KTu7OALh6u/HayDcf5iVp7puSrbrtW47zzcRlmIwmOnZpwKt9WjPthzVUqVqc5q0CSEpKYcSgeZw6cRlnFwdGTeyVPmSla/ux3L6VSGqKEUcne6ZMfZOiRYvQud0YSpXxxtbWfBFNtx5N6fRcwwdm2RFpk+P3eWzXMYJ+NK/bBu0b0rZXO1b9tpISFUtSrUk1wk6EMXP4ryTcSsDaxhond2c++/VzUpJT+OrtyQAUcbDj+Q+fp1j54jl6bR97U47zHtx+jD++DcJkNNGiYwO6vNKWRdNXUaZyCeo2r8bZ42F8PXAm8TcTsLG1xsXdiYmzP7N4js0rdnP+xMVHdsvC/M7cvM6fufVWAJj1XT+aN66Cp5sTkdFxjPpqEbPmb8q15484+79s1WmtmThmATu2HsfO3oaho3qn3yqx53PjmLN4IADHjoYyYsifJCWm0KR5VQYMMt/qbeO6Q0wet5Dr127h5GRPxcrF+G7ae8THJzFyyJ+cO3sVNDzTpREv/a/N/aKwPMyY4/d5ek8Iq6cuQZtM1GrXiMAe7dj4x0r8K5SgUqPq/D7oByIvXMHR3dzwcfFy48Vhb3J4wx6Cvp6DV6k7Fzx26d8T33I52/96lsvZnYG01owc+TNbtuzH3r4IY8d+QPXqFQDo3Pl9goK+BWDixJksX76ZyMhreHu78/zz7ejXryejR09jx46DWFtb4+zsyNChb1GhQqlsv37Z90IeXJRJy6o+fNGtBlYKFu4M5cc1p/jw6SocCbvO+iPmu6MMfrY6gVW8MWnND2tOsnzfZawUjOxeiwblPdFaE3w8kjF/HXnAq2W1bFTOj8n7th9n5tdLMZk0T3RsQLfX2jB32mrKVy5O/cBqnDkWxoTPfuN22vHC1cOJKXPNtzsd8tb3XA6NJDEhCUfnorw7+AVqN6qc7dcu5Wj/4CL+3ffms33rMezsbRk26qUM+95Y5iweBJj3vX9vs9ikeQCfDnoBpRRdOgwjJTkFF1dHAKrVKM2gYT2Jj09kxJA/OH82HK01z3RpzMv/a3vPHABONq0fi77rRou35nqjdudzzfLlvUkD/T6UUh8B/35K/QIsxTycZS9QlzuN8vi0YSnfAi6Ye8m/0VpPz2EDvQKwGHOv/Gqgr9baMW3e58DLQDKwUms9KK1+KuAJpADPa63P3ev9PGwDPT9kt4H+OPkvDfT89F8a6CLncruBntey20B/nPyXBnp+y2kDPb/9lwZ6fvsvDfT8lN0G+uNEGui5T8ag34fW+ivgq38fK6VKA6la6953qT0IBN5lessMv0dznzHoWuvTQMbvfT/LMG88MP4u9QX/SkwhhBBCiIf0GN8jIcekgS6EEEIIIQq8wnSRqDTQc0BrfQHz3VoeilLqSWBCpsnntdZdH/a5hRBCCCFEwSYN9HygtV4DrMnvHEIIIYQQhYUqRPcmLERvRQghhBBCiIJPetCFEEIIIUSBJ2PQhRBCCCGEeIw86B8gLEhkiIsQQgghhBCPEelBF0IIIYQQBV4h6kCXHnQhhBBCCCEeJ9KDLoQQQgghCrzC1IMuDXQhhBBCCFHgFaYGugxxEUIIIYQQ4jEiPej/j7Qv7pnfEXIsPCE8vyPkWGt/t/yOkCNJxrj8jpBjqgD+c3ERZ/+X3xFyxKfcjPyOkGO3Qgfmd4QcK2j7367JhvyOkGMGZcrvCDlSs+/1/I6QY+em5XcCMyvpQRdCCCGEEELkBelBF0IIIYQQBZ70oAshhBBCCCHyhPSgCyGEEEKIAs9K6fyOkGukgS6EEEIIIQo8GeIihBBCCCGEyBPSgy6EEEIIIQq8wtTrXJjeixBCCCGEEAWe9KALIYQQQogCrzBdJCo96EIIIYQQosCzUrn/kx1KqfZKqZNKqTNKqc/vU/ecUkorpeo98L1k/20LIYQQQggh/qWUMgA/AB2AqsCLSqmqd6lzAj4AdmXneaWBLoQQQgghCjyrPPjJhgbAGa31Oa11MjAP6HyXulHABCAxu+9FCCGEEEIIkYlSqo9Sam+Gnz6ZSooBFzM8vpQ2LeNz1AFKaK1XZPd15SJRkYXWmglj/2BL8EHs7IswamwfqlYtk6XuWMh5hgyaSlJiMs0Da/HZoJdQSjHgo++4cP4qADdvxuPk5MDCJWNJSUll+NBfOH7sAkajiWc6NeONPp1yJfOe7Sf4aXIQJqOJ9l0a0uO1JyzmJyenMmnoXE4fv4STiwODx7+Er787AOdOX2HKmMXE305EKcX3f3yAbREbZv6wirUr9nLrRgLLto7NlZwZmdfzbLYGH8LO3pZRY9+kStXSWeqOhZzni0G/kJSYTLPAmnw2qBdKmQfGzflzLfPnrsfKShHYohb9P+lOSkoqI4bO4PixUIxGI890asrrfZ7Jlbxfjl/M9i3HsLOzZejoXlSuWiJL3fGQMEYOmU1SUgpNmlfl48+fQynFujUHmP7TKi6ci2Dm3I+pGlDSYrnwq9fo3nksb77bgd6vtn7ovOmZxy1i25YQ7OxsGTbmpXtmHjHkD5ISU2jaPICPB3ZLy7yfaT+u5MK5CH6b+wlVq5UCIDXFyOhhszlx/CLGVBNPdWrAa28++f8ub079POktOrSuTVTMDeq1/fSRv/6DaK0ZO2YmwcH7sbcrwthxfakaUDZL3Tdfz2FZUDBxN26xb/+fjyRXXhyTAU6dDGPk8BncvpWAslLMXTCSIkVsczX/zm0nmDJhGSaTiY5dG/DS61mPz6MHz+Pk8Us4uzgwcmJv/Iq5s2fHKX6aspLUFCPWNgb69u9I3YblczVbRju2nuCbCcswmkx0erYBL98l58jB8zhx7BIuLg6MnmTOGRd7m0Ef/8Hxoxd5qnM9PhnUFYDEhGQGf/IHly7GYDBY0axFVd798Kk8y/+vwAAfhnavhZWVYsHW8/y8+qTF/CEv1KRRJS8A7G0NeDgVodaHy/I816OQF/9QkdZ6GjDtvy6vlLICvgJezcly0oMustgafIjQ0HCWr/6SoSNeZ/SI3+5aN3rkTIaNfIPlq78kNDScrVsOAzDpq34sXDKWhUvG0qZtfVq3rQ/AP2t2k5Kcyl9B45m3cBSLFmzg8uWoh85rNJr4fvwSxnz7BtMXDWDTmgOEngu3qFm9dBeOzvb8FjSQZ3sF8uu35pNYY6qRCUPm8v6g55i+cACTp72DwdoAQKPAqnw364OHzncvW4MPExYazt+rJzJ0xGuMHjHrrnWjR85i2MjX+Hv1RMJCw9mWtp537zrOpg37WbhkFEv+HsfLr3UAYO2aPSQnp7I4aAxzF45g0YJNubKet285xsXQKBav+IKBw7ozYfSCu9ZNGL2AQcN7sHjFF1wMjWLH1uMAlKvgx8SvX6d23XJ3Xe6bSUto3CzLsL2HzhwWFsVfK4cxaPiLjB81765140fNZ/Dwnvy1chhhYVFs33rMnLm8PxO/eTNL5nX/7Cc5OZV5Swbzx4LPWLJwG1cux/y/y5tTfyzcTOeXxz/y182u4OADhIZeZfWa7xgx8i1GjJh+17pWreoxf8G4R5Yrr47JqalGBn72E18Me40lf09gxqzBWFvnbr+d0Wjiq7FLmPzj6/y55BPWrT7I+bMRFjXLl+zGydme+cs/p3vvQH76ZiUALq5Fmfjta/y++GOGjOrBqMFzczVb5pxfjl3CVz+9ztyln7B2Vdacf/9lzrloxef0eCmQH9Jy2tra0Kfvk7z3cccsz9vzlRbMX/YpsxZ8yOEDF9ix5USevQcwN1BH9KzNa99u5clha3imfgnK+zlZ1IxecIiOo9bRcdQ6Zm04w5oDl/M006OklM71n2y4DGTsSSmeNu1fTkA1YJNS6gLQCFj2oAtFpYH+iCilhiulPsnvHNmxccM+nuncDKUUNWuW5+bN20RFXbeoiYq6zq1bCdSsWR6lFM90bsbG9XstarTWrFmziw5PNQZAKYhPSCI11UhSUjI2NtY4FrV/6LwnQ8LwL+GBX3EPbGysadGuFts3hVjU7NgcQtuO5n0hsHUNDuw+jdaafTtPUaaCH+Uq+gPg7FoUg8G8W1SpXgoPL+eHzncvGzfs55nOTVFKUaNmeW7ejCcqKtaiJioqltu3EqmRvp6bsmH9fgAWzlvP/97oiK2tDQAeHuasSkFC+npOwdrGkCvrOXjjEZ7q1AClFNVrluHmzQSio+IsaqKj4rh9K5HqNcuglOKpTg3YvMHcSChT1pdSZXzu+tyb1h/Gv5gHZcv7PnTOjDZvPMzT2cl8+07mpzNmLudL6btkVkqRkJBMaqqRxKRkbGwMFHW0+3+XN6e27T7Btdhbj/x1s2vD+j107tzCfOyrVZGbN24TFXk9S13NWhXx8nZ7ZLny6pi8Y9sRKlYsQaXK5m9aXF2d0o9/ueX40TCKl/CkWNrxuU37WmzNdHzeujGEDp3qAtCybXX2pR2fK1Yphqe3CwBlyvuQlJRCcnJqrub717GjYRQvaZkzeKNlzi2bQngqLWerttXZu8uc097Blpp1ylCkiOXJjZ29LXUbmHv8bWysqVSlGJERlvtzbqtZxp3QyFtcjL5NilGzfM9F2tb0v2f9Mw1K8vfui/ecL7JlD1BBKVVGKWUL9ADSv5LQWsdprT211qW11qWBnUAnrfXeuz+dmTTQH3NKqUc+DCky8jq+vh7pj3183ImMsPwwiIy4jo+Pu2VNpg+yfftO4uHhQqnS5kZX23YNcLAvQusW79Gu9Ye88tpTuLg6PnTe6Mg4vHxc0x97+bgSc5dGzb81BmsDRR3tuREbz6WwKJSCgX2n8W7Pr1kwa+ND58muyMjr+GRrPbtZ1qSt59ALEezfd5Je3Ufwv5fHcvTIOQDatKuPvX0R2rT4gCdb9+eV1zrkynqOjIzDx9c1/bG3jyuRkXFZarx97l+TWXx8Er/PWMcb73R46IyZRUXE4uN7Z/15+7gSGRFrURMZEZslc1Smmsxat62Nvb0tHVoN5pm2Q+n1amtcXIr+v8tb2ERGXMPXL8M+6etBRMS1fExkllfH5Auh4SilePvNCbzw3GBm/Lo817NHRd7AO8Nxw8vbhahMjdSoyLj0Gmtr88ljXGy8Rc2mdUeoWKUYtrZ585EYFXEj037lQlSmY1dURBw+PndyOt4l573cvJHA1s3HqNco74boAPi62nP1WkL646uxCfi43b2Dxt/dgRKeDmw/EZmnmR6l/LjNotY6FXgPWAMcBxZorUOUUiOVUv95HK800P8jpVRppdQJpdRspdRxpdQipZSDUuqCUsozraaeUmpThsVqKqV2KKVOK6XevM9zt1RKbVFKLQOOKaUMSqlJSqk9SqnDSqm3MtR+ppQ6opQ6pJTK8t1xxosbfpm+JBfXwIOtWrEjvacG4OiRc1hZWbFu03es+ucrZv22kksX8/fAYEw1cfTgeT4f3Yuvfu3Lto1HObD7dL5myq5Uo5G4uNv8OW8o/T/pzoCPfkBrzdEj5zBYWbF20zes/OdLfv9tdb6v5/uZ/uMqXnypJQ4ORfI7SraFHLmAlcGKVRvGELR6BLNnbeDSxej8jnVPBS2vyBuZj8nGVCP7959i3MR3mfXnUDas28vOHUfzMeHdnTsTzk/frODTL57L7yj/SWqqkaGfzeb5ns0oVtzjwQs8Is/UL8GqfZcxFZ5/2yffaK1Xaq0raq3Laa3HpE0bqrXOMrhfa93yQb3nIBeJPqxKwOta621KqRnAuw+or4F57FFR4IBSaoXW+so9ausA1bTW59OuGI7TWtdXShUBtiml/gEqY76VT0OtdbxSyj3zk2S8uCHJuOeeu+G8OWtZvNDcexxQvSzh4XfGp0ZEXMM7Qy8ugLePm0XPUkTENbwzfOWbmmpk/bo9zFs4Kn3ayhXbadq8BjY21nh4uFC7dkVCjp6jeAnve8XKFk9vF4sexKiIWDy8XCxrvMw1Xj6uGFON3L6VgLOrA54+LlSvXRYXN3NvYv2mlTl94hK1G1R4qEz3Mm/OOv5auBmAgOpliMjWer5uWZO2nn183Wndtp55OESNclhZKa5fv8mqFTtp0rx62np2plbtCoQcPf+f1vPCucEsXbwDgKrVShIRHps+LzIiFm9vy/Xs7e1i0eN7t5rMjh65wIa1B/n+62XcvJmAlVLY2trwQs/AHOcFWDB3M0sXbU/LXIqI8DvrL3PvM2TtpY5M207uZ/XKvTRpWhVrGwPuHk7UrFWW4yHmr/ILe97CZs7s1SxcuA6A6tXLE341wz4ZHmPRK/0oPYpjso+vO3XrVcLNzTxGuXlgTY4fu0CjxtVy7X14eTsTmeG4ERUZh5ePS6YaFyLDzdt6aqqR27cScXF1AMzb96D+sxgyugfF8nB79fJxzrRfxeGV6djl5eNCREQs3r7mnLcy5Lyf8SMXU6KUJz1eap7bsbMIj03Az/1Oj7mfqz0R1xPuWtuxfnGGzTmY55kepcLU61yY3kt+uKi13pb2+59AswfUB2mtE7TW0cBGzPfOvJfdWuvzab+3A15WSh3EfIN7D6AC0AaYqbWOB9Ba/+fvYnv0bJt+EdETrevyd9BWtNYcOnQGJycHvLwsPwy8vNxwdLTn0KEzaK35O2grrZ6omz5/546jlCnjb/G1rJ+fB7t3msf0xccncvjQGcqUvffYuOyqVLUEly9Gc/VyDCkpqWz+5yCNWwRY1DRuEcDa5eYT1uD1h6lV3zxOs17jSlw4E05iQjLGVCNH9p+75zjp3NCjZxsWLBnFgiWjaNW6Dn8HbUNrzeFDZ3B0ssfLy9Wi3svLlaKOdhxOX8/baPVEHQBaPVGHPbvNF2BeuBBOSooRNzcnfP082L3TfNFgfHwSRw6dpUxZv/+U9/kXA5m96DNmL/qMFk/UYOWy3WitOXLoPI6Odnje5USoqKMdRw6dR2vNymW7CWxV/b6vMX3WhwStGU7QmuH06N2CV99s+58b5wAvvNiCOYsHMmfxQFo+UYMVFpnt75656J3MK5btpkWrGvd9DV8/d/bsNt8ZISE+iaOHL9x17HdhzFvY9OzVniVLJ7Nk6WRat65PUNBm87Hv4Cnzse8RjjXP6FEck5s2rcHpUxfTr1nZu+cE5cpb3B3uoVUOKMHFsGiuXLpGSkoq61YfpGkLy4vBm7asyqpl+wDYtPYIdRqYj883byQw4L0ZvPPBU9SonfWuNbmpSkAJLoZa5mze0jJns5ZVWZmWc+PaI9RNy3k/U79bze2bCXz4ae7csexBDl+4TmlvR4p7OGBjUHSsX4J1h65mqSvr64SLgy37zz36i8XzkpXSuf6TX6QH/eFk/stpIJU7Jz6Zr8K6W/293M7wuwL6aa3XZCxQSuXJfdKaB9ZiS/Ahnm7/MXZ2towac+eWn893HZR+e67BX7zKkEHTSEpKplnzmjQLrJlet3rVTouvUgF6vNiWLwZPo+szn6G1pnPXQCpWsrzV3n9hsDbw3qddGfTedExGzZOd61O6nC+zflpNxaolaNwigPadGzDhi7m82nkcTi4ODBrbGwAnZwee7R1Iv5engIIGTavQsLn5oDx9ynI2rj5AUmIKPTuMon2XBrz8Vu6t8uaBNdkafJiO7QdgZ1eEkWPeSJ/3QtcvWLDE3NM1+ItX+GLQdJKSkmnavAbNAs2Nsa7PBjJ0yC8822kQNjbWjBr7JkoperzYmqGDf6HrMwNBQ+euzXNlPTdtXpXtwSE8+9RI7Oxs+WJ0r/R5vbpNYPaizwD4dMgL5tssJibTpFlVmqStz43rD/Hl2EVcv36Lj96dSoXKxfhu6oO+dHrIzIEBbNsSQtcOI7Czt2HoqN7p83o+N445iwcC8NmQFxgx5E+SEs23hkzPvO4Qk8ct5Pq1W/R/92cqVi7Gd9Pe4/kXAxk55E9e6DwaNDzTpREVKj18w6ag5c2pWd/1o3njKni6OXFm1/eM+moRs+ZveuQ57iWwRR2Cgw/Qvl0/7OxsGTO2b/q8rl0+YcnSyQBMnvQHK5ZvJTEhmVYt3uK5bq15r98LeZYrr47Jzi5FefmVDvR8YSgoRfPAmgS2qJ2r2a2tDXw0sAsfvTMdk8nE010aULa8L7/8sIbKAcVp1jKAjl0bMGrwPLp3HI+zswPDJ5qPLYvnbeNyWDQzp61l5rS1AHz9Ux/cPB7+mpq75fx4UBc+fGc6JqOJjmk5p/2whipVi9O8VQDPdG3AiEHz6Pb0eJxdHBg18c4xsGv7sdy+lUhqipHgDSFMmfomRYsW4bfp6ylVxptXu38DQLceTen0XMNcz/8vo0kzfO5BZn3YHCsrxcJtFzh99QYfdqrKkdDrrE9rrD9TvwTL98jFoY8zpbUMPvovlFKlgfNAE631DqXUL5gvDugAfKm1XqWU+hqorbVuqZQaDnQhwxAXoNHdhrgopVoCn2itO6Y97gM8BTyvtU5RSlXEfAuf5sBQoM2/Q1zu14t+vyEuj6vwhPAHFz1mfOy98jtCjiQZ8/auAnnBfFtZkZd8ys3I7wg5dit0YH5HyLFUU1J+R8iRGylZe2Mfd4Y8uDd2XqrXLzm/I+TYuWndHou13Hvz5lxv5/zZokW+vDf5lHs4J4G+SqnjgBvwEzACmKKU2gsYM9Ufxjy0ZScw6j7jzzP7BTgG7FdKHQWmAtZa69WYb+WzN234S4G4jaMQQgghhLg3GeLycFK11r0zTdsCVMxcqLUent0n1VpvAjZleGwCBqX9ZK4dDzy+//KHEEIIIcQjUJh6nQvTexFCCCGEEKLAkx70/0hrfQHzP936nymlqgN/ZJqcpLXOuytIhBBCCCEKoez8w0IFhTTQ85HW+ghQK79zCCGEEEIUdPl5W8TcJkNchBBCCCGEeIxID7oQQgghhCjwCtMQF+lBF0IIIYQQ4jEiPehCCCGEEKLAK0y9ztJAF0IIIYQQBZ5cJCqEEEIIIYTIE9KDLoQQQgghCjy5SFQIIYQQQgiRJ6QH/f+Rz/bczO8IOTaijk1+R8ixofvi8ztCjhQxGPI7Qo69XjEhvyPk2PbIgrUt3wodmN8Rcsyx1Lj8jpBj0za8mt8RcsTVtmBtxwXR2WmV8jtCgVWYetClgS6EEEIIIQq8wjQspDC9FyGEEEIIIQo86UEXQgghhBAFntxmUQghhBBCCJEnpAddCCGEEEIUeIXpIlHpQRdCCCGEEOIxIj3oQgghhBCiwCtMvc7SQBdCCCGEEAWeDHERQgghhBBC5AnpQRdCCCGEEAWektssCiGEEEIIIfKC9KALIYQQQogCrzCNQZcGuhBCCCGEKPAK07AQaaCL+4o6HMLx2QvQJk3xFk0p1/FJi/lhG4IJXb8ZZWWFdZEiBLzWC6difsSevcDR32abi7SmfJeO+NarlWc5tdZ8Of4vtm85hp2dDUNH96Jy1RJZ6o6HXGTkkNkkJaXQpHlVPv78WZRSrFtzgOk/rebCuQhmzv2IqgElAYiNvc3Aj2Zw7GgYHTs3ZMDgbnmSP+JwCEf+WAAmTcmWTan4jOV6Pr8+mPPr0tazXRFq/q8XzsX8iDxynGMLlmBKNWJlbSCgx7N4BVTOk4z3cvVQCAd/X4Q2mSjTqilVOrWzmH9m3RbOrg1GWSmsixSh7hs9cSnu90iy7dl+gp8nB2E0mejQpSHdX33CYn5yciqThs3l9PFLOLs4MGjcS/j6uwNw7vQVvh27mNu3E7FSiu9+/wDbIjbpyw7rP4Orl2OYtmBAnmQ/s/c4q6f+hclkos6TjWj2QluL+Tv+2sj+NTuwMlhR1MWRTh/2xNXHnfCzl1jxw0KS4hNRVorm3dtRrUWdPMl4P1prxo6ZSXDwfuztijB2XF+qBpTNUvfN13NYFhRM3I1b7Nv/5yPPeT8/T3qLDq1rExVzg3ptP83vOACc3XuMNdP+QptM1GrXmKaZtoudSzZwcM0OrAwGHFwc6fhhT1y93YmNvMai0b+gTRqj0Uj9ZwKp+1SzR5L5xJ7jBP34FyaTpmGHRjzRo43lezp8lmU/LeHquSv0GvwyNQNrpc9bPn0Zx3cfA6Btr3bUavlotuWClllrzZgx0wnevBc7uyKMG/8hAQHlstR9/fUfBC3dyI0bt9h/YEH69Jkzl7Jo4VoMBivc3V0YM/Z9ihXzzvPc4t6kgS7uSZtMhPw+jwafvo+duxvbh4/Hu3YNnIrdaVz5Na5PyScCAYjYf4gTcxdR/5N+OBX3p8nwz7EyGEiMjWPbkNF4166OlcGQJ1m3bznGxdAoFq8YwtHDoUwYvZCZcz7KUjdh9AIGDe9BtRql+PCdqezYepwmzatSroIfE7/+H+NGLrCoL2JrzVvvPcXZM1c5dzo8T7Jrk4nDs+bR5LP3sXd3Y/PQ8fjWqYFzhvVcvEl9yrQ2r+er+w8RMnsRjT/th62TIw0/ehd7N1duXLzMjknf8eS34/Mk592YTCb2z1xAi4H9sPdwZd2QifjXqW7RAC/VpB7l2zQH4PK+wxz6czGBn7+X59mMRhM/TFjCuB/64OnjQr+Xp9AosCqlyvqm16wJ2oWjkz2/LR3IpjUH+PW7FQwe9xLGVCMTv5jLgJEvUq6iPzdib2OwvrPtbt1wBDuHInmW3WQ0sfLHhbw05l2cPV2Z/uGXVGpUHa+Sd7L7litOnymfYGNny54VW1k3YxndBr6KTRFbunzcC49i3tyMiWPa+5MpX7cydo4OeZb3boKDDxAaepXVa77j8KHTjBgxnfkLxmWpa9WqHr16daB9+36PNF92/LFwMz/PWsMvX7+b31EA83ax6qeF9BrdF2dPV37tP5mKjarhVfLO/uZbtjivfzMAGztb9q3YwoYZQTz7+Ws4uTnz6pf9sbaxITkhianvjqNiw+o4ebjkeeYl3y2iz4R3cPF0Zcp7X1G1cTV8S93Zlt28Xek+oCebF26wWPbYrhAun7nERz8PIDU5lZ8++Z7K9atiV9ROMmcSHLyP0AtXWPPPVA4dOsmI4T+xYOHkLHWtWtWnV6+naf/k2xbTq1Qpy6LFX2FvX4S5c1YyedJvfP3N43FSmhNWcpGoeBhKqdJKqaP3mf+qUur7HD7nBaWU58OnuyP23AWK+njh4O2FlbU1fg3rEbn/kEWNjb19+u/GpOT03w1FbNMb46aUFFB5OzAseONRnupUH6UU1WuW5ubNBKKj4ixqoqPiuH0rkeo1S6OU4qlO9dm84QgAZcr6UqqMT5bntXcoQq065Shia5NlXm65fta8noumredijeoRvu8B6zltdbqWLoG9mysATsX9MSanYExJybOsmV07cwFHHy8cfTwxWFtTsnFdruw7bFFj45A5+6MZJHgyJAz/Eh74FffAxsaalu1qsWNziEXNjs0htO1YD4DmrWtwcPdptNbs23mKMhX8KFfRHwBn16IYDObDZUJ8En/N3kzP11vnWfbLp0Jx9/fCzc8Tg401AYF1OLHjiEVNmZoVsLGzBaB45dLciI4FwKO4Nx5pPV9OHi4UdXXkdtytPMt6LxvW76Fz5xYopahZqyI3b9wmKvJ6lrqatSri5e32yPNlx7bdJ7gW++jX3b1cuct2cWqn5XZRumbF9O2iWIbtwmBjjbWN+TiWmpKK1o+mIRN2MhQPf088/DyxtrGmVsvahGy3zOzu64F/WX9UpmNDRGgEZauXw2AwUMS+CP5l/Tmx97hkvov163fRuUsrlFLUqlWZGzduExl5LUtdrVqV8fZ2zzK9UaMa2NubOx1q1qpEeHh0nmcW9yc96DmgzHui0lqb8jvLo5B4PRY79zsfnHbubsSePZ+lLnTdJs6vXo82Gmnw2Yfp02PPnufIL3+QEHONGn1ezbPec4DIyFh8fF3TH3v7uBAZGYenl0uGmji8fTLWuBIZGZtnmbIr8Xos9hnWs727G9fvsp7Prd3E2dXrMaUaaTrwwyzzr+45gEvpEhhs8u5kIrOE67E4eGTM7sq1Mxey1J3+ZzOnVm7AlJpKy8EfPJJsMZFxeGX4e3t6u3LiaKhFTXSGGoO1gaKO9tyIi+dSWBQKGPTeNOKu36ZFu1q88EorAGb9tJrneregSFojKC/cjInD2fNOdmdPVy6fDL1n/YE1Oylfr0qW6ZdPhmJMNeLul6vn7tkSGXENXz+P9Mc+vh5ERFx7bBvjBcHNmFiL7cLJ05Ur99kuDv6zk3L1qqY/jou6zvzhU7l2NYo2/+uc573nAHHRcbh63fmbu3q6Enri3pkz8i/rz9o/1tCiWytSkpI5c/AM3hm+RcorBTFzREQMfr5e6Y99fT2IiIi5a2P8QRYtWktgYN3cjPfIFKaLRKUH/QHSertPKqV+B44CXyil9iilDiulRqTVjFdK9c2wzHCl1CfKbJJS6qhS6ohSqnsOXrqEUmqTUuq0UmpYhudeqpTap5QKUUr1yUb+PkqpvUqpvUeWLs/By2dfqTYtaTl5FJVe6MLZZSvTp7uWK0PzcUNpMvwzzi1fjTH50fXsFkZl27ak7ZejCOjehVNBKy3m3bh0hZD5S6j1Wq98Snd/Fdq14OlvRlDjxS4cW7o6v+M8kNFo4uih83w2uhdf/tqX7ZuOcmD3ac6evMzVSzE0bVU9vyOmO7xhD1dOh9Gkm2WP/s1rcSyZ/Ced+/dEWcmh/v+bIxv2cPV0GI2fu3PdhYuXG31++Jy+04dyeP1ubl2/kY8JH6xSvcpUblCF7z/4hj/H/k6pqqWxMjzeLbCCmDmjZUEbCTl6htffeDa/o/wnVir3f/KL9KBnTwXgFcAZ6AY0wDzIYJlSKhCYD3wD/JBW/wLwJPAsUAuoCXgCe5RSwdl8zQZANSA+bbkVWuu9wP+01teUUvZp0xdrrWPu9SRa62nANIAPd27I0Xeadm6uJF6785V04rXr2KUNp7gbv4b1CJk1N8t0R38/DHZFuHX5Ci5lSuUkwn0tnLuFpYt3AFC1WkkiwmPT50VGxOHtbdk75O3tQmRExppYvL1dcy3Pf2Xn5kpChvWc8ID1XKxRPQ79NteifveUqdR561WK+njdc7m8YO/mSnxMxuyx2Lu73rO+ZOO67J8x7xEkAw9vF6Iy/L2jI2PxzLRNeKbVePm4Ykw1cvtWAs4uDnh5u1C9dllcXIsCUL9pZc6cuISdQxFOHb/Ey8+MwWg0EXvtFgP6/Mikabk7RtnJwyV9aALAjejYu/Z2njtwki3z1/LqhH5Y29w5nCfFJzJn2DSeeOVpilcunavZ7mfO7NUsXLgOgOrVyxN+9c6hKSI8Bh+fnPfmiTucPFwttoub99kuts7/h5cnvJ8+rMXyeVzwKuXHxZCzVGlWOy8j4+LpQmzUnWNEbHQsLp7Z77lv06sdbXqZLzyfPfZ3vB7BhYsFJfPs2StYuOAfAKpXr8DV8Kj0eeHhMfj4eNxr0bvavv0gP/+8kD/+HIttHg7rFNkj3SrZE6q13gm0S/s5AOwHKgMVtNYHAG+llL9SqiZwXWt9EWgGzNVaG7XWEcBmoH42X3Ot1jpGa50A/JX2XADvK6UOATuBEphPHvKES5lS3I6IJD4qGlNqKld37cW7dg2Lmtvhkem/Rx46ioOP+UAUHxWNyWgEICE6httXI7D3zNnB4kGef7E5sxd9yuxFn9LiieqsXLYHrTVHDl3A0dHOYngLgKeXC0Ud7Thy6AJaa1Yu20Ngq2q5mum/cC1bitvhkdyONK/nyzv34lvHcj3fyrCeIw4epaiveT2n3I5n5+QfqPpCFzwqZr1iP6+5lyvFrfBIbkVGY0xNJWzHPvzrWvYu37x6J/vVAyE4+j6aOwNUqlqCyxejCb8cQ0pKKpv+OUijwACLmkaBAaxdvheALesPU7N+eZRS1G1ciQtnwklMTMaYauTw/nOULOvDM92aMHf1UH7/ezBf/tKXYiU9c71xDlCsYklirkRxPTwGY0oqIcH7qdTIclu9evYSy7+bT4+hb1DU1Sl9ujEllfmjfqFm6/pUbVYr17PdT89e7VmydDJLlk6mdev6BAVtRmvNoYOncHJykOEtD8m/YkmuXbbcLio2tNzfws9eZOX38+g+9E2L7eJG9HVS0q4TSrgZz8WQc3gUz3rdTW4rUakk0ZejibkaQ2pKKgc3HSCgcfaOuyajids3bgNw5dwVrpy/QsV6lfIyLlBwMvfq9TRLg6awNGgKrds0JGjpRrTWHDx4AicnhxwNbzl27CzDhv7Ijz8NwcPDNU/yPgqGPPjJL9KDnj230/6vgHFa66l3qVmIuXfdF3OP+sPK3NutlVItgTZAY611vFJqE5Bnl4ZbGQxUfakHeyZ9hzaZKB7YBKfi/pz6629cSpfEp05NQtdtIibkBMragI2DAzXefAWA66fOcm75GpS1AaUUAS/3wNbJMa+i0rR5VbYHH+PZp0ZhZ2fLF6N7ps/r1W0isxeZr0b/dMjz5tssJqbQpFlVmjQ3j8/cuP4QX45dzPXrt/jo3alUqFyc76a+A0DnJ0dw+1YiKSmpbN5wmG+nvUvZcrk3ptDKYKDGyz3YkbaeSwY2wbm4P8cX/41rmZL41anJ+bWbiAo5gTIYsC3qQJ0+5vV8bu0mbkdEcXLpSk4uNQ97afJpP4q4OOdavgdlr/PqCwSP/8F8m8WWjXEp7s/RhctxK1uSYnVrcOafzUQcPYGVtQGbog40eOelR5LNYG2g74CuDOo3HZNR065TfUqX82XWz6upWKUEjVsE0L5zAyYOncurXcbh5OzAoLG9AXByduDZXoH0e3kKCmjQtAoNm1W9/wvmIiuDgafeeY4/h/yUdju9RniX8mPjHyvxr1CCSo2qs/bXIJITk1g47jfAPHzhxWFvErLlAKFHzxJ/M56D63YD0KV/T3zLFX9k+QECW9QhOPgA7dv1w87OljFj00cB0rXLJyxZar7DxORJf7Bi+VYSE5Jp1eItnuvWmvf6vfBIs97LrO/60bxxFTzdnDiz63tGfbWIWfM35VseK4OB9u90Y+4XP2IymajVthFepfzY9McK/CuUpGKj6qz7NYiUxGQWj5sJgLOXG92H9SH6YgTrfllq/hTT0OjZJ/Au7Z/nmQ0GA13fe47pA39Gm0zUf7IhvqX9WP3bSkpULElAk2qEnQxj1vBfib+VwLGdIfzz+2oG/PI5RqORH/p/C4Cdgx09P+uNIQ+vZSrImVu0qEfw5n20a/sWdvZFGDv2/fR5XTp/wNKgKQBMmjiT5cuDSUhIokXga3R7vi39+vVk0sTfiI9P4MMPJgDg5+fFTz8PyfPc4t7Uo7qSu6BSSpUGlmutqyml2gGjgNZa61tKqWJAitY6UikVAEzHPJSlhdb6qlLqWeAt4CnAHdgLNMTcqF6utb7rKblS6lVgLOYhLgnALuB/QDHgDa31M0qpysBBoL3WepNS6gJQT2t9z0uvczrE5XEwok7yg4seM2MO5t3Fg3mhiKHgXfP8esWE/I6QY9sjC9ZXxt3L5n3jLbc5lsp6G8fH3bQNr+Z3hBxxtS14x4uCpmPJrP9ewONOUemxGGg/9uDaXG/nDKrVNl/em/Sg54DW+h+lVBVgR9qtlW4BvYFIrXWIUsoJuKy1vpq2yBKgMXAIc4/4p1rr8LRG/4PsBhYDxYE/tdZ7lVJHgLeVUseBk5iHuQghhBBCiEJEGugPoLW+gLkn+9/HU4Ap96itnumxBgak/dzzOe/yPL8Bv91lehLQ4R7LlL7X8wkhhBBCFHaF6TaL0kAXQgghhBAFnjTQRa5QSj0JTMg0+bzWumt+5BFCCCGEEPlPGuj5SGu9BliT3zmEEEIIIQq6AvRvQj2Q3AddCCGEEEKIx4j0oAshhBBCiAJPxqALIYQQQgjxGLFSBe6fe7knGeIihBBCCCHEY0R60IUQQgghRIFXmIa4SA+6EEIIIYQQjxHpQRdCCCGEEAWeIb8D5CJpoAshhBBCiAJPhrgIIYQQQggh8oT0oP8/0qdyfH5HyLGvjtrld4Qc61muYK1nPwdTfkfIsbjkgte30LNc2fyOkCNJxrj8jpBj0za8mt8RcqzPE7/ld4QcuRU6ML8j5Fhccmh+R8iRFNOt/I6QY7aPySFZbrMohBBCCCGEyBPSgy6EEEIIIQo8g4xBF0IIIYQQQuQF6UEXQgghhBAFXmG6i4s00IUQQgghRIFXmBroMsRFCCGEEEKIx4j0oAshhBBCiAJPetCFEEIIIYQQeUJ60IUQQgghRIFnKET/UJE00IUQQgghRIFXmIaFFKb3IoQQQgghRIEnPehCCCGEEKLAK0wXiUoDXWTb/h0n+PWrpZhMJtp0ashzr7S2mB9y4Cwzvg7iwpmrfDyqN01a18yXnFcPhrD/90Vok4myrZpStXM7i/knVqzn3MbtKCsrijg70vCt3hT18gDg4JylXD1wFICAZztQsnHdR5L54M4T/PbNUkxGE08805AuL1uu22MHzjJrShBhZ6/ywYjeNHrCvG4vnLrML5MWkxCfiJWVFV1faU2TNrXzJOOubSf4duIyTCYTT3dtQO//PWExPzk5lTFD5nHq+CWcXRwYPqE3fsXc2bPjFFO/XUlKihEbGwPv9O9I3QblAVi36gB//LoBpcDTy5khY3ri6lY01zLv23GC6V+at9m2nRvyfKZtNiU5la+Gz+HsiUs4uRTl0zEv4ePvTmqqke9GL+DsyUsYjSaeeKoez79qXnbpnM38E7QLpRSly/vywRc9sC1ik2uZM9JaM2bMNDZv3oedXRHGj/+AgIDyWeq+/vp3li7dyI0btzhwYGH69LlzVzFnzgqsrKxwcLBj1Kj3KF++ZK5nnDD2D7YEH8TOvgijxvahatUyWeqOhZxnyKCpJCUm0zywFp8NegmlFAM++o4L568CcPNmPE5ODixcMhaAUyfDGDl8BrdvJaCsFHMXjKRIEdtczX927zHWTPsLbTJRq11jmr7Q1mL+ziUbOLhmB1YGAw4ujnT8sCeu3u7ERl5j0ehf0CaN0Wik/jOB1H2qWa5m+y9+nvQWHVrXJirmBvXafprfcbLQWjN2zEyCg/djb1eEseP6UjWgbJa6b76ew7KgYOJu3GLf/j/zJMuOrSf4ZkIQRpOJTs825OXXsx7TRg6ey4ljl3BxcWD0pJfwK+YOwKxf1vP3kt0YrKzo/3kXGjWtROj5SL749E7Wy5diePPdJ+nxUiC//LiGoL924ebmCMDb73egSfMqD5Vfa834sb+b9z07W0aPfZuqAVn3vZCQcwwZOJWkJPO+9/mgl1FKceL4BUYNn0FScgoGgxVDhr5G9Rrlmfnr36xYvh0AY6qRc+cuE7xtKi6ujg+VV+SMDHER2WI0mpg26S+++OZNvp33KVv/OcDFc+EWNV4+bvT7ogeB7fKmgZgdJpOJvTMX0OKzvnSY/AVh2/cSd+mqRY1b6RK0G/MZHSYOpkTD2hycsxSAK/uPcv38RZ4cP5C2owZwYvk6UuIT8j6z0cSMyX8x8Ms3+WrOp2xbd4BL5y3XraevG+8O6UHTtpbr1tbOlr5DX+TL2Z8y8Ks3mTUliNs3cz+z0Wji63FLmPTD6/z+1yesX32QC2cjLGpWLNmNk7M9c//+nBd6B/LzlJUAuLgVZfyU15i16GMGjerBmMFzAUhNNfLtxCCmTH+b3xZ+TLkKfvw1b1uuZv554l8Mn/ImP8z/lOA1BwjLtM3+s2wXjk4OTPtrEJ1fDOS375cDsHXdIVJSUvl+7gC+/r0/q5fsIOLKNWIi4/h7/la+ntWfH+YNwGjUBK89kGuZMwsO3seFC1f455+pjBrVl+HDf7prXatWDVi48Mss0595pgV///09QUHf8sYbzzFu3K+5nnFr8CFCQ8NZvvpLho54ndEjfrtr3eiRMxk28g2Wr/6S0NBwtm45DMCkr/qxcMlYFi4ZS5u29Wndtj5g3j4GfvYTXwx7jSV/T2DGrMFYW+dun5LJaGLVTwt5ccTbvP3TIEKC9xEVZnm88C1bnNe/GUCfHz6nStOabJgRBICTmzOvftmfN7//jP999THbF67jZkxcrub7L/5YuJnOL4/P7xj3FBx8gNDQq6xe8x0jRr7FiBHT71rXqlU95i8Yl2c5jEYTX45dwlc/vcHcpQNYu+oA589aHh/+/msXTs72LFoxkB4vBfLDNysAOH82nHWrDzJnyQC+/ukNJo/5C6PRRKky3vy+8CN+X/gRM+d9iJ2dLS1aV0t/vh69A9PnP2zjHGBL8EFCQ8NZsforho14g9EjZ9y1bvSIGQwf+QYrVn+Vtu8dAuCryXN5u++zLFoyjr79uvHVZPOx+bXXn2HRknEsWjKODz7qTr36VQpM49xK5f5Pdiil2iulTiqlziilPr/L/I+UUseUUoeVUuuVUqUe+F5y/vbFw1JKlVZKHf2Pyw7K9Hj7wz5ndpw+FoZfcQ98i3lgY2NNs7a12R0cYlHj7e9O6Qr+qHz8junamQs4+Xrh6OOJwdqako3rcnnvYYsan4CKWKf1wnmWL0PCtVgA4i5fxatKeawMBqztiuBSshhXDx3L88xnjoXhU9wDn2IeWNtY06RNbfZsybRu/dwpVd4fq0zr1r+kF34lvABw93LB2c2RG7G3cj3j8aNhFCvhiX9x89+/9ZO12LrJMuPWTSG0f8b8jUOLNtXZv/s0WmsqVi6Gp7cLAGXK+ZCUlEJycipo0EBiQjJaa27fTsLTyznXMp8OsdxmA9vVZlembXbX5qO0froeAE2fqMGhPebMSplzGVONJCemYG1twKGoHQAmo5HkpBSMqUaSEpNx93TJtcyZrV+/ky5dnkApRa1alblx4zaRkdey1NWqVRlvb/cs0x0dHdJ/T0hIROXBrrlxwz6e6dwMpRQ1a5bn5s3bREVdt6iJirrOrVsJ1KxZHqUUz3Ruxsb1ey1qtNasWbOLDk81BmDHtiNUrFiCSpXNn2Ourk4YDLn7kXXlVCju/l64+XlisLEmILAOp3YesagpXbMiNnbm40WxyqW5ER0LgMHGGmsb8zcnqSmpaP143D1i2+4TXMuDY0Bu2bB+D507tzBvL7UqcvPGbaIir2epq1mrIl7ebnmW49jRMIqX9KBY2jGtTftaBG+0PD5s2RTCU53Mx4dWbWuwd5f5+BC8MYQ27Wtha2uNf3EPipf04NjRMItl9+46TbESHvj5Z90vc8vGDfvo1Ll52rqswM0b8VnWZVRk2r5XqwJKKTp1bs6GtH1PKbh9y9yhc+tWwl3X98oVO+jwVJM8ew+5zaB0rv88iFLKAPwAdACqAi8qpapmKjsA1NNa1wAWARMf9LzSQM8BZZbf68yiga61fiR7zrXIODx9XNMfe3i7EBOV/71FmSVcj8XB485Bxt7DlYTrsfesP7dpO341zfuRa6nihB86RmpSMkk3bhF57BTxMVk/OHLbtag4PDKuWy8Xrv+HdXvmWBipKUZ8innkYjqz6MgbePu6pj/28nEhKjIuU01ceo21tYGijnbExcZb1Gxed4SKVYpha2uNtY2Bjwc9y6vPf0nXtqO4cC6Cp7s2yLXMMVEP3mZjom6k1xisDRR1tOdG3G2atq6Jnb0tLz81gv91Gk3X3i1xcnHAw9uFrr1b8r9Oo3j5qREUdbSjTqNKuZY5s4iIGHx9PdMf+/p6EBERk6PnmD17BW3avMmkSb8xZMhbuR2RyMjr+Pre2eZ8fNyJjLDcbyIjruPj425Zk6khsW/fSTw8XChV2heAC6HhKKV4+80JvPDcYGb8ujzXs9+MicXZ0zX9sZOn6317wQ/+s5Ny9e587sZFXWda3/F8++pQmnRrjZNH3p2sFRaREdfw9cuwvfh6EBGR9aQzr0VFxOGd4fjg7eOa5ZgWFRGHT1qNtbUBR0d74mLjiYqMw8fieOhKVITlsmtXH6Rth1oW0xbN20bv575k9ND53LhheWz8LyIjruPrm2G/8s26X0VG3mXfS9s/Pxv4Ml9OnkObVu/x5cTZfNi/u8WyCQlJbNt6iLbtcu+4XEg1AM5orc9prZOBeUDnjAVa641a63//6DuB4g960vxubD720nqmTyqlfgeOAl8opfakfU0xIq1mvFKqb4ZlhiulPklr0E9SSh1VSh1RSnW/1+tkes1XlVLfZ3i8XCnVUik1HrBXSh1USs1Om/f4dpU85i5s2c21c2FUfqYNAH41quBXK4B1wyaz/buZeFYog7IqGLvI9egbfD9yDu8M7oHVY5r5/Jlwfp6ygk+GPAdAaoqRpQt38Ou8D1my9gvKVfDjzxkb8jml2amQMKysFLNWDuOXpYNYOnsz4ZdjuHUjnl2bQ/hl6WBmrRxGYkIyG1fty++499Wr19OsWzedTz55hZ9+mp/fce5p1Yod6b3nYB77un//KcZNfJdZfw5lw7q97NyRZ18SPtCRDXu4ejqMxs/dGafs4uVGnx8+p+/0oRxev5tb12/kWz7x+EhJSWXrphBat7tzHdaz3ZuwaMVAfl/YH09PZ76d/Hc+JjSbP28dn37+Eus2fs+Az19i6JBpFvM3b9xP7doVC8zwFsibIS5KqT5Kqb0ZfvpketliwMUMjy+lTbuX14FVD3wvOX/7/y9VAH4E+mNe6Q2AWkBdpVQgMB94IUP9C2nTnk2rqwm0ASYppfz+awit9edAgta6lta6V3aWybhhLfht9X99ady9XYiOiE1/HBMZh4fX49dbZO/matHrnRATi72ba5a68CMnOLZ0Nc0/eRuDzZ0L/AK6tqf9+EG0GtwPrcHJzzvPM7t7uRCTcd1GxeGWg3UbfzuR8Z/8Qo8+HahY7YHD2v4TT29nIsNj0x9HRcTh5e2SqcYlvSY11cjtW4m4uJqHWERGxDL4o1kMHtWDYiXMPcKnT14BoFgJT5RStGpXk6MHQ3Mts4fXg7dZDy/n9BpjqpHbtxJwdinK5jX7qdO4MtbWBlzdnahSszSnj13k4O7T+Pi74+LmiLW1gSatanD88IVcywzmHu/Ond+nc+f38fJyJzw8On1eeHgMPj7/7RuSp58OZN26nbmScd6ctTzfdRDPdx2Ep5cr4eF3evUjIq7h7WP5Vbm3j5tFL2lExDW8M3ydnppqZP26PTzZoWH6NB9fd+rWq4SbmxP29kVoHliT48cu5Er+fzl5uKYPWQG4GR17117wcwdOsnX+P7wwtE/6sBbL53HBq5QfF0PO5mq+wmLO7NV07fIJXbt8gpe3G+FXM2wv4TEWPbyPipePC5EZjg+REbFZjmlePi5EpNWkphq5dSsBF1cHvLxdiLA4Hsbi5XNn2R1bT1CpSnHcPZzSp7l7mIdoWVlZ0fm5hhw/YjkkJrvmzv6Hbl0H0q3rQLy8XAkPz7BfhVvuVwDe3nfZ99L2z2VLg2mTds3Hk+0bcvTIOYtlV63cQYenC87wlryitZ6mta6X4Wfag5e6O6VUb6AeMOlBtdJAz55QrfVOoF3azwFgP1AZqKC1PgB4K6X8lVI1geta64tAM2Cu1tqotY4ANgP1H2XwjBvWC6+2/8/PU6FKCa5ejCbiSoy5d2DtAeoHBuRi0tzhXq4UN8MjuRUZjTE1lbAd+yhWt7pFzfXzF9nzy1yaf/I2di53DqAmk4mkm+YvJGJDLxMXdhnfGg9/Ic+DlKtSgvBL0UReiSE1JZXt6w5Qr1n21m1qSipffj6TwA710u/skhcqB5TgUlg0Vy5fIyUllfVrDtK0heUQu6YtqrL6b3Nv8uZ1R6hT3zze+OaNBD7rN4O3PniK6rXv3GHAy9uZC+ciiL1mXud7d56iVNncOyGqULUEVy5GE37ZvM0G/3OABs0t12vDwADWrzCPx9y24TA16pnHaXr5uHF47xkAEhOSOHk0jOKlvfHydeXE0VASE83j5g/tOU2J0rl7Eter19MEBX1LUNC3tGnTiKVLN6C15uDBEzg5Odx1rPm9XLhwJf33TZv2UqqUf65k7NGzbfqFnU+0rsvfQVvN6+PQGZycHPDysmwkeHm54ehoz6FDZ9Ba83fQVlo9cecOSTt3HKVMGX+LoTJNm9bg9KmLJCQkkZpqZO+eE5Qrf79OqZzzr1iSa5ejuB4egzEllZDg/VRsaHm8CD97kZXfz6P70Dcp6nrneHEj+jopSckAJNyM52LIOTyK++RqvsKiZ6/2LFk6mSVLJ9O6dX2Cgjabt5eDp8zbSx6ONb+XKgEluBgazZVL5uPDutUHad7S8vjQrGUAK5eZjw8b1x6mbgPzMa15ywDWrT5IcnIqVy7FcDE0mqrV7twdae2qrMNboqPufLuyacNRylb4b311L/Zql34B5xOt67EsaEvaujyNo5N9lnXp5Z227x00j59fFrQlfd/z8nZj757jAOzaGULJUne235s349m797jFfloQ5NNFopeBEhkeF0+bZkEp1QYYDHTSWic96EnlNovZczvt/woYp7WeepeahUA3wBdz7/nDSMXy5MnuIZ/voRmsDbz5ybOMeH8aJpOm9TMNKFnWlzlTV1O+SnEaBFbj9LEwJnz6G7duJrBnyzHmTV/Dt/Me7W2+rAwG6r76ApvH/YDJZKJsy8a4lPDnyMLluJcpSbF6NTg4ZwmpiUlsm/ILAA4e7gQOeBudamT9iK8BsLG3o1HfV7AyGPI8s8HawP8+epax/adhMmpadmxAibK+LJi+mrKVi1OveTXOHAvjy4G/cftmAvu2HmPhr2v4cvan7Fh/iOMHz3HzRjybV+4B4N3BPShdMXcbMtbWBj78vAufvDMdk8nEU50bUKa8L7/+uIZKVYvTrGUAT3dtwJjB83jxmfE4OTswfIL5S56/5m/jclg0s6auZdbUtQB8+XMfPL1deO2ttrz3+k9YW1vh6+fGwJHZGgWWLQZrA28PeJZhadtsm2caUKqcL39OXU2FKsVpGFiNtp0a8tWwOfR5diyOzg58OuYlAJ5+vilTRs7j3e7m63jadKxPmQrmxm3T1jX48KWvMBgMlK1UjPZdG98zw8Nq0aIemzfvpW3bPtjbF2Hs2A/S53Xu/D5BQd8CMHHiTJYv30xCQhKBga/y/PPt6NevJ3/+uZwdOw5ibW2Ns7MjEyZ8mOsZmwfWYkvwIZ5u/zF2draMGnPn29/nuw5Kv2Xi4C9eZcigaSQlJdOseU2aBd45oVy9aqfF8BYAZ5eivPxKB3q+MBSUonlgTQJb5O4doqwMBtq/0425X/yIyWSiVttGeJXyY9MfK/CvUJKKjaqz7tcgUhKTWTxupjmXlxvdh/Uh+mIE635Zav5U0NDo2SfwLp07J0APY9Z3/WjeuAqebk6c2fU9o75axKz5m/I7VrrAFnUIDj5A+3b9sLOzZczY9NGhdO3yCUuWTgZg8qQ/WLF8K4kJybRq8RbPdWvNe/1euNfT5pi1tYGPB3Xlw3emYzJqOnapT9nyvkz7YTVVqpageasAnunagBGD5tLt6XE4uzgwamJvAMqW96V1u5r07DIJg8GKTwZ1Tb+AOSE+id07TvHZF89ZvN4PXy/n1IkrKKXw83fjs6HdHvo9NG9Ri+Dggzz1ZH/s7Ioweuyda0y6dR3IoiXmu+AMGfo/hgz8mcS0fa95YC0Aho98g/Fjf8doNFGkiA3DRr6Rvvz6dXto0qQ6Dg753vwoCPYAFZRSZTA3zHsAPTMWKKVqA1OB9lrryOw8qXpcrjx/XCmlSgPLtdbVlFLtgFFAa631LaVUMSBFax2plAoApgOeQAut9VWl1LPAW8BTgDuwF2iIucG9XGtd7S4viVKqGeYrfJthHlITgvmMa5NS6jrgrbVOSau9pbV2zJjzXu/lWOzyAvfHnn+u4B0cupZKzO8IOeLnYMrvCDkWl1zwvvyr6FIxvyPkSJLx8bsI/EEWnH/0Fxs+rD5P/JbfEXLkVujA/I6QY3HJuTd07lFwtMn/E72csrWq+1j8E0ErLq7K9XbO0yU6PPC9KaWeAr4BDMAMrfUYpdRIYK/WeplSah1QHfj3Pq5hWutO93tO6UHPAa31P0qpKsAOZb5f2S2gNxCptQ5RSjkBl7XW//4BlgCNgUOY7yj3qdY6PK0xfT/bgPPAMeA45uE0/5oGHFZK7c/uOHQhhBBCiMLOkE+nCVrrlcDKTNOGZvi9TU6fUxroD6C1vgBUy/B4CjDlHrXVMz3WwIC0n3s+512eRwN3bXxrrT8DPsvw2DE7zymEEEIIIQoGaaALIYQQQogCzyob/7BQQSEN9HyklHoSmJBp8nmtddf8yCOEEEIIIfKfNNDzkdZ6DbAmv3MIIYQQQhR0Be/2AfcmDXQhhBBCCFHgZfO+5QVCYTrZEEIIIYQQosCTHnQhhBBCCFHg5ddtFvOC9KALIYQQQgjxGJEedCGEEEIIUeDJbRaFEEIIIYR4jMhFokIIIYQQQog8IT3oQgghhBCiwJMedCGEEEIIIUSekB70/0f2Rdvkd4QcG1C94G2iay8b8jtCjly8XbDyApRzNuZ3hBwr+15IfkfIkV2TC9524Wpb8I5xt0IH5neEHHEsNS6/I+RY19/fzu8IOTK5wZX8jpBj/g518zsCULh6nQvTexFCCCGEEKLAK3jdk0IIIYQQQmSiCtEYdGmgCyGEEEKIAq8Qtc9liIsQQgghhBCPE+lBF0IIIYQQBV5hGuIiPehCCCGEEEI8RqQHXQghhBBCFHiFqddZGuhCCCGEEKLAU0rnd4RcU5hONoQQQgghhCjwpAddCCGEEEIUeIXoGlHpQRdCCCGEEOJxIj3oQgghhBCiwCtMt1mUBrq4r7N7j7Fm2l9ok4la7RrT9IW2FvN3LtnAwTU7sDIYcHBxpOOHPXH1dif87CVW/biApPhErKysaNq9HQGBdfIsp9aaSePms23LUezsbBk+5lWqVC2Zpe54SCjDhvxGUmIKTZtXY8DA7iil+PG7IDZvOISVlcLN3YkRY17Fy9sVgL27T/LlhAWkphpxdXNk+m+f5Nn7ADi55zh///wX2qip36ERLbu3sZi/ZfFG9qzeiZXBiqIujnT76EXcfNzzNFNmJ/YcJ+jHvzCZNA07NOKJHpYZzx4+y7KflnD13BV6DX6ZmoG10uctn76M47uPAdC2Vztqtcy77eJe9u84wa9fLcVkMtGmU0Oee6W1xfyQA2eZ8XUQF85c5eNRvWnSuuYjzwgQWMWbod1qYGWlWLA9lJ/XnspS81TtYnzwVGU0cOJyHB/+theAzzoH0KqaL1ZKsfVEJCMXHc7zvDu3nWDKhGWYTCY6dm3AS68/YTE/OTmV0YPncfL4JZxdHBg5sTd+xdzZs+MUP01ZSWqKEWsbA337d6Ruw/J5nhcK/rastWbsmJkEB+/H3q4IY8f1pWpA2Sx133w9h2VBwcTduMW+/X8+8pz38vOkt+jQujZRMTeo1/bT/I6TLu7oUS4umA8mE57NmuHbvoPF/KjNm4nctBFlZYVVkSKU6v0S9v7+aGMqF37/g/iwUDCZcG/UGL8OHe7xKg9n97YTfD8pCKPJxNNdGtLzf1n3t3FfzOVU2v42bMJL+Prf+ayIuHqdV5+bxKtvt6P7yy2JDI9l3BdzuR5zE5Si43ON6NazeZ5kzyuFqH0uDXRxbyajiVU/LaTX6L44e7rya//JVGxUDa+Sfuk1vmWL8/o3A7Cxs2Xfii1smBHEs5+/ho2dLZ0/6o17MW9uxsTx6weTKFenMnaODnmSdduWo1wMi2TpylEcPXyecaNm8/vcgVnqxo2awxfDX6JajTK8/853bN8aQtPm1Xj5tXa8268zAHP/3MD0n1YwaFgvbt6IZ/zouXw39X38/Ny5FnMjT/L/y2Q0EfTDIl4f9w4unq583+8rqjSqhk8p3/Qa/3LFee+7j7G1s2Xn31tZ9csyeg5+NU9zZc645LtF9Jlgzjjlva+o2rgavhkyunm70n1ATzYv3GCx7LFdIVw+c4mPfh5AanIqP33yPZXrV8WuqN0jy280mpg26S+Gf/cWHt4ufPrqNzRoHkCJsnfye/m40e+LHgTN3vTIcmVmpWDECzV5+ftthMcmsHRAK9YducqZ8JvpNaW9ivJOu4o8/1UwNxJS8HC0BaBOGXfqlvXgqbHrAVjwUQsaVvBk1+noPMtrNJr4auwSvp7aB28fF97o+S3NWgZQppxPes3yJbtxcrZn/vLPWbfqID99s5KRk3rj4lqUid++hqe3C+dOh/PRO9NZuu6LPMv6r4K+LQMEBx8gNPQqq9d8x+FDpxkxYjrzF4zLUteqVT169epA+/b9Hmm+B/lj4WZ+nrWGX75+N7+jpNMmE2Fz51Dxw/7YuLlxYtxYXGrUxN7fP73GvUEDvFq0ACD20EEuLVxIhQ8+4Pq+fejUFAKGDceUnETI8OG4169PEU/PXM1oNJqYMn4Jk37qg5ePC2/3mkKTFlUpXe7Otrty6S6cnOyZvWwgG1YfYOqUFQyb8FL6/B+/XEbDppXTHxsMVrzz0TNUrFKc+NuJvNXzG+o1rGDxnOLRkTHoD6CUclVK3ffIoZQqrZTqmY3nKq2UOpp76fLWlVOhuPt74ebnicHGmoDAOpzaecSipnTNitjYmRsFxSqX5kZ0LAAexbxxL+YNgJOHCw6ujsTH3cqzrJs3HuLpTo1QSlG9Zllu3UwgKirOoiYqKo5btxOoXrMsSime7tSITRsOAuDoaJ9el5CQlH4avmrlbp5oUws/P3Ovg7uHc569B4CLJ0Px8PfEw88TaxtraraszbEdluu8XK0K2Kat8xJVShMXHXe3p8ozYZky1mpZm5DtlhndfT3wL+uPyvR9Y0RoBGWrl8NgMFDEvgj+Zf05sff4o4zP6WNh+BX3wLeYBzY21jRrW5vdwSEWNd7+7pSu4I+yyr/+mJql3QmNvs3FmHhSjJrl+y/RtoafRU33JqX5I/gcNxJSAIi5lQyABorYWGFjbYWttQEbgyL6RlKe5j1+NIziJTwpVty8Xtu0r8XWTZbrdevGEDp0qgtAy7bV2bf7NFprKlYphqe3CwBlyvuQlJRCcnJqnuaFgr8tA2xYv4fOnVuglKJmrYrcvHGbqMjrWepq1qqIl7fbI8/3INt2n+BabN59NvwXt8+fx87bmyJeXlhZW+NWrz6xhw5Z1Bjs73xmmJKSM3TdKkxJyWijEVNyCspgsKjNLSeOhuFfwgP/tP3tiSdrsS3T/rZtUwhPPlMPgBZtarA/bX8D2LrxKH7F3Cmd4QTaw8uZilWKA+BQ1I6SZXyIjsrbTqncZqVy/yff3kv+vXSB4Qo86NS+NPDABnpBczMmFmdP1/THTp6u3Iy5d2Pw4D87KVevapbpl0+GYkwx4uaXuz0IGUVGxOLje+erO28fV6IiLD+koiKu4+Nz5wPKx8eNyIjY9Mc/TFnKU60/Z/WK3bzzXicAwi5EcONGPH1e/ZJeL4xhedCOPHsPADdi4nDxupPRxdOVG/dpgO9dvZOK9avkaabM4qLjcM2Q0dXTNdsnCf5l/Tm55wTJicncjrvFmYNniI2MzaOkd3ctMg5PH9f0xx7eLsREZS//o+TrYsfV6wnpj69eT8DHxbJ3toy3I2W8HVnQP5DFH7cgsIr5pPjA+WvsPB3NrjEd2DW2A8HHIzkbcZO8FBV5A29f1/THXt4uREVkOkmOjEuvsbY2UNTRjrjYeIuaTeuOULFKMWxt8/4L3oK+LQNERlzD188j/bGPrwcREdceeY7CJCU2Fhu3O58ntm6upMRmPemJ3LiRI4MHcemvxZTo3gMAt7p1sCpiy+FPB3Bk4Of4tG2HddGiuZ4xOjIO7wzHMS8fV6IzHceiM+xvBmsDjo723IiNJyE+ibkzN/LKW+3u+fzhV65x5uRlqlTLOlRUPBoyxOXBxgPllFIHgbVp0zpg7qQarbWen1ZTJa1mFrAE+AP4d698T2u9/UEvpJQqfa/llFKfAb0BE7BKa/25Uqo88DPgBRiB57XWZx/q3f5HRzbs4erpMF6a8L7F9JvX4gj68g86fdQLZfV4nw/2/aALfT/owozpq5g/ZyNvv9cJo9HE8WNh/PxLfxKTUnit1wSq1yxLqdI+D37CPHZg/V4unb7IW5Mer6+s76dSvcpcPBnG9x98Q1FXR0pVLY2VoTCNGny0rA1WlPZ2pOeULfi62TPvw+Z0GLsB96K2lPdxosmQ1QD83q8Z9ct5sOdsTD4nvr9zZ8L56ZsVfP3zm/kd5YFkWxberVrh3aoV13bv4urKlZR57TVun7+AsrKixsSJpN6O5+TkSThXqUIRL6/8jpvut5//oVvv5tg7FLnr/IT4JIZ+Mou+n3SmqOOjHbL1sArTHigN9Af7HKimta6llHoOeBuoCXgCe5RSwWk1n2itOwIopRyAtlrrRKVUBWAuUC8brxV5t+WUUh2AzkBDrXW8UurfU/vZwHit9RKllB13+UZEKdUH6APw2qj3adXjqWy/cScP1/QhKwA3o2Nx8nDJUnfuwEm2zv+Hlye8j7WNTfr0pPgE5g+fSquXn6Z45TLZft3sWjB3I0sWbQWgarXSRITf6TWKjIjFK0NvOZjHFUdk6FWPiLhu0QPxrw4dG/LBO9/x9nud8PZxw8WlKPYORbB3KEKduhU4dfJSnjXQnT1ciIu6kzEuOhZnz6zr/PT+k2yY+w9vTe6H9SPoaczIxdOF2AwZY6NjcblLxntp06sdbXqZe25mj/0dr7ShUI+Ku7cL0Rm+OYmJjMPDK/v5H5XwuET83O58Ne7nZk9EXKJlTWwCBy9cI9WkuRQTz4XIW5TxKkrDCl4cuHCN+GQjAJtDwqldxj1PG+he3s5EhsemP46KjMPLxyVTjQuR4bF4+7iSmmrk9q1EXFzN16VERsQyqP8shozuQbESefdtW0YFdVueM3s1CxeuA6B69fKEX73zd40Ij8HnEV80XtjYuLqScv3O50ny9VhsXO89PMitXn1CZ88GXuPa7t04BwSgDNbYODvjWK4ct0NDc72B7untYvENcFRELJ6ZjmOeafubl48rxlQjt24l4OzqwPGjYWxed5ip36zg1s0ErKwUtrbWdO3RjNQUI0M/mUWbDnUIbF09VzOLnHm8uzQfP82AuVpro9Y6AtgM1L9LnQ0wXSl1BFgIZB33cXf3Wq4NMFNrHQ+gtb6mlHICimmtl6RNS/x3fkZa62la63pa63o5aZwD+FcsybXLUVwPj8GYkkpI8H4qNrTcYcPPXmTl9/PoPvRNiro6pU83pqSycPSvVH+iPlWa1c7R62bXCy+2Yu7iL5i7+AtaPlGLFct2orXmyKFzODra45XpYOXl5YJjUXuOHDqH1poVy3bSopX57hxhoRHpdZs3HKR0GfNFMS1b1eTggTOkphpJSEjm6JHzlCmbdxfMFK9UkpjL0VwLjyE1JZVDmw5QtVE1i5rLZy6x5NsFvDLiTRwzrPNHpUSlkkRfjibmqjnjwU0HCGhc7cELYr4o7/aN2wBcOXeFK+evULFepbyMm0WFKiW4ejGaiCsxpKSksnXtAeoHBjzSDNlxOPQ6pb0cKe7hgI1B0bFOcdYdvmpR88+hKzSsYP7gdytqS2lvR8Ji4rlyPZ6G5T0xWCmsrRQNK3haXFyaFyoHlOBiWDRXLl0jJSWVdasP0rSF5aGvacuqrFq2D4BNa49Qp0F5lFLcvJHAgPdm8M4HT1Gjdu6fzN9LQd2We/Zqz5Klk1mydDKtW9cnKGgzWmsOHTyFk5PDYznWvCApWro0iZGRJEVHY0pN5frePbjWtLyTU2LEnc+MuCNHsPM2d9rYurtz88RJAIxJSebx7L65/5lROaAEl8OiuXrZfBzbsOYgTVpaHseatAhgzd/muzptXneY2vXN+9u3M/oyb+Vg5q0cTLdezen1emu69miG1pqJIxZQqowPL7zUItczPwpK5f5PfpEe9LzRH4jA3NNuBSTev/yhl8sTVgYD7d/pxtwvfsRkMlGrbSO8Svmx6Y8V+FcoScVG1Vn3axApicksHjcTAGcvN7oP68OxLQcIO3qGhBu3ObxuNwDP9O+Fb7nieZK1WWA1tm05QucOQ7Czt2X4qFfS57343CjmLjbfEeLzIS8yfMgsEhOTadq8Gk2bmz+Mv/t6CaEXIlBK4efvzqChvQAoU86PJk0D6PHsKKysFF2ea0r5CsXy5D0AGAwGOvV9jhmDfsZkMlGvXUN8Svvxz6yVFK9YkqqNq7Fq+jKSE5KYPdq8zl293XhlxKMbEmAwGOj63nNMH/gz2mSi/pMN8S3tx+rfVlKiYkkCmlQj7GQYs4b/SvytBI7tDOGf31cz4JfPMRqN/ND/WwDsHOzo+VlvDAbDI8sO5rGYb37yLCPen4bJpGn9TANKlvVlztTVlK9SnAaB1Th9LIwJn/7GrZsJ7NlyjHnT1/DtvEd7CzijSTN8wSFm9W2KlYKFO0M5HX6TD5+uwpGw66w/Ek7w8UiaV/FhzeDWmLRm/NKjxN5OZtWByzSu6MWqQa3RWhN8PJINR8PzNK+1tYGPBnbho3emYzKZeLpLA8qW9+WXH9ZQOaA4zVoG0LFrA0YNnkf3juNxdnZg+ETzfrZ43jYuh0Uzc9paZk4zjyT8+qc+uHk45mnmgr4tAwS2qENw8AHat+uHnZ0tY8b2TZ/XtcsnLFk6GYDJk/5gxfKtJCYk06rFWzzXrTXv9XvhkefNbNZ3/WjeuAqebk6c2fU9o75axKz5m/I1kzIYKNnjRU5P+QZtMuHZtCn2/v5cWRaEQ6lSuNasRdSmjdw4ftx8EaiDA6Vfew0Ar5YtuTDrN0KGDwPAo3ETHIrn/ueewdrA+5915dN3p2MyaTp0rk+Zcr7M+HE1laqWoGnLAJ7u0oCxQ+bSq9M4nJ0d+GJ87/s+59GDF1i7Yh9lK/jxRvevAHjjvQ40av5or3N6GIVpiIv694pecXdKKQ9gv9a6lFLqWeAt4CnAHdgLNASKAV9prVukLfM1cElr/aVS6jVghtZapY0xX661vmsXzX2Waw8MBdr8O8QlrRd9J+YhLkuVUkUAw9160f/1x5k1Be6P3bXU3cfIPc7WXk54cNFjxLoAfo9WztmY3xFyrOOQlPyOkCO7Jj/6xubD2hlp8+Cix8xTJfLuhD8vOJbKegvHx13X39/O7wg5MrlBwbpzCoC/wzOPRdv4eOzyXG/nVHHtmC/vrQB+ND9aWusYYFva7REbA4eBQ8AG4FOtdXjaNKNS6pBSqj/wI/CKUuoQUBm4nc2Xu+tyWuvVwDJgb9qFqP/+SzkvAe8rpQ4D2wG5WakQQggh/l9SefCTX2SISzZorTPfQnFApvkpwBOZampk+P2ztLoLwD0HOGqtT99tubR54zHfLSZzfebXFUIIIYQQBZg00IUQQgghRIGXn/+wUG6TBno+UEo9CUzINPm81rprfuQRQgghhCjoClH7XBro+UFrvQZYk985hBBCCCHE40ca6EIIIYQQosBTqsDdrO6e5C4uQgghhBBCPEakB10IIYQQQhR4MgZdCCGEEEKIx4gqRC10GeIihBBCCCHEY0R60IUQQgghRIFXmHqdC9N7EUIIIYQQosCTHnQhhBBCCFHgyRh0IYQQQgghRJ6QHnTxWLM1OOZ3hByztkrI7wg5EplQ8M7TW/rZ5neEHFs2Kr8T5IxBmfI7wv8Lccmh+R0hR7r+/nZ+R8ixJS//nN8RcuSbUy/md4QCqxB1oEsDXQghhBBCFHwyxEUIIYQQQgiRJ6QHXQghhBBCFHiFqANdetCFEEIIIYR4nEgPuhBCCCGEKPCsClEXujTQhRBCCCFEgVeI2ucyxEUIIYQQQojHifSgCyGEEEKIAk8pnd8Rco30oAshhBBCCPEYkR50IYQQQghR4BWmMejSQBdCCCGEEAWe/EuiQgghhBBCiDwhPehCCCGEEKLAK0Qd6NJAf5SUUrUAf631yvzOkl1n9x5jzbS/0CYTtdo1pukLbS3m71yygYNrdmBlMODg4kjHD3vi6u1O+NlLrPpxAUnxiVhZWdG0ezsCAuvkWU6tNePH/s6W4EPY2dkyeuxbVA0ok6UuJOQ8Qwb+TFJSCs0Da/L5oJdRSnHi+AVGDZ9BUnIKBoOBIUNfo3qNcmxYv5fvv12ElZXCYDDw2cCXqFO3Uq7nP7HnOEE//oXJpGnYoRFP9GhjMf/s4bMs+2kJV89dodfgl6kZWCt93vLpyzi++xgAbXu1o1bLvFvP/zq37xjrf/kLbTRRo11jGnWz3C72LN3A4bU7sLIyYO/iSIf3e+Li7Z4+Pyk+gV/7jqVCwxq0ffv5PMuptWbyuIVs2xKCnZ0Nw8e8TOWqJbPUHQ8JY/iQ30lKTKFp8wA+Gfg8SimmTP6L4M1HsLE2ULyEF8NGv4STswNXLsfwfKeRlCrtA0C1GqUZNKxnrmY/sOMEM75eislkonWnhjz7cmuL+SEHzjLz6yBCz17lo1G9afxEzfR5oz6cxqmjoVSpWYZBX76Rq7ky27H1BN9MWIbRZKLTsw14+fUnLOYnJ6cycvA8Thy7hIuLA6Mn9cavmDtxsbcZ9PEfHD96kac61+OTQV0BSExIZvAnf3DpYgwGgxXNWlTl3Q+fyrP8j+u+Z16vQWnrteE91uvcDOv1JfyKmfexWb+s5+8luzFYWdH/8y40alqJ0PORfPHpn+nLX74Uw5vvPkmPlwL55cc1BP21Czc3RwDefr8DTZpXybX3Enf0KBcXzAeTCc9mzfBt38FiftTmzURu2oiyssKqSBFK9X4Je39/tDGVC7//QXxYKJhMuDdqjF+HDvd4lUfn50lv0aF1baJiblCv7af5lmPXthNMmbAMk8lEx64N6H2XbWTM4HmcPH4JZxcHRkw073t7dpzi5ykrSU0xYm1j4N3+HanbsDzxtxPp+9qP6ctHRcTR7uk6vP9p50f91gTSQH9klFLWQC2gHlAgGugmo4lVPy2k1+i+OHu68mv/yVRsVA2vkn7pNb5li/P6NwOwsbNl34otbJgRxLOfv4aNnS2dP+qNezFvbsbE8esHkyhXpzJ2jg55knVL8CFCQ8NZsfpLDh86w+iRM5kzf2SWutEjZjB85BvUqFmed96ayNYth2geWIuvJs/l7b7P0jywFsGbD/LV5LnM/H0IjRpVo9UTdVFKcfJkGJ/0/5a/V07O1ewmo4kl3y2iz4R3cPF0Zcp7X1G1cTV8S/mm17h5u9J9QE82L9xgseyxXSFcPnOJj34eQGpyKj998j2V61fFrqhdrmbMnHfd1IW8MLIvTh6u/P7xZMo3qIZnhu3Cu2xxXv5qADZFbDmwcgubfgui86evpc/fOnslJQLK51nGf23bEsLFsEiWrBzO0cMXGDdqHrPmZv1AHTdqLkOG96JajdJ88M4PbN96jKbNA2jYuDJ9P+yMtbWBb79awsxf1vD+R+aGZLESnsxZPChPchuNJqZP/ouh376Fh7cLn732DfWbB1CizJ1twsvHjfe+6MGyOZuyLN+5V0uSElNYu3RHnuTLmPPLsUuYMq0P3j4u/O/Fb2neMoAy5XzSa/7+azdOzvYsWvE5a1cd5IdvVjJ6Um9sbW3o0/dJzp4J59yZcIvn7flKC+o2KE9KSir93pjGji0naNy8cq7nf1z3vazrdQrNW1alTLk7uf7+a1faeh3I2lUH+OGbFYye9BLnz4azbvVB5iwZQHRkHO/3mcb8vz+jVBlvfl/4Ufrzd2ozihatq6U/X4/egfR6teVDZ89Mm0yEzZ1DxQ/7Y+PmxolxY3GpURN7f//0GvcGDfBq0QKA2EMHubRwIRU++IDr+/ahU1MIGDYcU3ISIcOH416/PkU8PXM9Z078sXAzP89awy9fv5tvGYxGE1+NXcLXU/vg5ePCmz2/pWmmfW/FEvO+N2/556xbdZCfv1nJiEm9cXEtyoRvX8PT24Vzp8P5+J3pLFn3BQ5F7Zi54KP05V/v8Q2Bravnx9v7zwrTuO3C9F7yhFKqtFLqhFLqN6XUKaXUbKVUG6XUNqXUaaVUA6WUu1JqqVLqsFJqp1KqRtqyw5VSfyiltgF/ACOB7kqpg0qp7vd4vQZKqR1KqQNKqe1KqUpp0w1KqclKqaNpr9MvbXr9tLpDSqndSimn3HrvV06F4u7vhZufJwYbawIC63Bq5xGLmtI1K2JjZwtAscqluREdC4BHMW/ci3kD4OThgoOrI/Fxt3IrWhYbN+yjU+fmKKWoWasCN2/EExV53aImKvI6t24lULNWBZRSdOrcnA3r9wGglOL2rQQAbt2Kx8vbFQCHonaotKtOEuKT0n/PTWEnQ/Hw98TDzxNrG2tqtaxNyHbL9ezu64F/Wf8srx8RGkHZ6uUwGAwUsS+Cf1l/Tuw9nusZM7p6OhRXPy9cfc3bRZXmdTizyzJvqRoVsSli3i78K5XmVtp2ARB+JozbsTcpXTv3G1yZbd54mKc6NUQpRfWaZbh5M57oqDiLmuioOG7fTqR6zTIopXiqU0M2bTgEQKOmVbG2NgBQvUYZIiNiM79EnjhzLAzf4h74FvPAxsaaZm1rsyc4xKLG29+d0hWybhMANepXxN6hSJ7nPHY0jOIlPSlW3JyzTftaBG+0zLllUwhPdaoLQKu21dm76zRaa+wdbKlZpwxFilj2E9nZ21K3gfnkzcbGmkpVihEZYfk3yy2P675nXq8e2Viv9QBo1bZG+noN3hhCm/a1sLW1xr+4B8VLenDsaJjFsnt3naZYCQ/8/N3Ja7fPn8fO25siXl5YWVvjVq8+sYcOWdQY7O3TfzclJWcYp6AwJSWjjUZMySkog8GiNr9s232Ca7F593mWHcePhlGshCf+adtI6/a12Lop0zayMYT2aftey7bV2bfbvI1UrFIMT28XAMqU9yEpKYXk5FSLZcMuRBF77RY162T9JvpxplTu/+QXaaBnT3ngS6By2k9PoBnwCTAIGAEc0FrXSHv8e4ZlqwJttNYvAkOB+VrrWlrr+fd4rRNAc6117bT6sWnT+wClgVpprzNbKWULzAc+0FrXBNoACbnzluFmTCzOnq7pj508XbkZc+8PyoP/7KRcvapZpl8+GYoxxYibX971ekRGXMPX1yP9sY+vO5GZGuiRkdfx8bnzgeTj405kxDUAPhv4El9OnkubVv34cuIcPux/5/xp/do9PPPUJ/R9ZxIjR/fJ9exx0XG4ermlP3b1dCUuOnsNEv+y/pzcc4LkxGRux93izMEzxEbG5nrGjG7FxOKUg+3i8NqdlKlr3i60ycTGGUtp9dqj+co0KiIWX98769bHxy1LIzsyIhYfH1eLmqi7NMSXLdlOk2Z3tu8rl2Po2W0sfV79igP7zuRq7mtRcXh638nk7u1CTFT2tolHKSriBt4Z1p23jwtRkXGZauLS16+1tQFHRzviYuOz9fw3bySwdfMx6jXKm29bHtd9LyoiLtN6dc3GerUnLjaeqMg4fHzvLOvl40pUphOctasP0rZDLYtpi+Zto/dzXzJ66Hxu3Mje3yc7UmJjsXG7c9y1dXMlJfZ6lrrIjRs5MngQl/5aTInuPQBwq1sHqyK2HP50AEcGfo5P23ZYFy2aa9kKsqjIG3hn/Dt7uxCd6e8cHRmXXmNtbaDoXfa9TeuOULFKMWxtLU+U168+yBNP1syTTimRPdJAz57zWusjWmsTEAKs11pr4AjmRnMzzD3kaK03AB5KKee0ZZdprXPSaHYBFiqljgJfAwFp09sAU7XWqWmvcw2oBFzVWu9Jm3bj3/n/Ukr1UUrtVUrt3Tgv70bWHNmwh6unw2j8nOUYuJvX4gj68g+e6d8TZfX4bm7z563j0897s27jdwz4vDdDh0xPn9e6bX3+XjmZKd/15/tvF+Zjyqwq1atM5QZV+P6Db/hz7O+UqloaK8Pjc0AN2biH8DNhNHjWvF0cWLmVsnWr4uTp9oAlHy+/Tl2FwWCgQ8cGAHh6ObN87WjmLBpE/wHdGPLpDG7dyrVzYwGkphoZ+tlsnu/ZjGLFPR68wCP2uO9795KSksrWTSG0bnfnmoVnuzdh0YqB/L6wP56eznw7+e9Hnsu7VSuqjxlL8Wef5epK82fV7fMXUFZW1Jg4kWpjxhKxbi1JUVGPPFthdf5MOD9/s4IBXzyXZd76NQdp06F2PqR6WCoPfvLH49tierwkZfjdlOGxiQeP47+dw9caBWzUWlcDngEeakCj1nqa1rqe1rpeqx45u9DKycM1fcgKwM3oWJw8XLLUnTtwkq3z/+GFoX2wtrFJn54Un8D84VNp9fLTFK+c+1+TzZ39D926DqRb14F4ebkSHh6TPi8i/Bre3paNQG9vNyLSeswBIiKu4Z3Wo75s6RbatK0PwJPtG3L0yNksr1evfhUuXYrk+vWbufo+XDxdiI2606MUGx2Li2fW9XwvbXq146Opn/LWhHdBa7zShhblFUcPV25mY7u4cPAkOxb+w7ND7mwXl0+eZ/+KLfz8xnA2zVhKyMbdbJ61LFfzLZi7mZ7PjaXnc2Px9HIhPPzOuo2IuG7RMwnm3smIDD3mERHX8cpQ8/fSHWwNPsroCa+l9ybZ2trg6mq+oK5KQEmKlfAi7EJkrr0Hdy8XojP0xl6LjMPDK/vbxKPi5eNs8Y1EZEQcXt4umWpc0tdvaqqRW7cScXF98LUo40cupkQpT3q81Dw3I1t4XPc9Lx+XTOs1NhvrNQEXVwe8vF2ICL+zbFRELF4+d5bdsfUElaoUx93jzmhIdw8nDAYrrKys6PxcQ44fsRwS8zBsXF1JuX7nuJt8PRYb13ufoLvVq0/swQMAXNu9G+eAAJTBGhtnZxzLleN2aGiuZSvIvLydicz4d46Mw9PHchvx9HZJr0lNNXI7w74XGRHLoP6zGDy6B8VKWH67febkFYypJipVLZ6n76EwUUq1V0qdVEqdUUp9fpf5RZRS89Pm71JKlX7Qc0oDPXdsAXoBKKVaAtFa6xt3qbsJPGiMuAtwOe33VzNMXwu8lXaxKUopd+Ak4KeUqp82zenf+bnBv2JJrl2O4np4DMaUVEKC91OxoeUFI+FnL7Ly+3l0H/omRV3vvDVjSioLR/9K9SfqU6VZ3pyFv9irHYuWjGPRknE80boey4K2oLXm0MHTODrZ45Wpge7l7Yajoz2HDprH4S0L2kKrJ+qmz9u7xzx+dNfOEEqmXSQWFhqO+csSOBZynpTk1PSGWW4pUakk0ZejibkaQ2pKKgc3HSCgcbUHL4j5IrfbN8zngFfOXeHK+StUrJf7d5nJyK9CSa5fiSI2bbs4vmU/5TNtFxFnL/LPj/N4dojldvHMx6/wzowRvP3LcFr+rwsBrRrQ4pVOuZrvhRdbMGfxIOYsHkTLJ2qwctkutNYcOXQeR0d7PDM1dD29XCha1I4jh86jtWblsl20aFUDgO1bQ/h9xlq++u5t7Oxt05e5fu0mRqMJgEsXo7kYFpnlQ+5hlK9SgqsXo4m4EmPu8Vx7gHrNAx684CNWJaAEF0OjuXLpGikpqaxbfZDmLS2HuTVrWZWVy8zXemxce4S6Dco/8Gvzqd+t5vbNBD78NHe3jcwe133vznqNybBeLf/+zVoGsHLZXgA2rj2cvl6btwxg3eqDJCencuVSDBdDo6la7c6di9auyjq8JTrqzsfVpg1HKVvBj9xStHRpEiMjSYqOxpSayvW9e3CtWdOiJjEiIv33uCNHsPM2X+ho6+7OzRMnATAmJZnHs/v6IqByQAkuhd3Z99avPkizFln3vdVp+96mtUeok7aN3LyRwKfvzeDtD56iRu2snWfrVh2kTaZtpKBQefDfA19TKQPwA9AB87DmF5VSmcf7vg5c11qXxzw6YsIDn/ffxoe4u7SznOVpPdoopX5Le7zo33lAIDADKAvEA3201oeVUsOBW1rryWnLugNrABtg3N3GoSulGgOzMPe8rwB6a61LpzW8JwLtgRRgutb6+7TG+XeAPebx52201ne9euWPM2ty/Mc+syeEf6b9hclkolbbRjTr8SSb/liBf4WSVGxUnT8HfU9U6FUc3cwjepy93Og+rA9HNuzh729mW9zx5Zn+vfAtl7Mz8u5ls/fVttaaMaN+Y9vWw+m3WQyoVhaAbl0HsmjJOABCjp5jyMCpJCYl06x5TQYNeQWlFPv3nWT82N8xGk0UKWLD4KGvERBQhl+n/83fQVuwtjFQpIgtHw/o+cDbLK65lPOvYI/vOkbQT0vQJhP1n2xIm17tWP3bSkpULElAk2qEnQxj1vBfib+VgI2NNU7uzgz45XNSklP4+h3zXWXsHOx47oPnKVY+Z+s4MiHn5+ln94aw4Rfz7Tert2lE4xeeZMvsFfiWL0mFhtWZ/8X3RF24iqO7ebtw8nLjuSGW4/ePrN9F+Omw/3SbxRfKZu88VGvNxDHz2b71GHb2tgwb9RJVq5UCoOdzY9PvwnLsaGj6bRabNA/g00EvoJSiS4dhpCSn4JJ2Uvbv7RTXrz3A1O+XY21tQFkp3ur7NIEta9w3S2gOh8Ds236cmV8vxWTSPNGxAd1ea8PcaaspX7k49QOrceZYGBM++43bNxOwsbXG1cOJKWl3qBny1vdcDo0kMSEJR+eivDv4BWo3ytlFuf4OpmzVbd9ynG8mLsNkNNGxSwNe7dOaaT+soUrV4jRvFUBSUgojBs3j1InLOLs4MGpir/QhK13bj+X2rURSU4w4OtkzZeqbFC1ahM7txlCqjDe2tuYLdLv1aEqn5xo+MMu2CJsH1mSWn/seQFOf1LtON6/XIExGTccu9Xm1Txum/bCaKlVLZFivczOs197p6/W3aetYvnQPBoMVH37aicZpt0xMiE+iy5NjWLxyII5Ody62HDFoDqdOXEEphZ+/G58N7Yanl/Ndc7234+7T7yfuyBEuLpiPNpnwbNoUv6ee5sqyIBxKlcK1Zi0uzp/HjePHzReBOjhQ8sWe2Pv7Y0xM5MKs30i8ehUAj8ZN8H3yyRy//pKXf87xMvcz67t+NG9cBU83JyKj4xj11SJmzd+Ua88feurFbNXt2HKcbyeab7P4dJcGvPxma375YQ2VA4rTrKV5Gxk9eB6nT1zG2dmB4RN74V/cg1nT1vHnrxsoXupOp8JXP/XBzcN8nHvhqXFM+uF1SpXJ/jdC3nadHovxXdeTlud6o9atSMf7vre0dttwrfWTaY8HAmitx2WoWZNWsyOtPRcOeOn7NMKlgf7/yH9poOe37DbQHyf/pYGen/5LAz2/ZbeB/jjJaQM9v2W3gf44+S8N9Px2rwb64+q/NNDzW2430PNadhvoj5PHpYEem7wyDxroT7+F+UYd/5qmtZ727wOlVDegvdb6jbTHLwENtdbvZag5mlZzKe3x2bSa6Hu9bsH7lBNCCCGEECKL3D9PSGuMT3tgYS6TBno+UUq9BnyQafI2rXXf/MgjhBBCCCFy7DJQIsPj4ty5ljBzzaW0IS4uQAz3IQ30fKK1ngnMzO8cQgghhBCFQXYu6swDe4AKSqkymBviPTD/ezkZLQNeAXYA3YAN9xt/DtJAF0IIIYQQ4j/RWqcqpd7DfBMQAzBDax2ilBoJ7NVaLwN+Bf5QSp0BrmFuxN+XNNCFEEIIIUQhkD/XqmqtVwIrM00bmuH3RCBHtyyTBroQQgghhCjwlCp4dyW7l8LzToQQQgghhCgEpAddCCGEEEIUAo/F7dhzhfSgCyGEEEII8RiRHnQhhBBCCFHg5dNtFvOENNCFEEIIIUSBV5ga6DLERQghhBBCiMeI9KALIYQQQohCoPD0O6sH/EujohAx6qMF7o99+fb5/I6QY/4OJfM7Qo4km27kd4QcSzHF53eEHLNSBas/pGbf6/kdIcfOTque3xFyLMV0K78j5Eh04pX8jpBj1lYF66OvVMW5+R0hxxLC5j4WY0tupWzK9T+2o03LfHlvBesTQwghhBBCiLtQ6rE4T8gVhee7ACGEEEIIIQoB6UEXQgghhBCFQOHpQZcGuhBCCCGEKPDkNotCCCGEEEKIPCE96EIIIYQQohAoPP3OheedCCGEEEIIUQhID7oQQgghhCjwCtMYdGmgCyGEEEKIAk/ugy6EEEIIIYTIE9KDLoQQQgghCgHpQRdCCCGEEELkAelBF0IIIYQQBZ4qRP3O0kAX96W1ZuyYGQQH78fezpax4/pRNaBslrpvvp7NsqDNxN24zb79s9On790TwrhxMzl1MpTJX37Ek+0b50nOPdtP8OPkIExGEx26NKTHa09YzE9OTmXi0LmcPn4JZxcHBo9/CV9/d8KvXOP1bhMpXsobgCrVS/LhoG7E306k/xs/pi8fHRFL66fq8u4nnXMlr9aacWNnEhx8AHu7IowZ++5d12tIyDkGD/yBxKRkAgNrM3DQayilOHHiAiOHTyc+PhH/Yl5MnPQ+jo4OJCenMmL4NEKOnkVZWTFw0Ks0aBCQK5kz5584bi7bgo9gZ2/LiDH/o0rVUlnqjoVcYNjgmSQlJtM0sDqfDnwRpRQ//xDEX4u24ObmBMB7H3aleWCNPMn55fjFbN9yDDs7W4aO7kXlqiWy1B0PCWPkkNkkJaXQpHlVPv78OZRSrFtzgOk/reLCuQhmzv2YqgElAbhyOYbuncdSsrR5u6lWozQDh3bPlbyTxy1k25YQ7OxsGD7mZSpXLXnXvMOH/E5SYgpNmwfwycDnUUoxZfJfBG8+go21geIlvBg2+iWcnB1ITTEyatifnDh+EWOqkac7NeS1N9s/dN77CQzwYWj3WlhZKRZsPc/Pq09azB/yQk0aVfICwN7WgIdTEWp9uCxPM92N1poxY6YTvHkvdnZFGDf+QwICymWp+/rrPwhaupEbN26x/8CC9OkzZy5l0cK1GAxWuLu7MGbs+xQr5p3rGceP/Z0twQexs7Nl9Ni3qRpQJktdSMg5hgycSlJSMs0Da/H5oJfNx4vjFxg1fAZJySkYDFYMGfoa1WuUZ+avf7Ni+XYAjKlGzp27TPC2qbi4Oj505t3bTvD9pCCMJhNPd2lIz/9lPSaP+2Iup9KOycMmmI/J/4q4ep1Xn5vEq2+3o/vLLYkMj2XcF3O5HnMTlKLjc43o1rP5Q+fMaNe2E0yZsAyTyUTHrg3o/XrWzGMGz+NkWuYRE3vjV8ydPTtO8fOUlaSmGLG2MfBu/47UbVie+NuJ9H3tzudIVEQc7Z6uw/uf5s7nSE78POktOrSuTVTMDeq1/fSRv/6jI0NcxP8TwcH7CQ29yuo13zNi5DuMGDHtrnWtWtVn/oIJWab7+Xkxdtx7PN0xdw+kGRmNJr4bv4Sx377BL4sGsHHNAULPhVvUrF66C0dne2YFDeTZXoH88u2K9Hn+xT2YOvcjps79iA8HdQPAoahd+rSpcz/Cx8+NZk9Uy7XMW4IPEBoazqrV3zJ8RB9GjvzlrnUjR0xnxMi3WLX6W0JDw9m65SAAQ7+YSv+PerF02Ze0adOAGb+aGzaLFq4DYOmyL/nl1yFMmvA7JpMp13L/a+uWI4SFRhK0aixDhr/M2JF/3rVu7Mg/+WLEywStGktYaCTbth5Nn9f75bbM/2sY8/8alieNc4DtW45xMTSKxSu+YOCw7kwYveCudRNGL2DQ8B4sXvEFF0Oj2LH1OADlKvgx8evXqV03a4OtWAlPZi/6jNmLPsuVxjnAti0hXAyLZMnK4Qwe3otxo+bdtW7cqLkM+b/27jtMiird4/j3x4CSg4TBjBFESSqoSBAzBjBh1jVg2DXtuoZVMbuYvevqNa/KmgVFEBWUpi7k9gAAM0xJREFUjKAiOahccyZKzuG9f1T1TM9Mz0xPgKpu3s/zzDNT1dXDj57q6lOn3nPqjnMY+P4d/PzTfCZ8/AUABx3SgjcG9uH1gX3YpVkTXnhuGADDP5zCunUbeGNgH15+8ybe7v8xv/26qFIyp1JFcOfZ7bjw3x9zzO3DOLH9zuy5fZ0C29zz5nROuHs4J9w9nH4jv2HY1F83W56SjB07mR9/+I1hHz7NXXdfwZ13PJlyu27d2vNm/4eKrN9nn90Z8NYjDH73MY45piMPPfhipWccN3YaP/44l/eGPsLtd/bmnrueT7ndPXc+zx139ea9oY+Ex4vpADzy0GtcfsUpDBh4L1dcdRqPPPQaABdefCIDBt7LgIH3cs21Z3Bg+30qpXG+ceMmHr1vIPc93psX37qeEUOn8sO3BY/J77/zGXXq1OCVwTfR65wuPP3oewUef+LhwRx0aIu85ZycKvz52hN58e0beOK/VzHojfFFfmdFMz/SdyAPPXExLw28juFDp/H9t/MKbPPewInUqVuD14f8g9PP7cJT/3ofgHr1a3H/vy+k31t/55a7z+SeW4LXt2at6rzw5rV5X7nbN6DLEa0qLXNZvNR/DD3Pvy+Sf9uVT6U30CXdIem6yv69Zfj3R0s6sJJ+14rK+D0pfu9hkjqmsd2EzfHvl8XIEZ/Ts2dXJNGm7d4sX7aSBfMXF9muTdu9adykQZH1O+7UhObNm1FlM059NGf2T+ywc0O236kh1apV5bCj2zJh9OwC20wYM5ujTwh2iy5HtGbqxK8xs7R+/y8/LmDJ4hW0ale0h7u8Ro6cRI+eXUp8XRfMX8zKFatp03ZvJNGjZxdGjPgcgB9/+I0D2+8DwCEdW/PRR58B8O23v3DQQcGJRMOG9ahTtxazZn1XabkTxoycxgk9DkESrdvswfLlq1iwYEnB/AuWsHLlGlq32QNJnNDjEEaPmFrpWUoydtRMjuvRAUm0arMby5evZuGCpQW2WbhgKStXrKFVm92QxHE9OjBm5AwAdtu9KbvulrvF8o4ZNYPjehyUlHdV6rwrk/MexOiRQUPs4ENbUrVqDgCtWu/G/HlLgicJ1qxey4YNG1mzdh3VqlWlVu3qm+3/0Wa37fhx/gp+XriS9RuNIZ//zFFtdih2+xM77MK7E3/ebHlKMmLEZ/Q8qRuSaNu2BcuWrWT+/D+KbNe2bQuaNNmuyPqDD25NjRrbAtCmbXPmzl1Y6RlHjZxMj56dw+PFXixftirl8WLFitW0abtXeLzozMgRkwCQYOWK1QCsWLE65bH6/fc+oftxpX4speWrWcExeYfwmHz4MW0ZX+iYPH70bI45MTgmdz2yNVOSjskfj5rF9jtuR7M98t97DRvXZe99dgKChu8uu+WycMGySskL8OWsn9hx50Z5mY84ti0fF8o8btRsju1xAACHHdWKyWHmvffZkUZN6gGw2565rF27nnXrNhR47k8/LGDJHytos3/RKx9bwviJX/HHks3SpIkVSZX+FZXY9KBLyrhymwpkPgwo9UhoZpVztKyA+fP+oOn2jfKWc5s2ZN68zdfzVh4L5y+lcW79vOVGufWLNGoWLcjfJqdqDrVq12DZklUAzP31Dy4/+xGuveQJZk4t2pgdNWwqXY9qW6lv1Pnz/qBp00Kva6FGwbz5f5Cb2zBvuWluQ+bPC7bZc8+dGRk21ocN+5S5vwd/k+YtmjFq1CQ2bNjIL7/M54vZ322WBsP8+Uto2jS/sZKb2yC/MZjYZt4SmuTmNwRymzZg/vz8bV5/dSSnn3w7d/R5gWVLV1Z6xiDnUnKb1s9bbpJbn/nzlxbZpkluyduk8tuvizi31/1cdsGjTJ38baXkXTBvCU2bJr1mxbyuuUl5c3MbsKDQNgCDB06gY6eWABx51P5Ur7Etx3a7iROO6sO5FxxJvXq1KiVzKk3r1+D3P1bnLf++ZDW5DWqk3HaH7Wqyc6OaTPhq/mbLU5J58xaxfdPGectNK3CMGzDgI7p0OaCyouWZP29xwfdb0+2YX6iBPn/+YnJzk9+T2zF/XrDNjTedz8MPvcqR3a7k4Qde4a9/K3jFZ/XqtYz/eDpHHd2hUvIuLPSeapzimLxw/lKahO/NnKo51A6PyatXreW1F0bxp8uOLvb3z/3tD76Z8yv77Fe0/Ku8FsxflpcHoHGTeiycV3zmqlVzqFW7OkvDz5GE0cNnsvc+O7LNNgWbByOGTuPwY9pk1TzdbvMqtYEuqZmkryS9IulLSQMk1ZT0g6RG4TYHShqd9LQ2kj6R9LWkS0r43YdJGidpMPCFpBxJD0r6XNIMSZclbXujpJmSpksq7TrNeZKmSZolqUP4/A5hpqmSJkhqHq6/QNLbkoaGeR9IkbNR+NzjU2RuJmlW0rbXSboj/Hm0pEeTs0hqBlwO/C1c31lSrqSB4f9teqJ3PbkHX9L1Sa/LneG6WpLeC58zS1KR6+ySLpU0SdKkZ5/pX8rLtvXZrlFdXnmvD0+9ei2XX9uDe295hZUr1hTYZvSH0+h2bLuIEqZ29z//zOuvfUivU29k1crVVKsWfBiccko3cnO34/Re/+C+e1+kbdvm5FSJzXl4nl5nHMa7Q+/l9bdup1HjejzyYOrSk7hq1Lgugz+8k5f738hfrz+ZW2/sx4oVq0t/4hbyn6c/ICcnh+4nBA2uWTN/ICenCkNH3svgoXfzcr/h/PJz5Z+4lceJ7Xfmg8m/sim9C1qxNXjQKGbP+oaLe58SdZQi3nh9ODf84zyGj3qc6/9xHrf1KViqOGbUFNq127tSylsq6sWnPuS0cztTo+a2KR9fvWott13Xjyuu67lZrwKVx/ffzOWpf73H9beeWuSxEcOmcWT3eH2OZCdthq9opNsD3By42MzGS3oe+Esp27cGDgZqAVMlvWdmvxWz7f7Afmb2vaRLgaVm1l7StsB4SR8CLYCewEFmtkpS0euMBdU0s7aSugDPA/sBXwGdzWyDpCOBvkDiXdQWaAesBeZIeszMfgaQlAsMBvqY2UeSDiuUuVlZspjZfpKeAlaY2UPhv/EGMMbMTpaUAxQ4Sko6GtgL6ECwtwwOf19j4DczOz7crl7hf9zMngGeAdhos9L6CHz1lQ/oH9Yyt2q1J3N/z/8gnzd3UYFe3Tho1KRegR7EhfOW0KhxwZeiYeNgm8a59dm4YSMrV6ymbv2aSMrr6dh7n53YfqeG/PLTApqHAwm//b/f2LhxU96l1Yp49ZWhDBgwAoD99tujQM/2vLmLyC10+Ty3yXYFevLmzltEk7CHbPfdd+TZ//QB4Ifvf2PMmClA0Kvzj5suyHvOOWf1YddmxZcWlMUbr47k7QHjANh3v2bMnZvf4z9v3uICPWYQ9kTPy+/lmzd3MU2aBNs0bJT/9znltC5c/Zd/V0pGgP6vjeWdtz4BoOV+uzBv7pK8x+bPW0KTJgX3jSZN6hXopU61TWHbbFONbbapBsA+++7CTjs34qcfF+QNIi2LN18bwzsDxod5d2Xu3KTXrJjXdV5S3nnzFhe4gvTuO5/w8dhZPPncNXm9dcPe/5xDDm1J1Wo5bNewDm3a7sGXs39kp50bsTnMXbKa7bfL7zHfvn4N5i1OfQJzQvuduP3VaZslR3FeeeU9+r/5IQCtWu3F73MX5D02txzHuAkTpvHUU/156eW+eftFRb32yoe8NWAUAPvtt3vB99vcP2hSqEylSZMGzJuX/J78I+8K1uB3xvKPm88H4JhjD+KOW58t8NwP3v+E7sdX3gXbRoXeUwtSHJMbNanH/Ln5x+QV4TH5y1k/MWb4DJ7+13usWL6aKlWCY/TJZ3Ziw/qN3HZdP47svn+l13I3blKX+UnHigXzl9IoN3XmJrn12bBhIytXrKFe/ZpAcNy4+W/9uOWeM9mx0Pvqmzm/sXHDJpq3rPjniNt6pNu19rOZjQ9/fhnoVMr2g8xstZktBEYRNCyLM9HMvg9/Pho4X9I04DOgIUHD9EjgBTNbBWBmRQsEC3ot3G4sUFdSfaAe0D/s7f4fIHlqixFmttTM1gBfAInpKKoBI4AbzOyjYjKXJlWWwg4Hngy322hmha+vHx1+TQWmEJyw7AXMBI6SdL+kzimeVy5nn9Odge88zMB3HuaIIzowaNAYzIzp0/6POnVqpqxfjFLzljvz688L+f3XRaxfv4HRH07jkK4FZy45pOu+fDgkqMccO2IGbdvviSSWLF7Bxo3BIMrff1nErz8tZPsd8z+cRw2dSrdjKqfX4+xzjuXtgQ/y9sAHOeKIDgweNDbvda2d4nVt3KQBtWrXYPq0/8PMGDxoLIcfHtRsLloU/Kk3bdrE00+9zRlnHAUEl6pXrQquAEwYP4OcnBz23LNyPhTOOPvwvEGd3Y5ox5DBn2BmzJj+LbVr16Bx4/oF8zeuT61a1Zkx/VvMjCGDP6Hr4W0BCtSrjxw+hT322rFSMgL0OqtL3uDNroe35v3BEzEzZk7/ntq1qxdtKDSuR63a1Zk5/XvMjPcHT6RLt5I//Bf/sTxvv/n154X8/NMCdtypfCeup5/VlVffuplX37qZww5vzfuDP0vKWyN13lrJeT+ja7dgkO2Ej2fz3+c/4pHHLqd6jW3ynpO7/XZMmhjMorJ61VpmzfieZpuxtn7GD4tp1qQ2OzWsSbUccUL7nRk+/fci2+3etA71am7DlO+2bNncOecczzuDHuWdQY9yxJEHMeidUZgZ06Z9RZ06NVPWmhfniy++5fbbnuCJJ/vQsGH9Sst41jlH5w3gPPyIAxk8aFx4vPia2nVqpDxe1K5dg+nTvg6PF+PodvgBeY9N+jwY+PzZp7PZZdf8v/3y5auYNOnLvG0rQ4t9d+bXn/KPySOHTaPjYQWPyR277suwd4Nj8pjhM2gXHpP//fwVvP7+Lbz+/i2cdk5nzrn4CE4+s1Mwc9Sdb7Lrbrmcfl7XSsuanPmXnxby2y9/sH79BkYMnUanri0LbNPpsJYMHTwZgNEfzWT/DkHm5ctWc8OVz3P5NcfRul3RGvPhH0zjyO5tKz2zK0pUqfSvqKTbg16459WADeQ38AtfZ0q1fXGSi08FXGVmw5I3kHRMmjlL+vfvBkaFvdTNgNFJj69N+nkj+a/LBmAycAwwppjMya8DVOy1KI6Ae83s6SIPSPsDxwH3SBphZneV4/cXq0vX/Rk7dgrHHn0F1atvyz/7XpH32Mkn/Z2B7zwMwEMP/pf3hoxjzeq1dOt6CaeediRXXnUGM2d+w9VX3s+yZSsZNWoSjz/+Ou8OebQyI5JTNYcrbziZm658lk0bjWN6tqfZHk158cmh7N1yZzp23ZfuPTtw362v8aee91KnXk1u6XsuADOnfEe/p4aRUzWHKhLX3HwqdevVzPvdY4ZP55+P9q7UvABdurZj7NgpdD/m6nDatPyLUqecfD1vD3wQgFtv680tNz3B2rXr6NS5LZ27BCcL7783ntdeDd4mRx7VgZNP6QbAH38s5dLe/6RKlSo0abId991/ZaVnB+jUpRUfj51Jj+43U736Ntxxz4V5j51xyp288fbtANx067ncfsvzrF27nkM77UenzkHD99GHBzDnq5+RYPsdGtHnjvM2S85DO7dkwtjZnHLcXVSvvg233nNO3mPnnHY/rwy4EYAb+pweTLO4Zh0dO7WkY+fgg3nUiOk83HcAixev4Nq/PM1eLXbksaf/wtTJ3/L0/75P1ao5VKki/nHr6ZVS031ol/0YP242J3W/neo1tuH2u/Nfl7NP7curb90MwD/6nJk3zWLHzvtyaOeg8fPAP99k/br1XHHJY0Aw/ePNt5/N6Wd14c4+L3F6z7sxM0486RD2ar75evM2bjLueG0a/f7amSpVRP/xP/D178v4a4+WzPxxMSPCxvqJ7XdmyOfRDA5N6Nr1QMaOmczRR11G9Rrb0rfv1XmPndTzGt4ZFByvHnzgBYYMGcvq1Wvp2uVCTut1FFdddTYPPvAiq1at5q/XBLNYbb99Y558qk+lZuzctS1jx07juGP+RvXq23JP37zqT047+SYGDLwXgD63XUSfm55izdp1dOrchs5d2gJwx129ua/vf9m4cRPbbluN2+/KP6aNGP45HTu2ombNyisXyamaw9U3nswNf3mWTZuM7j3bs9seTXn+iaE0b7kzhx62L8ef1IG+fV7jnB73UrduTW6979wSf+esaT/w0XuT2X2v7el9xiMA9L6yOwd33qdSMletmsPfbjqJv//5WTZt2sTxJ3Vgtz2b8tz/DqPFvjvR6bB9Of7kDtxzy+ucecJ91K1bkzseCI4nb78+nl9/WsiLz3zEi88EfXmPPHkpDRoGF8NHfjidB//34krJWV79HruKzofsQ6MGdfjms8e5+5EB9HtjdKSZNo/sqfFXaTNZhI3Z74GOZvaJpOeAL4HuwMNm9oGk/wHamdlhYf31SSSVuAAHpypxCctFrjOzE8LlSwkam73MbL2kvYFfgc7AbcCRiRKX4nrRw1r4r8zsckmdgCfNrJWkgcDLZvZWmPECM2sm6QLgQDO7Mnz+EOAhMxsd1oDXA/oDn5nZ/SkyVwN+JygDWkHQkB9qZneUkOXvQF0zuz38Ha8Dn5rZvxIlLma2VNIKM6sdlrjcDRxhZisk7QisJziR+MPM1kg6AehtZicV97dMt8QlTn5dme6FivjYoWblDVzaEtZtqryZELaU9ZtWlb5RzFTJsHHwba4oOltT3H37TDRT2FXE+k2ZNbPGwjXFVavGV9UqmfXRt+ver0UdocxW//RaLFrG6zdNq/Q/drUqbSP5v6X7iTEHuCKsP/+CoBxjIvAfSXdTsDcaYAZBaUsj4O4S6s8Lew5oBkxRUDy5ADjJzIZKagtMkrQOeB+4uYTfs0bSVIISlYvCdQ8A/ST1Ad4r9pmFmNlGSWcR1H0vJ/j/Jz++XtJdBK/HrwS17qVleRcYIKkncBVwDfCMpIsJevD/DHyS9G98KGkf4JOwpnQFcC6wJ/CgpE0EDfY/p/v/cs4555zLJtoKe9CHmFnl3aVlKxH2oF9nZpOizgLeg76leA/65uc96Juf96BvGd6Dvvl5D/rmF5ce9A2bplf6H7tqlTax7kF3zjnnnHMutpRF88yX2kA3sx8IpiksN0mtgJcKrV5rZgdV4Hf+L3BoodWPmtkL5f2dlc3MDos6g3POOefc1iF+9/0ory3Sg25mMwnmGq/M33lF6Vs555xzzjmXWbzExTnnnHPOZbxsGiSaPdcCnHPOOeecywLeg+6cc84557JA9vSgewPdOeecc85lvGyaxcVLXJxzzjnnnIsR70F3zjnnnHNZIHv6nbPnf+Kcc84551wW8B5055xzzjmX8XyaReecc84559xmITOLOoPLApIuNbNnos6RrkzLC555S8i0vOCZt4RMywueeUvItLyQmZm3Vt6D7irLpVEHKKNMywueeUvItLzgmbeETMsLnnlLyLS8kJmZt0reQHfOOeeccy5GvIHunHPOOedcjHgD3VWWTKtpy7S84Jm3hEzLC555S8i0vOCZt4RMywuZmXmr5INEnXPOOeecixHvQXfOOeeccy5GvIHunHPOOedcjHgD3ZWbpN3SWefKT9K26axzzjnnXPbwBrqriLdSrBuwxVOUgaRcSf+R9EG43FLSxVHnKsEnaa6LDUkHS6qTtFxX0kFRZkpFUovw+/6pvqLOVxxJu0mqnrRcQ1KzCCOlRVJfSfWTlhtIuifCSMWStF1JX1HnyxaZti9LqiWpStJyFUk1o8yUDkm9EsdkSX0kvR3nY5wL+CBRV2Zhw2Zf4AHg+qSH6gLXm9m+kQRLQ9gwfwG4xczaSKoKTDWzVhFHK0BSU2BH4GXgbEDhQ3WBp8ysRVTZSiNpKrC/hQeX8ANtkpnF6gNB0jNmdqmkUSkeNjM7fIuHSoOkSUBHM1sXLm8DjDez9tEmK5mkqWbWrtC6KXHbLwAkfQ8Y+e+7ZGZmu2/hSCWSNJMgb5GHCPK23sKR0pJp+7KkT4EjzWxFuFwb+NDMOkabrGSSZphZa0mdgHuAB4HbzCx2HScuX9WoA7iM1Bw4AagPnJi0fjlwSRSByqCRmb0p6SYAM9sgaWPUoVI4BrgA2Al4JGn9cuDmKAKVgSzpzN/MNoUnQrFiZok76nU3szXJjyX36sVQ1USDBsDM1oUNm7jLkbStma2FoLcUiGW5lpllWqneCVEHKKdM25erJxrnAGa2IhN60IHEZ9zxwDNm9l5cr165fLH70HTxZ2aDgEGSDjGzWJdbpLBSUkPC3iZJBwNLo41UlJn1A/pJOtXMUpUSxdl3kq4GngyX/wJ8F2Ge0kwACvfiploXFwsk9TCzwQCSegILI86UjleAEZJeCJcvBPpFmCctkhoAewF5J21mNja6REWZ2Y9RZyinTNuXV0ra38ymAEg6AFgdcaZ0/CrpaeAo4P5wHJOXOMecl7i4cpPUmKDHvBlJJ3tmdlFUmUoT1t09BuwHzAIaA73MbHqkwYoRHkhPpehrfFdUmUojqQnwb+BwghOhEcBfzWx+pMEKKVRGdE7SQ7EuI5K0B0Fjd4dw1S/A+Wb2TXSp0iPpWODIcPEjMxsWZZ7SSOoNXENwJWsacDDwSdzKnyR9bGadJC2nYKlLosSlbkTRSpRp+7Kk9sDrwG8Er21T4AwzmxxpsFKEvfzHAjPN7GtJ2wOtzOzDiKO5EngD3ZWbpAnAOGAy+ZfQiHOPb9jg3UhQpiNgDlAlcdk9biQNJejhL/waPxxZqCwh6U8EZUQHAp8nPbQceNHMBkaRK11h/SvJl9zjTtKuwF5mNjxsNOSY2fKocxUnrO1uD3xqZm3D8Td9zeyUiKNllUzalyVVI/j8AJhjZuujzJOusP58LzN7Iexcq21m30edyxXPS1xcRdQ0sxujDlFGn4SD0mYnVkiaQnzLGXYys2OjDlEWGXRlpREwJPxKHhBoQGxrkCX1BR4wsyXhcgPg72bWJ9JgpZB0CXApsB2wB8HVi6eAI6LMVYo1ZrZGEmH9/FeSmpf+tGhIesnMzittXVxk2r4s6QrgFTObFS43kHSWmT0RcbQSSbqdoCOiOcEkCdUIrhweGmUuVzKvQXIVMUTScVGHSIekpmG9YA1J7ZQ/nd5hQJwH+UyQFKsZZtIwCKgHDAfeS/qKm9rh1wHAn4HtCS61X058T9ggGNS6JLFgZouBTHgfXkHQIFgGYGZfA00iTVS6X8KpId8BPpI0CIhzvXeBGbTCwdkHRJQlHZm2L1+SIm/cJ0YAOBnoAawEMLPfgDolPsNFznvQXUVcA9wsaS2wnnjXO2bqrCidgAvCad/WEvNp00IZcWXFzO4EkDSWYFrI5eHyHcTzhCIhY2ZDKWRtOEsHkNd4jHWNpZmdHP54RzgdZz1gaISRUgpnpbqZoANiWWI1sA54JrJgpcu0fTlHUt4sVZJygDjPOpOwzsxMUiJ3ragDudJ5A92Vm5llzBl4Bs+K0j3qAOUwRNJxZvZ+1EHSlEvQkElYF66Lq4ycDQUYIynRiDyKYHafdyPOVKpwYHkngpOJ8cnTAsaFmd0L3CvpXjO7Keo8ZZBp+/JQ4I1wRhSAy4jhCVsKb4aZ64elZhcBz0acyZXCB4m6CpHUmqK1xm9HFigNko4nuBScPG1anGdFyajBPeFMErUIevzjfmUFSbcApwOJQaEnAW+EjZ5YktSd/Nrt2M+GAqCg67w3cDTBPjEMeM5i/CEk6TagF5A4pp0E9DezWM4hLalLqvVxmxYyWSbtywpuunYZSXkJ9uE43kujgPCkOO+9Z2YfRRzJlcIb6K7cJD0PtCYYcLkpXG0xHAyYR9JTBDXn3YDngNOAiWZ2caTBipE8uMfM9pa0A0EDwQf3VKKwl7RzuDjWzKZGmSfbhKUAs+M6dWVxJM0B2iRuZBWWYEwzs1gOFJWUfEWiOtABmBy3aSGdc6XzEhdXEQebWcuoQ5RRRwtueTzDzO6U9DDwQdShSnAy0A6YAsHgHkmxLC2S1CKc5SLlAMvEzT3iKMwW23zJFNxc6zFgH4L61xxgZVyvUACY2UZJcyTtYmY/RZ2nDH4jaOgm7jS7LfBrdHFKZmbJd3ZG0s7Av6JJU7pM25cl7QXcC7Sk4BXY3SMLVYJMnR/fBbyB7iriE0ktzeyLqIOUQeKDdlXYG72IYPaOuMqkwT3XEkyjl2qOdiO4cZGruMeBM4H+BFdXzgf2jjRRehoAsyVNJJxNAsDMekQXKTVJjxHss0sJMn8ULh8FTIwyWxn9QtD4jatM25dfAG4H/ofgKuyFxHg2PDPrFH6PZaeOK5k30F1F/JegkT6XzJlh5N1w2rQHCXpMjXgPlsmYwT1mdmn4vVtJ20k6yusfK8bMvpGUE9a+viBpKhD3wYG3Rh2gDCaF3yeTPzYBYPSWj5K+pBMLCBqObYn5laEM25drmNmIcCaXHwlm95kM3BZ1sJKEVypmJ81UVQdoaWafRZvMlcQb6K4i/gOcB8wkvwY9tsIBPiPCeWzfkjQEqG5mS6NNVjwzeygc3LOM4CYTt2VB4/Z+gsFVrnxWSdoGmCbpAeB3YtyLl2BmY0p6XNInZnbIlspTknDWp1JJesvMTt3cecpgUtLPG4DXzGx8VGHSkGn78trwc+RrSVcSlDvVjjhTOp6k4L0dVqZY52LGB4m6covTB2q6JE01s3ZR5ygrSXUpOFPOHxHGqZBM/RvEhaRdgXkENbt/I5ib+wkz+ybSYBWUiftFpmWO2wlFpu3LktoDXwL1gbuBusCDZvZplLlKI2mambUttG5GzK92b/W8B91VxFRJrxLMZbw2sTLm0yyOkHQq8Hacp3dLkHQZcCdB7fwmwjIiIJaDktIU+9c9zsJL6xDsE3cWfjxujbAyyMT9ItMyx+q4kWn7spl9Hv64gqD+vABJj5nZVVs2VVq+k3Q1Qa85BPcg+C7CPC4N3kB3FVGDoGF+dNI6I3/O4Di6jGAw4wZJa4j/aPbrgP3MbGHUQVzGiFUjzMWKn1BsXnGd/vZy4N9AH4J9YARwSaSJXKm8ge7KzcyK9CDEXWmj2SXta2azt1SeNHwLrIo6RCX7IeoAWS7TGmEJijpAOWRi5kySqfty3OxlZmcmr5B0KLAgojwuDd5Ad+UmqTpwMUXvyhnbGxWl4SXiNXDmJmCCpM8oWEZ0dXSRUpN0SkmPJ0qfzKzE7Vz2ktSU4OY5BnxuZnOTHj4vmlQVcmPUAcrITyi2To9R9HMt1ToXI95AdxXxEvAVcAxwF3AOwQCaTBa3D7CngZFkxkw5J5bwWNxLn7JJ3PZhACT1JpiObiRBxsck3WVmzwOY2awo8yWTNJPUvbcFppI1sw+3aLCK8xOKzStWeSUdAnQEGku6NumhugQ3hXIx5g10VxF7mlkvST3NrF84YHRc1KEqKG6XVKuZ2bWlbxa9TCx5ylJxbYRdD7Qzs0UAkhoCE4DnI02V2glRBygLP6HYMiT1MrP+Jax7NIJYJdmGYBrIqkByeecy4LRIErm0+TSLrtwkTTSzDpLGEowKnwtMjOttj9MhaYqZxeayn6S+BDXbhWfKifU0i5KOp2jp013RJcoeYe3oHcCuBB+8iUZYrN93kiYAh5nZunB5G2C0mXWMNlnJJOUC7cPFiWY2P8o8qYTTFRYrabaUWEj3hCJuUn0+xO0zIxVJu5rZj+F0vZa4YZGLN+9BdxXxjKQGBCPDBxOcqWfS3QJTWRd1gELOCr8n31kv1tMsSnoKqElwK+znCHpqMun26HH3H4I5oycDGyPOUqqkS+vfAJ9JGkSwD/cEZkQWLA2STie46/Bo8styrjezAZEGKyS5AZ4JJxRk3hWK7sBxwI6S/p30UF2CG0LFXePwxnx1ACQtBS4ys8nRxnIl8R50t9lI+lO6d+TbUiSNMLMjSlvnyi9xA4yk77WBD8ysc9TZsoGkz8zsoKhzpEvS7SU9bmZF5r+OC0nTgaMSjVxJjYHhZtYm2mSppTih6AzE7oQi00hqA7QlGGt1W9JDy4FRZrY4ilzpkjQDuMLMxoXLnQhuCBXLKxUu4D3obnO6BohFAz2ccaYm0Cjs9U8M5qkL7BhZsGKkOyNKTK0Ov6+StAOwCNg+wjzZZpSkBwkG3SaXPU2JLlLx4twAT0OVQj3Qi4j3rehvAdoXPqEAYtlAl3QwwWwi+xDUS+cAK+N2Xwozmy5pFnBM3Dqd0rQx0TgHMLOPJWVCz/9WzRvobnOK04j2y4C/AjsQlAYksi0DHo8oU0kyeUaUIZLqE/TkTSHI+1ykibJLovf8wKR1BhweQZa0SRpFirpjM4tz7qGShgGvhctnAO9HmKc0mXZC8ThwJtCfYH8+H9g70kTFMLONknaWtE1iHEUGGSPpaYL92Aj249GS9of4ntxv7bzExW02cRw8I+kqM3ss6hxbC0nbAtXNbGnUWVy0JB2QtFgdOBXYYGY3RBQpLeHVrE7h4jgzGxhlnpKEV1ZaU/CEYoaZxWo2lARJk8zswEQ5XLhuqpm1izpbKpL+S9DbPxhYmVhvZo9EFioN4clxcSzmJ8lbLe9Bd5tTnHrQATCzxyR1BJqRtP+b2X8jC5VCoTlri4jzB4Kk81Osi91rnKnCQYB9gR3MrLuklsAhZvafiKOVKMWAtPGSYj14OHwfvhHzkrI8ZnZ9oROKZ+J8QkFQBrcNME3SA8DvxLvH/9vwqwoFpy2MNTPrFnUGV3beQHeb0/ioAxQm6SVgD2Aa+TNgGBC3xmPGHPxTaJ/0c3XgCIJSl7i9xpnqReAFgnpjgP8D3iCY3SW2JG2XtFiFoKShXkRx0lUH+FDSHwSvcX8zmxdxpmJl2gkFwd1jqwBXEsxMtDMQ2zsNJ8ZThAPfMbMV0SZKj6TbUq33qW/jzUtcXLmF5QunUrQ3OrZveklfAi3Nd/wtJqxHf93Mjo06SzaQ9LmZtU8uBZA0zczaRhytRJK+J78GfQPB/P53mdnHkYVKk6TWBOUipwK/mNmREUdKKZwx53QgU04orjGzR0tbFxeS9iO4g3biZHMhcL6ZzY4uVekk/T1psTrBNJdfmtlFEUVyafAedFcRg4ClBIMu15aybVzMApoSXEqNvXD2mYspetOfTDqwrgR2izpEFlkZ3oXTIG8mjEyo8W9JcEOzTgTZxwGTIk2UvvkEN2JbBDSJOEuxwh7eO5NOKMZIiu0JBfAnit5984IU6+LiGeBaMxsFIOkw4Fkg1jfbMrOHk5clPQQMiyiOS5M30F1F7JSBvaKNgC/C2tfkKep6RBepRC8BXwHHEMzBew7wZaSJSiHpXfJ7SqsQNMzejC5R1rmWYJDaHpLGA43JjNt29yOYNSlxo5ezCfbvXpElKoWkvxD0SDcmmGnkEjP7ItpUaYn1CYWkswj+/rtJGpz0UF2C3v+4qpVonAOY2WhJtaIMVE41gZ2iDuFK5g10VxETJLUys5lRBymDO6IOUEZ7mlkvST3NrJ+kVwl6HuPsoaSfNwA/mtkvUYXJNmY2RVJXoDnBQOw5ZrY+4ljp2M/MWiYtj5IU98buzsBfzWxa1EHSkUEnFBMIrmI2ApJ7d5cT77vLfifpVoITS4Bzge8izJMWSTPJ7zTJIdg/YluK6gLeQHcV0Qm4IKwtXUvQWLA4353MzMZEnaGMEg2vJWH941xi2COWLANf44wSlj0VKBWR9JSZrYk2WammSDrYzD4FkHQQMS9xMbObJHWSdKGZvRDe+Ke2mX0fdbZiZMQJhZn9CPwIHBLOSpQYWP6lmcX5BjoXAXcCb4XL44ALo4uTthOSft4AzIv56+zwQaKuAiTtmmp9ePCNFUkfm1knScspeLOUxElFrO5clyCpN8GHQSuC2TtqA7ea2dNR5ipJOM3b/QQnEiLmr3GmkfQmQU/jy+Gqs4H6ZhbbUhHIG6DdHPgpXLULMIegwRDLE/tw0OWBQHMz2zu8M25/Mzs04mjFCm/jvlcmnFBI6kVwxW00wXGiM3C9mcX1zqcHEsye1Iz8Ds5Y7rsJknKA2WbWIuosrmy8ge4qTFITCg5g/KmEzV0ZSNqt8IdrqnVxIukb4EQzi3WtfKaS9EWhUpGU6+KmuBP6hJie2E8D2gFTkmbMmRHXBlmmnVBImg4clbj7aXhCMdzM2kSbLDVJc4DrCCYb2JRYH8d9N5mkQcBV/tmcWbzExZWbpB4E9YM7EAxK2pVgAOO+UebKMm8Bhe/GOgA4IMW2cTHPG+ebVcaVikD8GzHFWGdmJikxY07cBwSeTHhCAWBmv0mK8z0VqiQa56FFxPtGRQvM7N2oQ5RDA2B2ODlC8h1Q4zo5gsMb6K5i7gYOJujxaCepG8GgGVdBkloQnOjUC0tGEuqSdLUipiZJegN4h4Iz5WTKzVPi7gCCAdo/EZRr7QrMSQwEi2vvbqaRJGCIpKeB+pIuIahBfjbaZCXKtBOKDyQNA14Ll88A3o8wT2lul/QcMILMOrbdGnUAV3beQHcVsd7MFkmqIqmKmY2S9K+oQ2WJ5gQDe+oDJyatXw5cEkWgMqgLrAKOTlpnQNw/xDLFsQQ9Yp3D5bHAksjSZKmwoduLYFrLZQTvydvM7KNok6WWoScUBjxNMOAZgnnGD44uTqkuBFoA1cgvccmEY1tNM/sgeYWkywEf0B9jXoPuyk3ScOAk4D6gIUGZS3szi/VNGzKJpEPM7JOoc7j4kHQN0JugUSCC9+CzZvZYlLmykaR+wONm9nnUWdIRXkW5luDkWMCwuJ5QAEiaYmb7F1oX5xr/OWbWPOocZSVpAtDHzEaGyzcA3cyse7TJXEm8ge7KLbx8uobgg+AcoB7wipktijRYFpH0AHAPsBoYCrQG/mZmL5f4xAiFA70uoeBMB5l299PYkjQDOMTMVobLtYBP4tqoyWSSvgL2JJgSMLl2N5avdaacUEj6M8FUobsD3yY9VAcYb2axLJWU9ALwYEznli+WpEbAEOB6gitwLYCzzGxdpMFcibyB7iqk0By2EwsN+HEVJGmambWVdDJBycu1wNi4znIAeb0144DJwMbEejN7q9gnubSFvaTtE/Oeh/Oif25mraJNln0yaSpZyJwTCkn1CMq07gX+kfTQcjOL7Z1Ew6lC9wAy5t4fCeFsa8MJjssXmTf+Ys9r0F25STodeJD8OWwfkxTbOWwzVLXw+/EE06UtDUpNY62mmd0YdYgs9gLwmaSB4fJJwH+ii5O94toQL8ExUQdIh5ktBZYCZ0WdpYyOjTpAWaS478c2BFctTpPk96aIOe9Bd+WWaXPYZiJJ9xE0wFYDHQgGjQ4xs4MijFUiSfcAE8wszrMxZDRJ+5M/sG6cmU2NMo9zzrnK5Q10V26SZiZfVpdUBZjul9orl6TtgKVmtlFSTaCumc2NOldxwl6bWgSXgNfjdxJ1zrlISdqRYErW5HFBY6NL5ErjJS6uIoZm2By2maoF0ExS8vv1v1GFKY2Z1QlPKvYi/nO2O+dcVpN0P8Hn8xfkjwsygilaXUx5D7qrEEmnAonbSI8zs4Elbe/KRtJLBIOSppF0YDWzqyMLVQpJvYFrgJ0Ich9MUPJyRJS5nHNuayRpDtDazNaWurGLDW+gOxdj4awBLTNpxH1ilhHg03AGmhZAXzM7pZSnOuecq2SSPgB6mdmKqLO49HmJiyuzFCPD8x7Ca40r2yygKfB71EHKYI2ZrZGEpG3N7CtJGXdzD+ecyxKrgGmSRhCMDQIgzldinTfQXTmYWZ2oM2xFGgFfSJpIwQNrj+gileoXSfWBd4CPJC0mmJfZOefcljc4/HIZxEtcnIsxSV1TrTezMVs6S3mE+esBQ/2udc4551x6vIHunHPOOZelJO1FcNfWliTNrGVmu0cWypWqStQBnHNFSfo4/L5c0rKkr+WSlkWdzznnXMZ4AXgS2AB0I5im9+VIE7lSeQ+6c84551yWkjTZzA5IvrlgYl3U2VzxfJCoc84551z2Whve6ftrSVcCvwK1I87kSuE96M4555xzWUpSe+BLoD5wN8HA/QfM7NMoc7mSeQPdOeeccy7LSapLcK+S5VFncaXzQaLOOeecc1lK0oHhHZ5nADMlTZfk9ecx5z3ozjnnnHNZStIM4AozGxcudwKeMLPW0SZzJfEedOecc8657LUx0TgHMLOPCaZcdDHmPejOOeecc1lG0v7hj+cDNYDXAAPOANaY2bVRZXOl8wa6c84551yWkTSqhIfNzA7fYmFcmXkD3TnnnHNuKyXpT2bWL+ocriBvoDvnnHPObaUkTTGz/Uvf0m1JPkjUOeecc27rpagDuKK8ge6cc845t/XyUooY8ga6c84559zWy3vQY8gb6M4555xzW6/xUQdwRXkD3TnnnHMuS0nqK6l+0nIDSfckls3sykiCuRJ5A90555xzLnt1N7MliQUzWwwcF10clw5voDvnnHPOZa8cSdsmFiTVALYtYXsXA1WjDuCcc8455zabV4ARkl4Ily8E/MZEMec3KnLOOeecy2KSjgWODBc/MrNhUeZxpfMedOecc8657PYlsMHMhkuqKamOmS2POpQrntegO+ecc85lKUmXAAOAp8NVOwLvRBbIpcUb6M4555xz2esK4FBgGYCZfQ00iTSRK5U30J1zzjnnstdaM1uXWJBUFfABiDHnDXTnnHPOuew1RtLNQA1JRwH9gXcjzuRK4bO4OOecc85lKUkCegNHAwKGAc+ZNwBjzRvozjnnnHNZSFIOMNvMWkSdxZWNl7g455xzzmUhM9sIzJG0S9RZXNn4POjOOeecc9mrATBb0kRgZWKlmfWILpIrjTfQnXPOOeey161RB3Bl5zXozjnnnHNbKUmfmNkhUedwBXkNunPOOefc1qt61AFcUd5Ad84555zbenkpRQx5A90555xzzrkY8Qa6c84559zWS1EHcEX5LC7OOeecc1lMUlOgA0E5y+dmNjfp4fOiSeVK4j3ozjnnnHNZSlJvYCJwCnAa8KmkixKPm9msqLK54vk0i84555xzWUrSHKCjmS0KlxsCE8ysebTJXEm8B90555xzLnstApYnLS8P17kY8xp055xzzrksI+na8MdvgM8kDSKoQe8JzIgsmEuLN9Cdc84557JPnfD7t+FXwqAIsrgy8hp055xzzjnnYsR70J1zzjnnspSkUaS4W6iZHR5BHJcmb6A755xzzmWv65J+rg6cCmyIKItLk5e4OOecc85tRSRNNLMOUedwxfMedOecc865LCVpu6TFKsCBQL2I4rg0eQPdOeeccy57TSa/Bn0D8ANwcWRpXFq8ge6cc845l71aAn8BOhE01McBkyJN5ErlNejOOeecc1lK0pvAMuCVcNXZQH0z6xVdKlcab6A755xzzmUpSV+YWcvS1rl4qRJ1AOecc845t9lMkXRwYkHSQXiJS+x5D7pzzjnnXJaS9CXQHPgpXLULMIdgwKiZWeuosrnieQPdOeeccy5LSdq1pMfN7MctlcWlzxvozjnnnHPOxYjXoDvnnHPOORcj3kB3zjnnnHMuRryB7pxzzjnnXIx4A90555xzzrkY8Qa6c84555xzMfL/EJdHdPBl3ZwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting correlation heatmap\n",
    "\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.heatmap(df.corr(), annot=True, cmap='YlGnBu')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2abc4bb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='installment', ylabel='loan_amnt'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# There is high correlation betweeen loan_amnt and installment \n",
    "\n",
    "sns.scatterplot(x='installment', y='loan_amnt', data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "66624cb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    396030.000000\n",
       "mean        431.849698\n",
       "std         250.727790\n",
       "min          16.080000\n",
       "25%         250.330000\n",
       "50%         375.430000\n",
       "75%         567.300000\n",
       "max        1533.810000\n",
       "Name: installment, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking the installment column as it's having high corr\n",
    "df['installment'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c3cdc846",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='installment'>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['installment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "07477b1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1042.7549999999999 -225.12499999999986\n"
     ]
    }
   ],
   "source": [
    "q1 = df['installment'].quantile(0.25)\n",
    "q3 = df['installment'].quantile(0.75)\n",
    "\n",
    "iqr = q3 - q1\n",
    "\n",
    "ub = q3 + (1.5 * iqr)\n",
    "ll = q1 - (1.5 * iqr)\n",
    "\n",
    "print(ub, ll)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1791e57c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.distplot(df['installment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "44a6501f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df1 = df[df['installment'] < ub]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "30bad0cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.distplot(df1['installment'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5976b991",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sns.boxplot(data=df1[['installment', 'loan_amnt']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83aafe44",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9f952c0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='loan_status', ylabel='loan_amnt'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Checking the correlation using boxplot\n",
    "\n",
    "sns.boxplot(data=df, x='loan_status', y='loan_amnt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b2613b49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"8\" halign=\"left\">loan_amnt</th>\n",
       "      <th colspan=\"2\" halign=\"left\">int_rate</th>\n",
       "      <th>...</th>\n",
       "      <th colspan=\"2\" halign=\"left\">mort_acc</th>\n",
       "      <th colspan=\"8\" halign=\"left\">pub_rec_bankruptcies</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>...</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_status</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Charged Off</th>\n",
       "      <td>77673.0</td>\n",
       "      <td>15126.300967</td>\n",
       "      <td>8505.090557</td>\n",
       "      <td>1000.0</td>\n",
       "      <td>8525.0</td>\n",
       "      <td>14000.0</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>77673.0</td>\n",
       "      <td>15.882587</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>77586.0</td>\n",
       "      <td>0.128412</td>\n",
       "      <td>0.368853</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fully Paid</th>\n",
       "      <td>318357.0</td>\n",
       "      <td>13866.878771</td>\n",
       "      <td>8302.319699</td>\n",
       "      <td>500.0</td>\n",
       "      <td>7500.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>19225.0</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>318357.0</td>\n",
       "      <td>13.092105</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>317909.0</td>\n",
       "      <td>0.119997</td>\n",
       "      <td>0.352992</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 96 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            loan_amnt                                                      \\\n",
       "                count          mean          std     min     25%      50%   \n",
       "loan_status                                                                 \n",
       "Charged Off   77673.0  15126.300967  8505.090557  1000.0  8525.0  14000.0   \n",
       "Fully Paid   318357.0  13866.878771  8302.319699   500.0  7500.0  12000.0   \n",
       "\n",
       "                               int_rate             ... mort_acc        \\\n",
       "                 75%      max     count       mean  ...      75%   max   \n",
       "loan_status                                         ...                  \n",
       "Charged Off  20000.0  40000.0   77673.0  15.882587  ...      2.0  23.0   \n",
       "Fully Paid   19225.0  40000.0  318357.0  13.092105  ...      3.0  34.0   \n",
       "\n",
       "            pub_rec_bankruptcies                                               \n",
       "                           count      mean       std  min  25%  50%  75%  max  \n",
       "loan_status                                                                    \n",
       "Charged Off              77586.0  0.128412  0.368853  0.0  0.0  0.0  0.0  8.0  \n",
       "Fully Paid              317909.0  0.119997  0.352992  0.0  0.0  0.0  0.0  8.0  \n",
       "\n",
       "[2 rows x 96 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['loan_status']).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "63d52a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A', 'B', 'C', 'D', 'E', 'F', 'G']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's explore grade column \n",
    "grade = list(df['grade'].unique())\n",
    "sorted(grade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8a668051",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['A1',\n",
       " 'A2',\n",
       " 'A3',\n",
       " 'A4',\n",
       " 'A5',\n",
       " 'B1',\n",
       " 'B2',\n",
       " 'B3',\n",
       " 'B4',\n",
       " 'B5',\n",
       " 'C1',\n",
       " 'C2',\n",
       " 'C3',\n",
       " 'C4',\n",
       " 'C5',\n",
       " 'D1',\n",
       " 'D2',\n",
       " 'D3',\n",
       " 'D4',\n",
       " 'D5',\n",
       " 'E1',\n",
       " 'E2',\n",
       " 'E3',\n",
       " 'E4',\n",
       " 'E5',\n",
       " 'F1',\n",
       " 'F2',\n",
       " 'F3',\n",
       " 'F4',\n",
       " 'F5',\n",
       " 'G1',\n",
       " 'G2',\n",
       " 'G3',\n",
       " 'G4',\n",
       " 'G5']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(list(df['sub_grade'].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8e8a034c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='grade', ylabel='count'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Countplot per grade\n",
    "sns.countplot(data=df, x = 'grade', hue='loan_status')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c7b68401",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sub_grade', ylabel='count'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "sns.countplot(df['sub_grade'].sort_values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6712580b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sub_grade', ylabel='count'>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "\n",
    "sns.countplot(df['sub_grade'].sort_values(), hue=df['loan_status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8a8c317c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[df['sub_grade'] > 'E5']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c9a4109c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='sub_grade', ylabel='count'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,4))\n",
    "\n",
    "sns.countplot(df1['sub_grade'].sort_values(), hue=df1['loan_status'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8660ddce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Fully Paid', 'Charged Off'], dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking loan paid column\n",
    "df['loan_status'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0b4bb7bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a new column to check fully and less paid \n",
    "def paid(data):\n",
    "    if(data == 'Fully Paid'):\n",
    "        return 1\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6c30f0d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['loan_repaid'] = df['loan_status'].apply(paid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b5be546e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    318357\n",
       "0     77673\n",
       "Name: loan_repaid, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['loan_repaid'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "85b00007",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_repaid</th>\n",
       "      <th>loan_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Charged Off</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396025</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396026</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396027</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396028</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396029</th>\n",
       "      <td>1</td>\n",
       "      <td>Fully Paid</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>396030 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        loan_repaid  loan_status\n",
       "0                 1   Fully Paid\n",
       "1                 1   Fully Paid\n",
       "2                 1   Fully Paid\n",
       "3                 1   Fully Paid\n",
       "4                 0  Charged Off\n",
       "...             ...          ...\n",
       "396025            1   Fully Paid\n",
       "396026            1   Fully Paid\n",
       "396027            1   Fully Paid\n",
       "396028            1   Fully Paid\n",
       "396029            1   Fully Paid\n",
       "\n",
       "[396030 rows x 2 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['loan_repaid','loan_status']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b2a6bceb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.corr()['loan_repaid'][:-1].sort_values().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a40f10e5",
   "metadata": {},
   "source": [
    "# Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "daf20b8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>...</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>application_type</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>address</th>\n",
       "      <th>loan_repaid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>Marketing</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36369.0</td>\n",
       "      <td>41.8</td>\n",
       "      <td>25.0</td>\n",
       "      <td>w</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0174 Michelle Gateway\\r\\nMendozaberg, OK 22690</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>Credit analyst</td>\n",
       "      <td>4 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20131.0</td>\n",
       "      <td>53.3</td>\n",
       "      <td>27.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>B</td>\n",
       "      <td>B3</td>\n",
       "      <td>Statistician</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11987.0</td>\n",
       "      <td>92.2</td>\n",
       "      <td>26.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>A</td>\n",
       "      <td>A2</td>\n",
       "      <td>Client Advocate</td>\n",
       "      <td>6 years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5472.0</td>\n",
       "      <td>21.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>823 Reid Ford\\r\\nDelacruzside, MA 00813</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>C</td>\n",
       "      <td>C5</td>\n",
       "      <td>Destiny Management Inc.</td>\n",
       "      <td>9 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24584.0</td>\n",
       "      <td>69.8</td>\n",
       "      <td>43.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>679 Luna Roads\\r\\nGreggshire, VA 11650</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   loan_amnt        term  int_rate  installment grade sub_grade  \\\n",
       "0    10000.0   36 months     11.44       329.48     B        B4   \n",
       "1     8000.0   36 months     11.99       265.68     B        B5   \n",
       "2    15600.0   36 months     10.49       506.97     B        B3   \n",
       "3     7200.0   36 months      6.49       220.65     A        A2   \n",
       "4    24375.0   60 months     17.27       609.33     C        C5   \n",
       "\n",
       "                 emp_title emp_length home_ownership  annual_inc  ... pub_rec  \\\n",
       "0                Marketing  10+ years           RENT    117000.0  ...     0.0   \n",
       "1          Credit analyst     4 years       MORTGAGE     65000.0  ...     0.0   \n",
       "2             Statistician   < 1 year           RENT     43057.0  ...     0.0   \n",
       "3          Client Advocate    6 years           RENT     54000.0  ...     0.0   \n",
       "4  Destiny Management Inc.    9 years       MORTGAGE     55000.0  ...     0.0   \n",
       "\n",
       "  revol_bal revol_util total_acc initial_list_status  application_type  \\\n",
       "0   36369.0       41.8      25.0                   w        INDIVIDUAL   \n",
       "1   20131.0       53.3      27.0                   f        INDIVIDUAL   \n",
       "2   11987.0       92.2      26.0                   f        INDIVIDUAL   \n",
       "3    5472.0       21.5      13.0                   f        INDIVIDUAL   \n",
       "4   24584.0       69.8      43.0                   f        INDIVIDUAL   \n",
       "\n",
       "  mort_acc  pub_rec_bankruptcies  \\\n",
       "0      0.0                   0.0   \n",
       "1      3.0                   0.0   \n",
       "2      0.0                   0.0   \n",
       "3      0.0                   0.0   \n",
       "4      1.0                   0.0   \n",
       "\n",
       "                                             address  loan_repaid  \n",
       "0     0174 Michelle Gateway\\r\\nMendozaberg, OK 22690            1  \n",
       "1  1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113            1  \n",
       "2  87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113            1  \n",
       "3            823 Reid Ford\\r\\nDelacruzside, MA 00813            1  \n",
       "4             679 Luna Roads\\r\\nGreggshire, VA 11650            0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0e8e8ea",
   "metadata": {},
   "source": [
    "## Handling Missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fbf4e40e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt                   0\n",
       "term                        0\n",
       "int_rate                    0\n",
       "installment                 0\n",
       "grade                       0\n",
       "sub_grade                   0\n",
       "emp_title               22927\n",
       "emp_length              18301\n",
       "home_ownership              0\n",
       "annual_inc                  0\n",
       "verification_status         0\n",
       "issue_d                     0\n",
       "loan_status                 0\n",
       "purpose                     0\n",
       "title                    1755\n",
       "dti                         0\n",
       "earliest_cr_line            0\n",
       "open_acc                    0\n",
       "pub_rec                     0\n",
       "revol_bal                   0\n",
       "revol_util                276\n",
       "total_acc                   0\n",
       "initial_list_status         0\n",
       "application_type            0\n",
       "mort_acc                37795\n",
       "pub_rec_bankruptcies      535\n",
       "address                     0\n",
       "loan_repaid                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1c0a44b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "65f4cce8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1['total'] = pd.DataFrame(df.isnull().count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9faa8ab0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>loan_amnt</th>\n",
       "      <td>0</td>\n",
       "      <td>396030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>term</th>\n",
       "      <td>0</td>\n",
       "      <td>396030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>int_rate</th>\n",
       "      <td>0</td>\n",
       "      <td>396030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>installment</th>\n",
       "      <td>0</td>\n",
       "      <td>396030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <td>0</td>\n",
       "      <td>396030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0   total\n",
       "loan_amnt    0  396030\n",
       "term         0  396030\n",
       "int_rate     0  396030\n",
       "installment  0  396030\n",
       "grade        0  396030"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "48dce468",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.rename(columns = {0:'data'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d2370f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1['perc'] = 100 *(df1['data'] / df1['total'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bf99afe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df1.drop(['data','total'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7737edd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>loan_amnt</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>term</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>int_rate</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>installment</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sub_grade</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp_title</th>\n",
       "      <td>5.789208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp_length</th>\n",
       "      <td>4.621115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_ownership</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>annual_inc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>verification_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>issue_d</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <td>0.443148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dti</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>open_acc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_bal</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_util</th>\n",
       "      <td>0.069692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_acc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>initial_list_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>application_type</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mort_acc</th>\n",
       "      <td>9.543469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <td>0.135091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>address</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_repaid</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          perc\n",
       "loan_amnt             0.000000\n",
       "term                  0.000000\n",
       "int_rate              0.000000\n",
       "installment           0.000000\n",
       "grade                 0.000000\n",
       "sub_grade             0.000000\n",
       "emp_title             5.789208\n",
       "emp_length            4.621115\n",
       "home_ownership        0.000000\n",
       "annual_inc            0.000000\n",
       "verification_status   0.000000\n",
       "issue_d               0.000000\n",
       "loan_status           0.000000\n",
       "purpose               0.000000\n",
       "title                 0.443148\n",
       "dti                   0.000000\n",
       "earliest_cr_line      0.000000\n",
       "open_acc              0.000000\n",
       "pub_rec               0.000000\n",
       "revol_bal             0.000000\n",
       "revol_util            0.069692\n",
       "total_acc             0.000000\n",
       "initial_list_status   0.000000\n",
       "application_type      0.000000\n",
       "mort_acc              9.543469\n",
       "pub_rec_bankruptcies  0.135091\n",
       "address               0.000000\n",
       "loan_repaid           0.000000"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f37c33c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The job title supplied by the Borrower when applying for the loan.*\n",
      "\n",
      "Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years. \n"
     ]
    }
   ],
   "source": [
    "# Checking the employees information\n",
    "feat_info('emp_title')\n",
    "print()\n",
    "feat_info('emp_length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a0c1ad99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['loan_amnt', 'term', 'int_rate', 'installment', 'grade', 'sub_grade',\n",
      "       'emp_title', 'emp_length', 'home_ownership', 'annual_inc',\n",
      "       'verification_status', 'issue_d', 'loan_status', 'purpose', 'title',\n",
      "       'dti', 'earliest_cr_line', 'open_acc', 'pub_rec', 'revol_bal',\n",
      "       'revol_util', 'total_acc', 'initial_list_status', 'application_type',\n",
      "       'mort_acc', 'pub_rec_bankruptcies', 'address', 'loan_repaid'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "78cadcb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "173106"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df['emp_title'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "0b89ffe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Teacher                        4389\n",
       "Manager                        4250\n",
       "Registered Nurse               1856\n",
       "RN                             1846\n",
       "Supervisor                     1830\n",
       "                               ... \n",
       "Data Entry Supervisor             1\n",
       "Business Consultant, expert       1\n",
       "Total System Services             1\n",
       "Denver Wholesale Florists         1\n",
       "Quik Stop Markets  Inc            1\n",
       "Name: emp_title, Length: 173105, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['emp_title'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b21a0327",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('emp_title', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a22ce051",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10+ years',\n",
       " '4 years',\n",
       " '< 1 year',\n",
       " '6 years',\n",
       " '9 years',\n",
       " '2 years',\n",
       " '3 years',\n",
       " '8 years',\n",
       " '7 years',\n",
       " '5 years',\n",
       " '1 year',\n",
       " nan]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df['emp_length'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a809093d",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = df['emp_length'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4d211f9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "d = len(df['emp_length'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a3bf0630",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.621114562028129"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(c/d)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "63ef36a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "2d03ea24",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df2.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6b6d811f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2['emp_length'].isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "cffb9ab4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10+ years',\n",
       " '4 years',\n",
       " '< 1 year',\n",
       " '6 years',\n",
       " '9 years',\n",
       " '2 years',\n",
       " '3 years',\n",
       " '8 years',\n",
       " '7 years',\n",
       " '5 years',\n",
       " '1 year']"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df2['emp_length'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "7fd384e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='emp_length', ylabel='count'>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "sns.countplot(data=df2, x='emp_length')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2d252ae4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='emp_length', ylabel='count'>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Employee length and loan status\n",
    "plt.figure(figsize=(12,4))\n",
    "sns.countplot(data=df2, x='emp_length', hue='loan_status')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c3dd477e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(318357, 27)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['loan_repaid'] == 1].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f474fec4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1 year</td>\n",
       "      <td>32        1\n",
       "67        1\n",
       "75        1\n",
       "77        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10+ years</td>\n",
       "      <td>0         1\n",
       "5         1\n",
       "7         1\n",
       "8         ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2 years</td>\n",
       "      <td>6         1\n",
       "10        1\n",
       "25        0\n",
       "42        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3 years</td>\n",
       "      <td>9         1\n",
       "27        1\n",
       "33        1\n",
       "48        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4 years</td>\n",
       "      <td>1         1\n",
       "39        1\n",
       "40        1\n",
       "78        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5 years</td>\n",
       "      <td>22        1\n",
       "24        1\n",
       "31        1\n",
       "64        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6 years</td>\n",
       "      <td>3         1\n",
       "26        0\n",
       "56        1\n",
       "83        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7 years</td>\n",
       "      <td>12        1\n",
       "19        1\n",
       "38        1\n",
       "54        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8 years</td>\n",
       "      <td>11        1\n",
       "15        1\n",
       "50        1\n",
       "51        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9 years</td>\n",
       "      <td>4         0\n",
       "14        1\n",
       "52        1\n",
       "57        ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>2         1\n",
       "20        1\n",
       "45        1\n",
       "73        ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            0                                                  1\n",
       "0      1 year  32        1\n",
       "67        1\n",
       "75        1\n",
       "77        ...\n",
       "1   10+ years  0         1\n",
       "5         1\n",
       "7         1\n",
       "8         ...\n",
       "2     2 years  6         1\n",
       "10        1\n",
       "25        0\n",
       "42        ...\n",
       "3     3 years  9         1\n",
       "27        1\n",
       "33        1\n",
       "48        ...\n",
       "4     4 years  1         1\n",
       "39        1\n",
       "40        1\n",
       "78        ...\n",
       "5     5 years  22        1\n",
       "24        1\n",
       "31        1\n",
       "64        ...\n",
       "6     6 years  3         1\n",
       "26        0\n",
       "56        1\n",
       "83        ...\n",
       "7     7 years  12        1\n",
       "19        1\n",
       "38        1\n",
       "54        ...\n",
       "8     8 years  11        1\n",
       "15        1\n",
       "50        1\n",
       "51        ...\n",
       "9     9 years  4         0\n",
       "14        1\n",
       "52        1\n",
       "57        ...\n",
       "10   < 1 year  2         1\n",
       "20        1\n",
       "45        1\n",
       "73        ..."
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(df.groupby('emp_length')['loan_repaid'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "4308ca51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>perc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>loan_amnt</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>term</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>int_rate</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>installment</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sub_grade</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp_title</th>\n",
       "      <td>5.789208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp_length</th>\n",
       "      <td>4.621115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_ownership</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>annual_inc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>verification_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>issue_d</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>title</th>\n",
       "      <td>0.443148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dti</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>open_acc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_bal</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>revol_util</th>\n",
       "      <td>0.069692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_acc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>initial_list_status</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>application_type</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mort_acc</th>\n",
       "      <td>9.543469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <td>0.135091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>address</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loan_repaid</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          perc\n",
       "loan_amnt             0.000000\n",
       "term                  0.000000\n",
       "int_rate              0.000000\n",
       "installment           0.000000\n",
       "grade                 0.000000\n",
       "sub_grade             0.000000\n",
       "emp_title             5.789208\n",
       "emp_length            4.621115\n",
       "home_ownership        0.000000\n",
       "annual_inc            0.000000\n",
       "verification_status   0.000000\n",
       "issue_d               0.000000\n",
       "loan_status           0.000000\n",
       "purpose               0.000000\n",
       "title                 0.443148\n",
       "dti                   0.000000\n",
       "earliest_cr_line      0.000000\n",
       "open_acc              0.000000\n",
       "pub_rec               0.000000\n",
       "revol_bal             0.000000\n",
       "revol_util            0.069692\n",
       "total_acc             0.000000\n",
       "initial_list_status   0.000000\n",
       "application_type      0.000000\n",
       "mort_acc              9.543469\n",
       "pub_rec_bankruptcies  0.135091\n",
       "address               0.000000\n",
       "loan_repaid           0.000000"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "389f7f98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "emp_length\n",
       "1 year        5154\n",
       "10+ years    23215\n",
       "2 years       6924\n",
       "3 years       6182\n",
       "4 years       4608\n",
       "5 years       5092\n",
       "6 years       3943\n",
       "7 years       4055\n",
       "8 years       3829\n",
       "9 years       3070\n",
       "< 1 year      6563\n",
       "Name: loan_status, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp_co = df[df['loan_status']==\"Charged Off\"].groupby(\"emp_length\").count()['loan_status']\n",
    "emp_co"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3f67e797",
   "metadata": {},
   "outputs": [],
   "source": [
    "emp_fp = df[df['loan_status']==\"Fully Paid\"].groupby(\"emp_length\").count()['loan_status']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e21a53fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "emp_len = emp_co/emp_fp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "d2d61b16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "emp_length\n",
       "1 year       0.248649\n",
       "10+ years    0.225770\n",
       "2 years      0.239560\n",
       "3 years      0.242593\n",
       "4 years      0.238213\n",
       "5 years      0.237911\n",
       "6 years      0.233341\n",
       "7 years      0.241887\n",
       "8 years      0.249625\n",
       "9 years      0.250735\n",
       "< 1 year     0.260830\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp_len"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ac8c735b",
   "metadata": {},
   "outputs": [],
   "source": [
    "emp_len = pd.DataFrame(emp_len)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "44f87ac1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp_length</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1 year</th>\n",
       "      <td>0.248649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10+ years</th>\n",
       "      <td>0.225770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2 years</th>\n",
       "      <td>0.239560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3 years</th>\n",
       "      <td>0.242593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4 years</th>\n",
       "      <td>0.238213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5 years</th>\n",
       "      <td>0.237911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6 years</th>\n",
       "      <td>0.233341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7 years</th>\n",
       "      <td>0.241887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8 years</th>\n",
       "      <td>0.249625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9 years</th>\n",
       "      <td>0.250735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>&lt; 1 year</th>\n",
       "      <td>0.260830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            loan_status\n",
       "emp_length             \n",
       "1 year         0.248649\n",
       "10+ years      0.225770\n",
       "2 years        0.239560\n",
       "3 years        0.242593\n",
       "4 years        0.238213\n",
       "5 years        0.237911\n",
       "6 years        0.233341\n",
       "7 years        0.241887\n",
       "8 years        0.249625\n",
       "9 years        0.250735\n",
       "< 1 year       0.260830"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp_len"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "f74bcf24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='emp_length', ylabel='loan_status'>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,6))\n",
    "sns.barplot(x=emp_len.index, y=emp_len['loan_status'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ef6628c",
   "metadata": {},
   "source": [
    "### Charge off rates are extremely similar across all employment lengths. Dropping the emp_length column. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "fd8713fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('emp_length', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2a0b8d3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt                   0\n",
       "term                        0\n",
       "int_rate                    0\n",
       "installment                 0\n",
       "grade                       0\n",
       "sub_grade                   0\n",
       "home_ownership              0\n",
       "annual_inc                  0\n",
       "verification_status         0\n",
       "issue_d                     0\n",
       "loan_status                 0\n",
       "purpose                     0\n",
       "title                    1755\n",
       "dti                         0\n",
       "earliest_cr_line            0\n",
       "open_acc                    0\n",
       "pub_rec                     0\n",
       "revol_bal                   0\n",
       "revol_util                276\n",
       "total_acc                   0\n",
       "initial_list_status         0\n",
       "application_type            0\n",
       "mort_acc                37795\n",
       "pub_rec_bankruptcies      535\n",
       "address                     0\n",
       "loan_repaid                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "970c5ed1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              vacation\n",
       "1    debt_consolidation\n",
       "2           credit_card\n",
       "3           credit_card\n",
       "4           credit_card\n",
       "5    debt_consolidation\n",
       "6      home_improvement\n",
       "7           credit_card\n",
       "8    debt_consolidation\n",
       "9    debt_consolidation\n",
       "Name: purpose, dtype: object"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['purpose'].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "d27d11e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                   Vacation\n",
       "1         Debt consolidation\n",
       "2    Credit card refinancing\n",
       "3    Credit card refinancing\n",
       "4      Credit Card Refinance\n",
       "5         Debt consolidation\n",
       "6           Home improvement\n",
       "7       No More Credit Cards\n",
       "8         Debt consolidation\n",
       "9         Debt Consolidation\n",
       "Name: title, dtype: object"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['title'].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "c855195f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('title', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e00dfaa0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of mortgage accounts.\n"
     ]
    }
   ],
   "source": [
    "feat_info('mort_acc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "62c548f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0     139777\n",
       "1.0      60416\n",
       "2.0      49948\n",
       "3.0      38049\n",
       "4.0      27887\n",
       "5.0      18194\n",
       "6.0      11069\n",
       "7.0       6052\n",
       "8.0       3121\n",
       "9.0       1656\n",
       "10.0       865\n",
       "11.0       479\n",
       "12.0       264\n",
       "13.0       146\n",
       "14.0       107\n",
       "15.0        61\n",
       "16.0        37\n",
       "17.0        22\n",
       "18.0        18\n",
       "19.0        15\n",
       "20.0        13\n",
       "24.0        10\n",
       "22.0         7\n",
       "21.0         4\n",
       "25.0         4\n",
       "27.0         3\n",
       "23.0         2\n",
       "31.0         2\n",
       "26.0         2\n",
       "32.0         2\n",
       "28.0         1\n",
       "34.0         1\n",
       "30.0         1\n",
       "Name: mort_acc, dtype: int64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['mort_acc'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "23b6bdf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int_rate               -0.082583\n",
       "dti                    -0.025439\n",
       "revol_util              0.007514\n",
       "pub_rec                 0.011552\n",
       "pub_rec_bankruptcies    0.027239\n",
       "loan_repaid             0.073111\n",
       "open_acc                0.109205\n",
       "installment             0.193694\n",
       "revol_bal               0.194925\n",
       "loan_amnt               0.222315\n",
       "annual_inc              0.236320\n",
       "total_acc               0.381072\n",
       "mort_acc                1.000000\n",
       "Name: mort_acc, dtype: float64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()['mort_acc'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3ffcab77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "total_acc\n",
       "2.0      0.000000\n",
       "3.0      0.052023\n",
       "4.0      0.066743\n",
       "5.0      0.103289\n",
       "6.0      0.151293\n",
       "           ...   \n",
       "124.0    1.000000\n",
       "129.0    1.000000\n",
       "135.0    3.000000\n",
       "150.0    2.000000\n",
       "151.0    0.000000\n",
       "Name: mort_acc, Length: 118, dtype: float64"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('total_acc').mean()['mort_acc']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "163dbc85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imputing\n",
    "avg_val = df.groupby('total_acc').mean()['mort_acc']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "dbd2eb75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_val[2.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "843348bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def impute_data(data1, data2):\n",
    "    if np.isnan(data2):\n",
    "        return avg_val[data1]\n",
    "    else:\n",
    "        return data2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "e66483f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['mort_acc'] = df.apply(lambda x: impute_data(x['total_acc'], x['mort_acc']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "db27329d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt                 0\n",
       "term                      0\n",
       "int_rate                  0\n",
       "installment               0\n",
       "grade                     0\n",
       "sub_grade                 0\n",
       "home_ownership            0\n",
       "annual_inc                0\n",
       "verification_status       0\n",
       "issue_d                   0\n",
       "loan_status               0\n",
       "purpose                   0\n",
       "dti                       0\n",
       "earliest_cr_line          0\n",
       "open_acc                  0\n",
       "pub_rec                   0\n",
       "revol_bal                 0\n",
       "revol_util              276\n",
       "total_acc                 0\n",
       "initial_list_status       0\n",
       "application_type          0\n",
       "mort_acc                  0\n",
       "pub_rec_bankruptcies    535\n",
       "address                   0\n",
       "loan_repaid               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5af315a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "ebe68ade",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>verification_status</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>...</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>application_type</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>address</th>\n",
       "      <th>loan_repaid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>36369.0</td>\n",
       "      <td>41.8</td>\n",
       "      <td>25.0</td>\n",
       "      <td>w</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0174 Michelle Gateway\\r\\nMendozaberg, OK 22690</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20131.0</td>\n",
       "      <td>53.3</td>\n",
       "      <td>27.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>B</td>\n",
       "      <td>B3</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11987.0</td>\n",
       "      <td>92.2</td>\n",
       "      <td>26.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>A</td>\n",
       "      <td>A2</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Nov-2014</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5472.0</td>\n",
       "      <td>21.5</td>\n",
       "      <td>13.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>823 Reid Ford\\r\\nDelacruzside, MA 00813</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>C</td>\n",
       "      <td>C5</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Apr-2013</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>24584.0</td>\n",
       "      <td>69.8</td>\n",
       "      <td>43.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>679 Luna Roads\\r\\nGreggshire, VA 11650</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396025</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>10.99</td>\n",
       "      <td>217.38</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>RENT</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Oct-2015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>34.3</td>\n",
       "      <td>23.0</td>\n",
       "      <td>w</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12951 Williams Crossing\\r\\nJohnnyville, DC 30723</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396026</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>12.29</td>\n",
       "      <td>700.42</td>\n",
       "      <td>C</td>\n",
       "      <td>C1</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Feb-2015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>43263.0</td>\n",
       "      <td>95.7</td>\n",
       "      <td>8.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0114 Fowler Field Suite 028\\r\\nRachelborough, ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396027</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>9.99</td>\n",
       "      <td>161.32</td>\n",
       "      <td>B</td>\n",
       "      <td>B1</td>\n",
       "      <td>RENT</td>\n",
       "      <td>56500.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Oct-2013</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32704.0</td>\n",
       "      <td>66.9</td>\n",
       "      <td>23.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>953 Matthew Points Suite 414\\r\\nReedfort, NY 7...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396028</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>15.31</td>\n",
       "      <td>503.02</td>\n",
       "      <td>C</td>\n",
       "      <td>C2</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>64000.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Aug-2012</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15704.0</td>\n",
       "      <td>53.8</td>\n",
       "      <td>20.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7843 Blake Freeway Apt. 229\\r\\nNew Michael, FL...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396029</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.61</td>\n",
       "      <td>67.98</td>\n",
       "      <td>C</td>\n",
       "      <td>C2</td>\n",
       "      <td>RENT</td>\n",
       "      <td>42996.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Jun-2010</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4292.0</td>\n",
       "      <td>91.3</td>\n",
       "      <td>19.0</td>\n",
       "      <td>f</td>\n",
       "      <td>INDIVIDUAL</td>\n",
       "      <td>1.358013</td>\n",
       "      <td>0.0</td>\n",
       "      <td>787 Michelle Causeway\\r\\nBriannaton, AR 48052</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395219 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        loan_amnt        term  int_rate  installment grade sub_grade  \\\n",
       "0         10000.0   36 months     11.44       329.48     B        B4   \n",
       "1          8000.0   36 months     11.99       265.68     B        B5   \n",
       "2         15600.0   36 months     10.49       506.97     B        B3   \n",
       "3          7200.0   36 months      6.49       220.65     A        A2   \n",
       "4         24375.0   60 months     17.27       609.33     C        C5   \n",
       "...           ...         ...       ...          ...   ...       ...   \n",
       "396025    10000.0   60 months     10.99       217.38     B        B4   \n",
       "396026    21000.0   36 months     12.29       700.42     C        C1   \n",
       "396027     5000.0   36 months      9.99       161.32     B        B1   \n",
       "396028    21000.0   60 months     15.31       503.02     C        C2   \n",
       "396029     2000.0   36 months     13.61        67.98     C        C2   \n",
       "\n",
       "       home_ownership  annual_inc verification_status   issue_d  ... pub_rec  \\\n",
       "0                RENT    117000.0        Not Verified  Jan-2015  ...     0.0   \n",
       "1            MORTGAGE     65000.0        Not Verified  Jan-2015  ...     0.0   \n",
       "2                RENT     43057.0     Source Verified  Jan-2015  ...     0.0   \n",
       "3                RENT     54000.0        Not Verified  Nov-2014  ...     0.0   \n",
       "4            MORTGAGE     55000.0            Verified  Apr-2013  ...     0.0   \n",
       "...               ...         ...                 ...       ...  ...     ...   \n",
       "396025           RENT     40000.0     Source Verified  Oct-2015  ...     0.0   \n",
       "396026       MORTGAGE    110000.0     Source Verified  Feb-2015  ...     0.0   \n",
       "396027           RENT     56500.0            Verified  Oct-2013  ...     0.0   \n",
       "396028       MORTGAGE     64000.0            Verified  Aug-2012  ...     0.0   \n",
       "396029           RENT     42996.0            Verified  Jun-2010  ...     0.0   \n",
       "\n",
       "       revol_bal  revol_util total_acc  initial_list_status  application_type  \\\n",
       "0        36369.0        41.8      25.0                    w        INDIVIDUAL   \n",
       "1        20131.0        53.3      27.0                    f        INDIVIDUAL   \n",
       "2        11987.0        92.2      26.0                    f        INDIVIDUAL   \n",
       "3         5472.0        21.5      13.0                    f        INDIVIDUAL   \n",
       "4        24584.0        69.8      43.0                    f        INDIVIDUAL   \n",
       "...          ...         ...       ...                  ...               ...   \n",
       "396025    1990.0        34.3      23.0                    w        INDIVIDUAL   \n",
       "396026   43263.0        95.7       8.0                    f        INDIVIDUAL   \n",
       "396027   32704.0        66.9      23.0                    f        INDIVIDUAL   \n",
       "396028   15704.0        53.8      20.0                    f        INDIVIDUAL   \n",
       "396029    4292.0        91.3      19.0                    f        INDIVIDUAL   \n",
       "\n",
       "        mort_acc  pub_rec_bankruptcies  \\\n",
       "0       0.000000                   0.0   \n",
       "1       3.000000                   0.0   \n",
       "2       0.000000                   0.0   \n",
       "3       0.000000                   0.0   \n",
       "4       1.000000                   0.0   \n",
       "...          ...                   ...   \n",
       "396025  0.000000                   0.0   \n",
       "396026  1.000000                   0.0   \n",
       "396027  0.000000                   0.0   \n",
       "396028  5.000000                   0.0   \n",
       "396029  1.358013                   0.0   \n",
       "\n",
       "                                                  address loan_repaid  \n",
       "0          0174 Michelle Gateway\\r\\nMendozaberg, OK 22690           1  \n",
       "1       1076 Carney Fort Apt. 347\\r\\nLoganmouth, SD 05113           1  \n",
       "2       87025 Mark Dale Apt. 269\\r\\nNew Sabrina, WV 05113           1  \n",
       "3                 823 Reid Ford\\r\\nDelacruzside, MA 00813           1  \n",
       "4                  679 Luna Roads\\r\\nGreggshire, VA 11650           0  \n",
       "...                                                   ...         ...  \n",
       "396025   12951 Williams Crossing\\r\\nJohnnyville, DC 30723           1  \n",
       "396026  0114 Fowler Field Suite 028\\r\\nRachelborough, ...           1  \n",
       "396027  953 Matthew Points Suite 414\\r\\nReedfort, NY 7...           1  \n",
       "396028  7843 Blake Freeway Apt. 229\\r\\nNew Michael, FL...           1  \n",
       "396029      787 Michelle Causeway\\r\\nBriannaton, AR 48052           1  \n",
       "\n",
       "[395219 rows x 25 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's drop small rows\n",
    "df = df.dropna()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e6db877e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_amnt               0\n",
       "term                    0\n",
       "int_rate                0\n",
       "installment             0\n",
       "grade                   0\n",
       "sub_grade               0\n",
       "home_ownership          0\n",
       "annual_inc              0\n",
       "verification_status     0\n",
       "issue_d                 0\n",
       "loan_status             0\n",
       "purpose                 0\n",
       "dti                     0\n",
       "earliest_cr_line        0\n",
       "open_acc                0\n",
       "pub_rec                 0\n",
       "revol_bal               0\n",
       "revol_util              0\n",
       "total_acc               0\n",
       "initial_list_status     0\n",
       "application_type        0\n",
       "mort_acc                0\n",
       "pub_rec_bankruptcies    0\n",
       "address                 0\n",
       "loan_repaid             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5ffb5ec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['term', 'grade', 'sub_grade', 'home_ownership', 'verification_status',\n",
       "       'issue_d', 'loan_status', 'purpose', 'earliest_cr_line',\n",
       "       'initial_list_status', 'application_type', 'address'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Working on categorical values\n",
    "df.select_dtypes('object').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "3df71014",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       " 36 months    301247\n",
       " 60 months     93972\n",
       "Name: term, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Let's go through columns\n",
    "df['term'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "5c661797",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grade is subcolumn of sub_grade so dropping it\n",
    "df = df.drop('grade', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "b58fbc6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns=['sub_grade'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "e4767e77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>verification_status</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>purpose</th>\n",
       "      <th>...</th>\n",
       "      <th>sub_grade_F1</th>\n",
       "      <th>sub_grade_F2</th>\n",
       "      <th>sub_grade_F3</th>\n",
       "      <th>sub_grade_F4</th>\n",
       "      <th>sub_grade_F5</th>\n",
       "      <th>sub_grade_G1</th>\n",
       "      <th>sub_grade_G2</th>\n",
       "      <th>sub_grade_G3</th>\n",
       "      <th>sub_grade_G4</th>\n",
       "      <th>sub_grade_G5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>vacation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Nov-2014</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Apr-2013</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396025</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>10.99</td>\n",
       "      <td>217.38</td>\n",
       "      <td>RENT</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Oct-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396026</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>12.29</td>\n",
       "      <td>700.42</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Feb-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396027</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>9.99</td>\n",
       "      <td>161.32</td>\n",
       "      <td>RENT</td>\n",
       "      <td>56500.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Oct-2013</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396028</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>15.31</td>\n",
       "      <td>503.02</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>64000.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Aug-2012</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396029</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.61</td>\n",
       "      <td>67.98</td>\n",
       "      <td>RENT</td>\n",
       "      <td>42996.0</td>\n",
       "      <td>Verified</td>\n",
       "      <td>Jun-2010</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395219 rows × 57 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        loan_amnt        term  int_rate  installment home_ownership  \\\n",
       "0         10000.0   36 months     11.44       329.48           RENT   \n",
       "1          8000.0   36 months     11.99       265.68       MORTGAGE   \n",
       "2         15600.0   36 months     10.49       506.97           RENT   \n",
       "3          7200.0   36 months      6.49       220.65           RENT   \n",
       "4         24375.0   60 months     17.27       609.33       MORTGAGE   \n",
       "...           ...         ...       ...          ...            ...   \n",
       "396025    10000.0   60 months     10.99       217.38           RENT   \n",
       "396026    21000.0   36 months     12.29       700.42       MORTGAGE   \n",
       "396027     5000.0   36 months      9.99       161.32           RENT   \n",
       "396028    21000.0   60 months     15.31       503.02       MORTGAGE   \n",
       "396029     2000.0   36 months     13.61        67.98           RENT   \n",
       "\n",
       "        annual_inc verification_status   issue_d  loan_status  \\\n",
       "0         117000.0        Not Verified  Jan-2015   Fully Paid   \n",
       "1          65000.0        Not Verified  Jan-2015   Fully Paid   \n",
       "2          43057.0     Source Verified  Jan-2015   Fully Paid   \n",
       "3          54000.0        Not Verified  Nov-2014   Fully Paid   \n",
       "4          55000.0            Verified  Apr-2013  Charged Off   \n",
       "...            ...                 ...       ...          ...   \n",
       "396025     40000.0     Source Verified  Oct-2015   Fully Paid   \n",
       "396026    110000.0     Source Verified  Feb-2015   Fully Paid   \n",
       "396027     56500.0            Verified  Oct-2013   Fully Paid   \n",
       "396028     64000.0            Verified  Aug-2012   Fully Paid   \n",
       "396029     42996.0            Verified  Jun-2010   Fully Paid   \n",
       "\n",
       "                   purpose  ...  sub_grade_F1 sub_grade_F2  sub_grade_F3  \\\n",
       "0                 vacation  ...             0            0             0   \n",
       "1       debt_consolidation  ...             0            0             0   \n",
       "2              credit_card  ...             0            0             0   \n",
       "3              credit_card  ...             0            0             0   \n",
       "4              credit_card  ...             0            0             0   \n",
       "...                    ...  ...           ...          ...           ...   \n",
       "396025  debt_consolidation  ...             0            0             0   \n",
       "396026  debt_consolidation  ...             0            0             0   \n",
       "396027  debt_consolidation  ...             0            0             0   \n",
       "396028  debt_consolidation  ...             0            0             0   \n",
       "396029  debt_consolidation  ...             0            0             0   \n",
       "\n",
       "        sub_grade_F4  sub_grade_F5  sub_grade_G1  sub_grade_G2 sub_grade_G3  \\\n",
       "0                  0             0             0             0            0   \n",
       "1                  0             0             0             0            0   \n",
       "2                  0             0             0             0            0   \n",
       "3                  0             0             0             0            0   \n",
       "4                  0             0             0             0            0   \n",
       "...              ...           ...           ...           ...          ...   \n",
       "396025             0             0             0             0            0   \n",
       "396026             0             0             0             0            0   \n",
       "396027             0             0             0             0            0   \n",
       "396028             0             0             0             0            0   \n",
       "396029             0             0             0             0            0   \n",
       "\n",
       "       sub_grade_G4  sub_grade_G5  \n",
       "0                 0             0  \n",
       "1                 0             0  \n",
       "2                 0             0  \n",
       "3                 0             0  \n",
       "4                 0             0  \n",
       "...             ...           ...  \n",
       "396025            0             0  \n",
       "396026            0             0  \n",
       "396027            0             0  \n",
       "396028            0             0  \n",
       "396029            0             0  \n",
       "\n",
       "[395219 rows x 57 columns]"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "4d50fe5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df = pd.get_dummies(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "52d7e793",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "aad33c50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.select_dtypes('object').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "8002ba39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df = df.drop('sub_grade', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4db76ca2",
   "metadata": {},
   "source": [
    "### verification_status, application_type,initial_list_status,purpose "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e2718006",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(df, columns= ['verification_status', 'application_type','initial_list_status','purpose'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a2260205",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['loan_amnt', 'term', 'int_rate', 'installment', 'home_ownership',\n",
       "       'annual_inc', 'issue_d', 'loan_status', 'dti', 'earliest_cr_line',\n",
       "       'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc',\n",
       "       'mort_acc', 'pub_rec_bankruptcies', 'address', 'loan_repaid',\n",
       "       'sub_grade_A2', 'sub_grade_A3', 'sub_grade_A4', 'sub_grade_A5',\n",
       "       'sub_grade_B1', 'sub_grade_B2', 'sub_grade_B3', 'sub_grade_B4',\n",
       "       'sub_grade_B5', 'sub_grade_C1', 'sub_grade_C2', 'sub_grade_C3',\n",
       "       'sub_grade_C4', 'sub_grade_C5', 'sub_grade_D1', 'sub_grade_D2',\n",
       "       'sub_grade_D3', 'sub_grade_D4', 'sub_grade_D5', 'sub_grade_E1',\n",
       "       'sub_grade_E2', 'sub_grade_E3', 'sub_grade_E4', 'sub_grade_E5',\n",
       "       'sub_grade_F1', 'sub_grade_F2', 'sub_grade_F3', 'sub_grade_F4',\n",
       "       'sub_grade_F5', 'sub_grade_G1', 'sub_grade_G2', 'sub_grade_G3',\n",
       "       'sub_grade_G4', 'sub_grade_G5', 'verification_status_Source Verified',\n",
       "       'verification_status_Verified', 'application_type_INDIVIDUAL',\n",
       "       'application_type_JOINT', 'initial_list_status_w',\n",
       "       'purpose_credit_card', 'purpose_debt_consolidation',\n",
       "       'purpose_educational', 'purpose_home_improvement', 'purpose_house',\n",
       "       'purpose_major_purchase', 'purpose_medical', 'purpose_moving',\n",
       "       'purpose_other', 'purpose_renewable_energy', 'purpose_small_business',\n",
       "       'purpose_vacation', 'purpose_wedding'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "7d061683",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MORTGAGE    198022\n",
       "RENT        159395\n",
       "OWN          37660\n",
       "OTHER          110\n",
       "NONE            29\n",
       "ANY              3\n",
       "Name: home_ownership, dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking home ownership\n",
    "df['home_ownership'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "47e5ee20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>dti</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>...</th>\n",
       "      <th>purpose_home_improvement</th>\n",
       "      <th>purpose_house</th>\n",
       "      <th>purpose_major_purchase</th>\n",
       "      <th>purpose_medical</th>\n",
       "      <th>purpose_moving</th>\n",
       "      <th>purpose_other</th>\n",
       "      <th>purpose_renewable_energy</th>\n",
       "      <th>purpose_small_business</th>\n",
       "      <th>purpose_vacation</th>\n",
       "      <th>purpose_wedding</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>26.24</td>\n",
       "      <td>Jun-1990</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>22.05</td>\n",
       "      <td>Jul-2004</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>12.79</td>\n",
       "      <td>Aug-2007</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>Nov-2014</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>2.60</td>\n",
       "      <td>Sep-2006</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>Apr-2013</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>33.95</td>\n",
       "      <td>Mar-1999</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396025</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>10.99</td>\n",
       "      <td>217.38</td>\n",
       "      <td>RENT</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>Oct-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>15.63</td>\n",
       "      <td>Nov-2004</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396026</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>12.29</td>\n",
       "      <td>700.42</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>Feb-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>21.45</td>\n",
       "      <td>Feb-2006</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396027</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>9.99</td>\n",
       "      <td>161.32</td>\n",
       "      <td>RENT</td>\n",
       "      <td>56500.0</td>\n",
       "      <td>Oct-2013</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>17.56</td>\n",
       "      <td>Mar-1997</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396028</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>15.31</td>\n",
       "      <td>503.02</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>64000.0</td>\n",
       "      <td>Aug-2012</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>15.88</td>\n",
       "      <td>Nov-1990</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396029</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.61</td>\n",
       "      <td>67.98</td>\n",
       "      <td>RENT</td>\n",
       "      <td>42996.0</td>\n",
       "      <td>Jun-2010</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>8.32</td>\n",
       "      <td>Sep-1998</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395219 rows × 71 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        loan_amnt        term  int_rate  installment home_ownership  \\\n",
       "0         10000.0   36 months     11.44       329.48           RENT   \n",
       "1          8000.0   36 months     11.99       265.68       MORTGAGE   \n",
       "2         15600.0   36 months     10.49       506.97           RENT   \n",
       "3          7200.0   36 months      6.49       220.65           RENT   \n",
       "4         24375.0   60 months     17.27       609.33       MORTGAGE   \n",
       "...           ...         ...       ...          ...            ...   \n",
       "396025    10000.0   60 months     10.99       217.38           RENT   \n",
       "396026    21000.0   36 months     12.29       700.42       MORTGAGE   \n",
       "396027     5000.0   36 months      9.99       161.32           RENT   \n",
       "396028    21000.0   60 months     15.31       503.02       MORTGAGE   \n",
       "396029     2000.0   36 months     13.61        67.98           RENT   \n",
       "\n",
       "        annual_inc   issue_d  loan_status    dti earliest_cr_line  ...  \\\n",
       "0         117000.0  Jan-2015   Fully Paid  26.24         Jun-1990  ...   \n",
       "1          65000.0  Jan-2015   Fully Paid  22.05         Jul-2004  ...   \n",
       "2          43057.0  Jan-2015   Fully Paid  12.79         Aug-2007  ...   \n",
       "3          54000.0  Nov-2014   Fully Paid   2.60         Sep-2006  ...   \n",
       "4          55000.0  Apr-2013  Charged Off  33.95         Mar-1999  ...   \n",
       "...            ...       ...          ...    ...              ...  ...   \n",
       "396025     40000.0  Oct-2015   Fully Paid  15.63         Nov-2004  ...   \n",
       "396026    110000.0  Feb-2015   Fully Paid  21.45         Feb-2006  ...   \n",
       "396027     56500.0  Oct-2013   Fully Paid  17.56         Mar-1997  ...   \n",
       "396028     64000.0  Aug-2012   Fully Paid  15.88         Nov-1990  ...   \n",
       "396029     42996.0  Jun-2010   Fully Paid   8.32         Sep-1998  ...   \n",
       "\n",
       "        purpose_home_improvement  purpose_house  purpose_major_purchase  \\\n",
       "0                              0              0                       0   \n",
       "1                              0              0                       0   \n",
       "2                              0              0                       0   \n",
       "3                              0              0                       0   \n",
       "4                              0              0                       0   \n",
       "...                          ...            ...                     ...   \n",
       "396025                         0              0                       0   \n",
       "396026                         0              0                       0   \n",
       "396027                         0              0                       0   \n",
       "396028                         0              0                       0   \n",
       "396029                         0              0                       0   \n",
       "\n",
       "        purpose_medical  purpose_moving  purpose_other  \\\n",
       "0                     0               0              0   \n",
       "1                     0               0              0   \n",
       "2                     0               0              0   \n",
       "3                     0               0              0   \n",
       "4                     0               0              0   \n",
       "...                 ...             ...            ...   \n",
       "396025                0               0              0   \n",
       "396026                0               0              0   \n",
       "396027                0               0              0   \n",
       "396028                0               0              0   \n",
       "396029                0               0              0   \n",
       "\n",
       "        purpose_renewable_energy purpose_small_business  purpose_vacation  \\\n",
       "0                              0                      0                 1   \n",
       "1                              0                      0                 0   \n",
       "2                              0                      0                 0   \n",
       "3                              0                      0                 0   \n",
       "4                              0                      0                 0   \n",
       "...                          ...                    ...               ...   \n",
       "396025                         0                      0                 0   \n",
       "396026                         0                      0                 0   \n",
       "396027                         0                      0                 0   \n",
       "396028                         0                      0                 0   \n",
       "396029                         0                      0                 0   \n",
       "\n",
       "        purpose_wedding  \n",
       "0                     0  \n",
       "1                     0  \n",
       "2                     0  \n",
       "3                     0  \n",
       "4                     0  \n",
       "...                 ...  \n",
       "396025                0  \n",
       "396026                0  \n",
       "396027                0  \n",
       "396028                0  \n",
       "396029                0  \n",
       "\n",
       "[395219 rows x 71 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace('NONE','OTHER')\n",
    "df.replace('ANY','OTHER')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "4f89b4f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "USCGC Smith\\r\\nFPO AE 70466                                      8\n",
       "USNS Johnson\\r\\nFPO AE 05113                                     8\n",
       "USS Smith\\r\\nFPO AP 70466                                        8\n",
       "USS Johnson\\r\\nFPO AE 48052                                      8\n",
       "USNS Johnson\\r\\nFPO AP 48052                                     7\n",
       "                                                                ..\n",
       "12739 Jason Underpass\\r\\nWendytown, VT 05113                     1\n",
       "14402 Burton Stravenue Apt. 522\\r\\nNew Davidmouth, CA 22690      1\n",
       "1904 Hoffman Lock\\r\\nEast Dawn, AK 29597                         1\n",
       "075 Kristy Shore Suite 650\\r\\nSouth Jenniferborough, NY 29597    1\n",
       "0589 Debra Underpass\\r\\nPort Christyborough, CO 00813            1\n",
       "Name: address, Length: 392898, dtype: int64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['address'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "92f75701",
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_zip(address):\n",
    "    return ((address[-5:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "afdaaa6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "z = 'hello djsfsdkfsdf 12345'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4c1a819e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'12345'"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "extract_zip(z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "5990813f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['zip_code'] = df.apply(lambda x: extract_zip(x['address']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "fecdf6ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70466    56880\n",
       "22690    56413\n",
       "30723    56402\n",
       "48052    55811\n",
       "00813    45725\n",
       "29597    45393\n",
       "05113    45300\n",
       "11650    11210\n",
       "93700    11126\n",
       "86630    10959\n",
       "Name: zip_code, dtype: int64"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['zip_code'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "a940bdca",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.get_dummies(data=df, columns=['zip_code'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "14935490",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>dti</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>...</th>\n",
       "      <th>purpose_wedding</th>\n",
       "      <th>zip_code_05113</th>\n",
       "      <th>zip_code_11650</th>\n",
       "      <th>zip_code_22690</th>\n",
       "      <th>zip_code_29597</th>\n",
       "      <th>zip_code_30723</th>\n",
       "      <th>zip_code_48052</th>\n",
       "      <th>zip_code_70466</th>\n",
       "      <th>zip_code_86630</th>\n",
       "      <th>zip_code_93700</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.44</td>\n",
       "      <td>329.48</td>\n",
       "      <td>RENT</td>\n",
       "      <td>117000.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>26.24</td>\n",
       "      <td>Jun-1990</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.99</td>\n",
       "      <td>265.68</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>22.05</td>\n",
       "      <td>Jul-2004</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15600.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.49</td>\n",
       "      <td>506.97</td>\n",
       "      <td>RENT</td>\n",
       "      <td>43057.0</td>\n",
       "      <td>Jan-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>12.79</td>\n",
       "      <td>Aug-2007</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7200.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>6.49</td>\n",
       "      <td>220.65</td>\n",
       "      <td>RENT</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>Nov-2014</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>2.60</td>\n",
       "      <td>Sep-2006</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24375.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>17.27</td>\n",
       "      <td>609.33</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>Apr-2013</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>33.95</td>\n",
       "      <td>Mar-1999</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396025</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>10.99</td>\n",
       "      <td>217.38</td>\n",
       "      <td>RENT</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>Oct-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>15.63</td>\n",
       "      <td>Nov-2004</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396026</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>12.29</td>\n",
       "      <td>700.42</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>Feb-2015</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>21.45</td>\n",
       "      <td>Feb-2006</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396027</th>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>9.99</td>\n",
       "      <td>161.32</td>\n",
       "      <td>RENT</td>\n",
       "      <td>56500.0</td>\n",
       "      <td>Oct-2013</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>17.56</td>\n",
       "      <td>Mar-1997</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396028</th>\n",
       "      <td>21000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>15.31</td>\n",
       "      <td>503.02</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>64000.0</td>\n",
       "      <td>Aug-2012</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>15.88</td>\n",
       "      <td>Nov-1990</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396029</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.61</td>\n",
       "      <td>67.98</td>\n",
       "      <td>RENT</td>\n",
       "      <td>42996.0</td>\n",
       "      <td>Jun-2010</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>8.32</td>\n",
       "      <td>Sep-1998</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395219 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        loan_amnt        term  int_rate  installment home_ownership  \\\n",
       "0         10000.0   36 months     11.44       329.48           RENT   \n",
       "1          8000.0   36 months     11.99       265.68       MORTGAGE   \n",
       "2         15600.0   36 months     10.49       506.97           RENT   \n",
       "3          7200.0   36 months      6.49       220.65           RENT   \n",
       "4         24375.0   60 months     17.27       609.33       MORTGAGE   \n",
       "...           ...         ...       ...          ...            ...   \n",
       "396025    10000.0   60 months     10.99       217.38           RENT   \n",
       "396026    21000.0   36 months     12.29       700.42       MORTGAGE   \n",
       "396027     5000.0   36 months      9.99       161.32           RENT   \n",
       "396028    21000.0   60 months     15.31       503.02       MORTGAGE   \n",
       "396029     2000.0   36 months     13.61        67.98           RENT   \n",
       "\n",
       "        annual_inc   issue_d  loan_status    dti earliest_cr_line  ...  \\\n",
       "0         117000.0  Jan-2015   Fully Paid  26.24         Jun-1990  ...   \n",
       "1          65000.0  Jan-2015   Fully Paid  22.05         Jul-2004  ...   \n",
       "2          43057.0  Jan-2015   Fully Paid  12.79         Aug-2007  ...   \n",
       "3          54000.0  Nov-2014   Fully Paid   2.60         Sep-2006  ...   \n",
       "4          55000.0  Apr-2013  Charged Off  33.95         Mar-1999  ...   \n",
       "...            ...       ...          ...    ...              ...  ...   \n",
       "396025     40000.0  Oct-2015   Fully Paid  15.63         Nov-2004  ...   \n",
       "396026    110000.0  Feb-2015   Fully Paid  21.45         Feb-2006  ...   \n",
       "396027     56500.0  Oct-2013   Fully Paid  17.56         Mar-1997  ...   \n",
       "396028     64000.0  Aug-2012   Fully Paid  15.88         Nov-1990  ...   \n",
       "396029     42996.0  Jun-2010   Fully Paid   8.32         Sep-1998  ...   \n",
       "\n",
       "        purpose_wedding  zip_code_05113  zip_code_11650  zip_code_22690  \\\n",
       "0                     0               0               0               1   \n",
       "1                     0               1               0               0   \n",
       "2                     0               1               0               0   \n",
       "3                     0               0               0               0   \n",
       "4                     0               0               1               0   \n",
       "...                 ...             ...             ...             ...   \n",
       "396025                0               0               0               0   \n",
       "396026                0               1               0               0   \n",
       "396027                0               0               0               0   \n",
       "396028                0               0               0               0   \n",
       "396029                0               0               0               0   \n",
       "\n",
       "        zip_code_29597  zip_code_30723  zip_code_48052 zip_code_70466  \\\n",
       "0                    0               0               0              0   \n",
       "1                    0               0               0              0   \n",
       "2                    0               0               0              0   \n",
       "3                    0               0               0              0   \n",
       "4                    0               0               0              0   \n",
       "...                ...             ...             ...            ...   \n",
       "396025               0               1               0              0   \n",
       "396026               0               0               0              0   \n",
       "396027               0               0               0              1   \n",
       "396028               1               0               0              0   \n",
       "396029               0               0               1              0   \n",
       "\n",
       "        zip_code_86630  zip_code_93700  \n",
       "0                    0               0  \n",
       "1                    0               0  \n",
       "2                    0               0  \n",
       "3                    0               0  \n",
       "4                    0               0  \n",
       "...                ...             ...  \n",
       "396025               0               0  \n",
       "396026               0               0  \n",
       "396027               0               0  \n",
       "396028               0               0  \n",
       "396029               0               0  \n",
       "\n",
       "[395219 rows x 80 columns]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "081dcb87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['loan_amnt', 'term', 'int_rate', 'installment', 'home_ownership',\n",
       "       'annual_inc', 'issue_d', 'loan_status', 'dti', 'earliest_cr_line',\n",
       "       'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 'total_acc',\n",
       "       'mort_acc', 'pub_rec_bankruptcies', 'address', 'loan_repaid',\n",
       "       'sub_grade_A2', 'sub_grade_A3', 'sub_grade_A4', 'sub_grade_A5',\n",
       "       'sub_grade_B1', 'sub_grade_B2', 'sub_grade_B3', 'sub_grade_B4',\n",
       "       'sub_grade_B5', 'sub_grade_C1', 'sub_grade_C2', 'sub_grade_C3',\n",
       "       'sub_grade_C4', 'sub_grade_C5', 'sub_grade_D1', 'sub_grade_D2',\n",
       "       'sub_grade_D3', 'sub_grade_D4', 'sub_grade_D5', 'sub_grade_E1',\n",
       "       'sub_grade_E2', 'sub_grade_E3', 'sub_grade_E4', 'sub_grade_E5',\n",
       "       'sub_grade_F1', 'sub_grade_F2', 'sub_grade_F3', 'sub_grade_F4',\n",
       "       'sub_grade_F5', 'sub_grade_G1', 'sub_grade_G2', 'sub_grade_G3',\n",
       "       'sub_grade_G4', 'sub_grade_G5', 'verification_status_Source Verified',\n",
       "       'verification_status_Verified', 'application_type_INDIVIDUAL',\n",
       "       'application_type_JOINT', 'initial_list_status_w',\n",
       "       'purpose_credit_card', 'purpose_debt_consolidation',\n",
       "       'purpose_educational', 'purpose_home_improvement', 'purpose_house',\n",
       "       'purpose_major_purchase', 'purpose_medical', 'purpose_moving',\n",
       "       'purpose_other', 'purpose_renewable_energy', 'purpose_small_business',\n",
       "       'purpose_vacation', 'purpose_wedding', 'zip_code_05113',\n",
       "       'zip_code_11650', 'zip_code_22690', 'zip_code_29597', 'zip_code_30723',\n",
       "       'zip_code_48052', 'zip_code_70466', 'zip_code_86630', 'zip_code_93700'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "a567c8f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "112"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df['issue_d'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "6e9e19a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('issue_d', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "6c1fe354",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Oct-2000    3013\n",
       "Aug-2000    2930\n",
       "Oct-2001    2890\n",
       "Aug-2001    2879\n",
       "Nov-2000    2729\n",
       "            ... \n",
       "Dec-1959       1\n",
       "Apr-1960       1\n",
       "Oct-1961       1\n",
       "Aug-1959       1\n",
       "Mar-1960       1\n",
       "Name: earliest_cr_line, Length: 684, dtype: int64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['earliest_cr_line'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "1a0f2789",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['earliest_cr_line'] = pd.to_datetime(df['earliest_cr_line'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "d8075f01",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['earliest_cr_year'] = df['earliest_cr_line'].dt.year\n",
    "# df.select_dtypes('object').columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "299fc6ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('earliest_cr_line', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "43d850a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['term', 'home_ownership', 'loan_status', 'address'], dtype='object')"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(['object']).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "da483b3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['term', 'home_ownership','address'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "5518335a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['loan_status'], dtype='object')"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.select_dtypes(['object']).columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66b37508",
   "metadata": {},
   "source": [
    "## Train test split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "0fd59edc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "f1492e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('loan_status', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "88398a64",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('loan_repaid', axis=1).values\n",
    "y = df['loan_repaid'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "9e71a3bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "cb8d9fd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "316175"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "6b70b830",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "316175"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10462fa9",
   "metadata": {},
   "source": [
    "## Scaling the data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "05ee671c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "e236f00c",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "ae3e4675",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = scaler.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "3dadc541",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c93ea233",
   "metadata": {},
   "source": [
    "# Creating a model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2421802b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential \n",
    "from tensorflow.keras.layers import Dense, Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a0cd3b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Dense(78, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(39, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(19, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67b1c933",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='binary_crossentropy', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "318cb7d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(x=X_train, \n",
    "          y=y_train, \n",
    "          epochs=25,\n",
    "          batch_size=256,\n",
    "          validation_data=(X_test, y_test), \n",
    "          )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02b6f485",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.models import load_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "650f8d96",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('full_model_project.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff48bca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "losses = pd.DataFrame(model.history.history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ae68cef",
   "metadata": {},
   "outputs": [],
   "source": [
    "losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "055d7419",
   "metadata": {},
   "outputs": [],
   "source": [
    "losses.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24a42278",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicting the values\n",
    "preds = (model.predict(X_test) > 0.5).astype(\"int32\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "362aa658",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd1cd3ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting classification report\n",
    "print(classification_report(y_test, preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3281d9d4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f45d89e",
   "metadata": {},
   "outputs": [],
   "source": [
    "confusion_matrix(y_test, preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c615101",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
